{"version":3,"sources":["routes.ts","history.ts","pages/Navbar/NavIcon.tsx","pages/Navbar/index.tsx","components/GenericCard/index.tsx","components/FoodCard/ContainerOverview.tsx","components/FoodCard/index.tsx","pages/Header/index.tsx","components/Input/index.tsx","components/CenterNotice/index.tsx","components/SearchList/index.tsx","pages/Food/index.tsx","data/typedefs.ts","components/Button/index.tsx","components/Form/index.tsx","pages/CreateFood/index.tsx","pages/FoodDetails/auxInfo.tsx","pages/FoodDetails/listInfoItem.tsx","components/PercentageBar/index.tsx","utils.ts","components/ContainerCard/index.tsx","pages/FoodDetails/index.tsx","pages/Container/index.tsx","data/resolvers.ts","pages/Settings/index.tsx","components/FoodTypePicker/index.tsx","pages/Buy/FoodQuantityInfo.tsx","components/Wizard/StepIndicator.tsx","components/Wizard/index.tsx","pages/Buy/SelectFoodPopup.tsx","pages/Buy/PendingOrderCard.tsx","pages/Buy/PendingInfoSummary.tsx","pages/Buy/index.tsx","pages/Consume/AmountInput.tsx","pages/Consume/ContainerPicker.tsx","pages/Consume/SelectFoodPopup.tsx","pages/Consume/PendingConsumptionCard.tsx","pages/Consume/index.tsx","reducers/index.ts","data/graphql.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PageNames","Routes","FOOD_LIST","FOOD_ADD","FOOD_DETAILS","FOOD_EDIT","BUY_FOOD","CONTAINERS_LIST","SETTINGS","CONSUME","HOME","history","createBrowserHistory","basename","forceRefresh","NavIcon","title","icon","active","path","className","Icon","style","color","navItems","tag","NavBar","search","useLocation","query","URLSearchParams","useHistory","map","i","props","key","onClick","push","indexOf","get","GenericCard","mainText","rightComponent","smallComponent","actionButton","iconName","STATUS_COLOR","UNOPENED","UNOPENED_EXPIRED","OPENED","OPENED_EXPIRED","ContainerOverview","containers","now","Date","getDate","icons","expiryDate","dateOpened","expired","Object","keys","opened","SmallInfo","value","withRouter","name","unit","info","totalAmount","fontSize","numberOfContainers","constate","React","useState","withBackButton","navOptions","setNavOptions","HeaderContextProvider","useHeader","Header","navButtons","goBack","HeaderContainer","children","withHeader","WrappedComponent","newNavOptions","useEffect","Input","rawOnChange","onChange","required","validate","label","type","placeholder","isValid","setIsValid","valueToDisplay","toLocaleString","finalClassNameOuter","finalClassName","Error","options","multiple","otherProps","e","target","selected","opt","CenterNotice","subtitle","textAlign","CenterNoticeSwitch","watch","centerNoticeProps","length","defaultEmptyResultConfig","SearchGroup","list","filterFunc","renderItem","minimumSearchLength","inputConfig","emptyResultConfig","searchTerm","setSearchTerm","searchResults","filter","item","QUERY","gql","useQuery","loading","error","data","refetch","window","location","pathname","alert","message","foods","SearchList","food","text","toLowerCase","includes","replace","RawUnit","g","mL","Price","amount","currency","amountInHKD","this","toHKDRate","price","as","DEFAULT_ZERO","Button","disabled","undefined","FormComponent","customInitialValue","initialValue","layoutOrLayoutFunc","layout","submitIconName","submitButtonText","onSubmit","withSubmitButton","disabledFields","setFormValue","state","useSelector","shallowEqual","allFields","reduce","layouts","row","initialValues","assign","form","setForm","isAllFieldsValid","some","allDisabledFieldNames","inputFieldProps","field","v","setField","flex","inputConfigProps","ADD_FOOD_QUERY","GET_FOOD_NAMES_QUERY","formLayout","newName","find","values","useMutation","updateFoodFunc","Form","a","async","variables","toast","success","position","POSITION","TOP_CENTER","autoClose","onClose","AuxInfo","ListInfoItem","description","PercentageBar","percentageLeft","percentageDifference","flexGrow","backgroundColor","height","background","backgroundSize","convertToFloat","Number","parseFloat","toString","roundNumber","roundTo","toFixed","getDifferenceInDaysFromNow","date","Math","ceil","abs","getTime","ContainerCard","container","capacity","datePurchased","containerIcon","toLocaleDateString","daysDiff","expireDateString","FOOD_DETAIL_QUERY","FoodDetailsPage","foodName","auxConfigs","totalWorth","listInfoConfigs","openedContainers","expiredContainers","config","initialDatabase","loadDatabase","db","localStorage","getItem","JSON","parse","setItem","stringify","saveDatabase","newDb","resolvers","Query","_","FoodContainer","Food","sum","totalCapacity","__typename","Mutation","addFood","buyFood","buyOrders","newFoodContainers","forEach","buyOrder","foodId","findIndex","id","md5","consumeFoods","consumeOrders","hasError","order","containerID","con","console","log","containerIndex","ButtonWithDescriptionRow","buttonTitle","settingsConfig","reload","settings","GET_FOOD_LIST","FoodTypePicker","onFoodSelected","filterFood","foodOptions","finalOptions","FOOD_INFO_QUERY","FoodInfoSummaryComponent","EUR","USD","PLN","HKD","computeDisabledFields","containerCount","priceType","FoodQuantityInfoComponent","onPreviousStepRequested","onInfoProvided","offsetTop","Array","fill","StepIndicator","step","totalSteps","StepComponent","status","getStatusFromStep","range","Wizard","open","requestClose","headerTitle","setStep","SelectFoodPopup","onBuyOrdersAdded","selectedFood","setSelectedFood","FoodQuantityInfo","FOOD_QUERY","PendingOrderCard","addAmount","PendingInfoSummary","orders","total","add","numDifferentFoods","from","Set","numContainers","ADD_ORDERS","BuyPage","openSelectPopup","setOpenSelectPopup","pendingBuyOrders","setPendingBuyOrders","hasJustBought","setHasJustBought","buyFoodFunc","j","onOpen","AmountInterpretationType","AmountInput","onAmountChosen","initialFormValue","interpretationType","realValue","percentLeft","CONTAINER_QUERY","ContainerPicker","onSelectContainer","onToPreviousPage","containerInd","setContainerInd","amountUsed","setAmountUsed","selectedContainer","paddingTop","paddingLeft","paddingRight","dots","infinite","afterChange","containerId","onConsumeOrderAdded","reportConsumeOrder","UNIT_QUERY","PendingConsumptionCard","onRemove","RightComponent","originalPercentage","consumedPercentage","AuxComponent","CONSUME_ORDERS","ConsumePage","submitConsumeOrders","pendingConsumeOrders","setPendingConsumeOrders","hasJustConsumed","setHasJustConsumed","initialState","createStore","action","newFood","foodID","quantity","newState","buy","f","updateInfo","latestTimeToConsumeAfterFirstOpen","client","ApolloClient","typeDefs","RouteSwitch","CreateFood","Container","FoodDetails","Buy","Consume","Settings","App","store","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.06395685.chunk.js","sourcesContent":["export const BaseName = \"/Inventory-v2\";\n\nexport const PageNames = {\n    FOOD_LIST: \"food\",\n    FOOD_ADD: \"food_new\",\n    FOOD_DETAILS: \"food_details\",\n    FOOD_EDIT: \"food_edit\",\n    BUY_FOOD: \"buy\",\n    CONTAINERS_LIST: \"containers\",\n    SETTINGS: \"settings\",\n    CONSUME: \"consume\",\n    HOME: \"\"\n};\n\nconst Routes = {\n    FOOD_LIST: \"/app?page=food\",\n    FOOD_ADD: \"/app?page=food_new\",\n    FOOD_DETAILS: \"/app?page=food_details\",\n    FOOD_EDIT: \"/app?page=food_edit\",\n\n    BUY_FOOD: \"/app?page=buy\",\n    CONTAINERS_LIST: \"/app?page=containers\",\n\n    SETTINGS: \"/app?page=settings\",\n\n    CONSUME: \"/app?page=consume\",\n    HOME: \"/app\"\n}\n\nexport default Routes","import { BaseName } from './routes';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory({\n    basename: BaseName, forceRefresh: false\n});\n\nexport default history;","import React from 'react';\nimport { Icon } from '@material-ui/core';\n\nexport type NavIconProps = {\n    title: string,\n    icon: string,\n    path: string,\n    active?: Boolean\n};\n\nconst NavIcon: React.FC<NavIconProps> = ({\n    title, icon, path, active\n}) => {\n    return (\n        <div className=\"NavIcon-Container\">\n            <div className={`NavIcon ${active?\"NavIcon-Active\":\"\"}`}>\n                <Icon style={{color: active?\"primary\":\"text\"}}>{icon}</Icon>\n                {' '}\n                {title}\n            </div>\n        </div>\n    )\n};\n\nexport default NavIcon;","import React from \"react\";\nimport NavIcon, { NavIconProps } from \"./NavIcon\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Routes, {PageNames} from '../../routes';\nimport \"./style.scss\";\n\nconst navItems: Array<NavIconProps & {tag: string[]}> = [\n    {\n        title: \"Assets\",\n        icon: \"work-outline\",\n        path: Routes.CONTAINERS_LIST,\n        tag: [PageNames.CONTAINERS_LIST]\n    },\n    {\n        title: \"Consume\",\n        icon: \"whatshot\",\n        path: Routes.CONSUME,\n        tag: [PageNames.CONSUME]\n    },\n    {\n        title: \"Food\",\n        icon: \"fastfood\",\n        path: Routes.FOOD_LIST,\n        tag: [\n            PageNames.FOOD_LIST, \n            PageNames.FOOD_ADD, \n            PageNames.FOOD_DETAILS\n        ]\n    },\n    {\n        title: \"Buy\",\n        icon: \"shopping-cart\",\n        path: Routes.BUY_FOOD,\n        tag: [PageNames.BUY_FOOD]\n    }, \n    {\n        title: \"Settings\",\n        icon: \"settings\",\n        path: Routes.SETTINGS,\n        tag: [PageNames.SETTINGS]\n    }\n];\n\n\nconst NavBar: React.FC = () => {\n    const { search } = useLocation();\n    const query = new URLSearchParams(search);\n    const history  = useHistory();\n    return (\n        <div className=\"NavBarContainer\">\n            {\n                navItems.map(({tag, ...props}, i) => (\n                    <div key={i} onClick={() => history.push(props.path as string)}>\n                        <NavIcon {...props} active={tag.indexOf(query.get('page') || \"\") > -1} />\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type GenericCardExtraProps = {\n    actionButton?: {\n        iconName: string,\n        onClick: () => void\n    }\n};\n\nexport type GenericCardProps = GenericCardExtraProps & {\n    mainText: string,\n    rightComponent: React.ReactNode,\n    smallComponent?: React.ReactNode,\n    onClick?: () => void\n};\n\nconst GenericCard: React.FC<GenericCardProps> = ({\n    mainText, rightComponent, smallComponent, onClick,\n    actionButton\n}) => {\n    return (\n        <div className=\"GenericCard\" onClick={onClick}>\n            {\n                actionButton && (\n                    <div className=\"GenericCard-ActionButton\">\n                        <div onClick={actionButton.onClick}>\n                            <Icon >{actionButton.iconName}</Icon>\n                        </div>\n                    </div>\n                )\n            }\n            <div className=\"GenericCard-Left\">\n                <div className=\"GenericCard-MainText\">{mainText}</div>\n                <div className=\"GenericCard-containers\">\n                    { smallComponent }\n                </div>\n            </div>\n            \n            <div className=\"GenericCard-Right\">\n                { rightComponent }\n            </div>\n        </div>\n    );\n}\n\nexport default GenericCard;","import React from 'react';\nimport { FoodContainer } from '../../data/typedefs';\nimport { Icon } from '@material-ui/core';\n\nconst STATUS_COLOR = {\n    UNOPENED: {\n        color: 'white',\n        icon: \"kitchen\"\n    },\n    UNOPENED_EXPIRED: {\n        color: 'white',\n        icon: \"delete_forever\"\n    },\n    OPENED: {\n        color: 'orange',\n        icon: \"kitchen\"\n    },\n    OPENED_EXPIRED: {\n        color: 'orange',\n        icon: \"delete_forever\"\n    }\n}\n\ntype StatusTypes = keyof typeof STATUS_COLOR;\n\ntype ContainerOverviewProps = {\n    containers: FoodContainer[]\n};\nconst ContainerOverview: React.FC<ContainerOverviewProps> = ({\n    containers\n}) => {\n    const now = new Date().getDate();\n\n    const icons = containers.map(({\n        expiryDate,\n        dateOpened,\n    }, i) => {\n\n        let status = Object.keys(STATUS_COLOR)[0] as StatusTypes;\n        const expired = !!expiryDate && new Date(expiryDate).getDate() < now;\n        const opened  = !!dateOpened;\n\n        if (expired) {\n            status = opened ? \"OPENED_EXPIRED\" : \"UNOPENED_EXPIRED\";\n        } else {\n            status = opened ? \"OPENED\" : \"UNOPENED\";\n        }\n\n        const { icon, color } = STATUS_COLOR[status];\n        return (\n            <Icon key={i} style={{color}}>{icon}</Icon>\n        );\n    });\n\n    return (\n        <>\n            {icons}\n        </>\n    );\n};\n\nexport default ContainerOverview;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport GenericCard, { GenericCardExtraProps } from '../GenericCard';\nimport ContainerOverview from './ContainerOverview';\nimport { FoodContainer } from '../../data/typedefs';\n\ntype FoodCardProps = GenericCardExtraProps & {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n    onClick?: () => void\n};\n\nconst SmallInfo = ({ \n    icon, value, style \n}: { icon?: string, value: number | string, style?: any}) => (\n    <div className=\"FoodCard-SmallInfo\" style={style}>\n        { icon && <Icon>{icon}</Icon> }\n        { value }\n    </div>\n);\n\nconst FoodCard: React.FC<FoodCardProps & RouteComponentProps<any>> = ({\n    name, unit, info, onClick, containers, ...props\n}) => {\n    const rightComponent = <SmallInfo value={`${info.totalAmount} ${unit}`} style={{fontSize: 18}} />;\n    const smallComponent = !info.numberOfContainers ?\n         \"No containers\" :\n         <ContainerOverview containers={containers} />;\n\n    return (\n        <GenericCard \n            mainText={name} \n            rightComponent={rightComponent} \n            smallComponent={smallComponent} \n            onClick={onClick} \n            {...props}\n        />\n    );\n}\n\nexport default withRouter(FoodCard);","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport { useHistory } from 'react-router';\nimport constate from 'constate';\nimport './style.scss';\n\ntype NavButtonProps = {\n    iconName: string,\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\ntype HeaderProps = {\n    title: string,\n    withBackButton?: boolean,\n    navButtons?: Array<NavButtonProps>\n};\n\nexport type WithHeaderProps = {\n    setNavOptions: (opt: HeaderProps) => void;\n    navOptions: HeaderProps;\n    setHeaderTitle: (newTitle: string) => void;\n}\n\n// custom hooks\nexport function useHeaderHook() {\n    const [ navOptions, setNavOptions] = React.useState({\n        title: \"\",\n        withBackButton: false\n    } as HeaderProps);\n\n    return { navOptions, setNavOptions } ;\n};\n\nexport const [HeaderContextProvider, useHeader] = constate(useHeaderHook);\n\nconst Header: React.FC = () => {\n    const { \n        navOptions: {\n            title, navButtons, withBackButton\n        }\n    } = useHeader();\n\n    const history = useHistory();\n    return (\n        <div className=\"Header\">\n            <div>\n                {\n                    withBackButton && (\n                            <Icon style={{fontSize: 32}} onClick={() => history.goBack()}>navigate_before</Icon>\n                    )\n                }\n                {title}\n            </div>\n            \n            <div className=\"Header-NavButtonGroup\">\n                {\n                    navButtons && navButtons.map(({iconName, onClick}) => (\n                        <div className=\"Header-NavButton\" onClick={onClick}>\n                            <Icon>{iconName}</Icon>\n                        </div>\n                    ))                    \n                }\n            </div>\n        </div>\n    )\n}\n\nexport const HeaderContainer: React.FC = ({ children }) => {\n    return (\n        <HeaderContextProvider>\n            <Header/>\n            {children}\n        </HeaderContextProvider>\n    )\n};\n\nexport const withHeader = (WrappedComponent : React.FC<any>, newNavOptions : HeaderProps) => {\n    const Component: React.FC = props => {\n        const {setNavOptions} = useHeader();\n        React.useEffect(() => {\n            setNavOptions(newNavOptions);\n        }, []);\n\n        return <WrappedComponent {...props} />\n    }\n\n    return Component;\n}\nexport default Header;","import React from 'react';\nimport {Icon} from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type InputTypes = \"text\" | \"textarea\" | \"number\" | \"date\" | \"select\";\nexport type ValueTypes = string | number | Date | null;\n\nexport type InputConfigProps = {\n    name: string;\n    label?: string;\n    type?: InputTypes;\n    iconName?: string;\n    placeholder?: string;\n    required?: boolean;\n    validate?: (value: ValueTypes) => boolean;\n    className?: string;\n}\n\nexport type SelectConfigProps = {\n    options: ValueTypes[];\n    multiple?: boolean;\n}\n\nexport type InputProps = InputConfigProps & {\n    value: ValueTypes,\n    onChange: (value: ValueTypes) => void,\n    disabled?: boolean\n}\n\nconst Input: React.FC<InputProps> = ({\n    onChange: rawOnChange, value,\n    // validation props\n    required = false, validate = () => true,\n    name,\n    label,\n    type = \"text\",\n    placeholder,\n    className,\n    iconName,\n    ...props\n}) => {\n    \n    // TODO: Isolate validation component\n    const [ isValid, setIsValid ] = React.useState(validate(value));\n    // on change armed with validation\n    const onChange = (value: ValueTypes) => {\n        if((required && !value) || !validate(value)) {\n            setIsValid(false);\n        } else { \n            setIsValid(true);\n        }\n        rawOnChange(value);\n    }\n\n    const valueToDisplay: (value: ValueTypes, type: InputTypes) => string | number = value => {\n        if (value instanceof Date) {\n            return value.toLocaleString('en-US');\n        } \n        return value || \"\";\n    }\n\n    const finalClassNameOuter = `Input  ${!isValid ? \"Invalid\" : \"\"}`;\n    const finalClassName = `Input-Inner ${className || \"\"}`;\n    switch(type) {\n        /**\n         * \n         *  The Select Field\n         * \n         */\n        case \"select\":\n            if(!(props as SelectConfigProps)) {\n                throw new Error(\"Input field is `select` but not options provided.\");\n            }\n            const { options, multiple = false, ...otherProps } = props as SelectConfigProps;\n            return (\n                <div>\n                    {label && <p>{label}</p>}\n                    <div className={finalClassNameOuter}>\n                        { iconName && <Icon>{iconName} </Icon>}\n                        <select\n                            multiple={multiple}\n                            name={name}\n                            {...otherProps}\n                            className={finalClassName}\n                            onChange={e => onChange(e.target.value)}\n                            value={valueToDisplay(value, type)}\n                        >\n                            {placeholder && \n                                <option value=\"\" selected={value === \"\"}>{placeholder}</option>\n                            }\n                            {\n                                options.map(opt => (\n                                    <option\n                                        selected={opt === value}>\n                                        {opt}\n                                    </option>\n                                ))\n                            }\n                        </select>\n                        <Icon>expand_more</Icon>\n                    </div>\n                </div>\n            )\n        /**\n         * \n         *  The General Input Field\n         * \n         */\n        default:\n            return (\n                <>\n                    {label && <p>{label}</p>}\n                    <div className={finalClassNameOuter}>\n                        { iconName && <Icon>{iconName} </Icon>}\n                        <input\n                            name={name}\n                            {...props}\n                            className={finalClassName}\n                            placeholder={placeholder}\n                            onChange={e => onChange(e.target.value)}\n                            type={type}\n                            value={valueToDisplay(value, type)}\n                        />\n                        {\n                            type === 'number' && (\n                                <div className=\"Input-NumberPicker\">\n                                    <Icon onClick={() => onChange((value as number || 0) + 1)}>expand_less</Icon>\n                                    <Icon onClick={() => onChange((value as number || 0) - 1)}>expand_more</Icon>\n                                </div>\n                            )\n                        }\n                    </div>\n                </>\n            )\n    }\n}\n\nexport default Input;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport './style.scss';\n\nexport type CenterNoticeProps = {\n    iconName: string,\n    title?: string, \n    subtitle?: string\n};\n\ntype CenterNoticeSwitchProps = CenterNoticeProps & {\n    watch: Array<any> | boolean,\n    children: any\n}\nconst CenterNotice: React.FC<CenterNoticeProps> = ({\n    iconName, title, subtitle\n}) => {\n    return (\n        <div className=\"CenterNotice\">\n            <Icon style={{fontSize: 72}}>{iconName}</Icon>\n            <div style={{textAlign: 'center'}}>\n                {\n                    title && <h3>{title}</h3>\n                }\n                {\n                    subtitle && <h6>{subtitle}</h6>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport const CenterNoticeSwitch: React.FC<CenterNoticeSwitchProps> = ({\n    watch, children, ...centerNoticeProps\n}) => {\n    if((watch as Array<any>).length === 0 || !(watch as boolean)) {\n        return (<CenterNotice {...centerNoticeProps} />);\n    } else {\n        return children;\n    }\n}\n\nexport default CenterNotice;","import React from 'react';\nimport Input, {InputConfigProps} from '../Input';\nimport { \n    CenterNoticeProps, \n    CenterNoticeSwitch \n} from '../CenterNotice';\nimport \"./style.scss\";\n\ntype SearchGroupProps<T> = {\n        list: Array<T>,\n        filterFunc: (item: T, searchTerm: string) => boolean\n        \n        minimumSearchLength?: number,\n        renderItem: (item: T) => React.ReactNode,\n        inputConfig: InputConfigProps,\n        emptyResultConfig?: CenterNoticeProps,\n}\n\nconst defaultEmptyResultConfig: CenterNoticeProps = {\n    iconName: \"search\",\n    title: \"No results found\"\n}\n\nconst SearchGroup: React.FC<SearchGroupProps<any>> = ({\n    list, filterFunc, renderItem,\n    minimumSearchLength = 1,\n    inputConfig,\n    emptyResultConfig = defaultEmptyResultConfig\n}) => {\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n    const searchResults = (searchTerm.length >= minimumSearchLength)?\n        list.filter(item => filterFunc(item, searchTerm)):list;\n\n    return (\n        <div className=\"SearchGroup\">\n            <div className=\"SearchGroup-Input\">\n                <Input\n                    \n                    {...inputConfig} \n                    value={searchTerm} \n                    onChange={e => setSearchTerm(e as string)}\n                />\n            </div>\n            <div className=\"SearchGroup-List\">\n                <CenterNoticeSwitch \n                    watch={searchResults} \n                    {...emptyResultConfig}\n                >\n                    { \n                           searchResults.map(item => renderItem(item))\n                    }\n                </CenterNoticeSwitch>\n            </div>\n        </div>\n    )\n    return null;\n}\n\nexport default SearchGroup;","import React from 'react';\nimport FoodCard from '../../components/FoodCard';\nimport { withHeader } from '../Header';\nimport { useLocation } from 'react-router-dom';\nimport history from '../../history';\nimport { Food } from '../../data/typedefs';\nimport SearchList from '../../components/SearchList';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport Routes from '../../routes';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from '@apollo/client';\n\ntype FoodPageProps = {\n    foods: Array<Food>\n}\n\nconst QUERY = gql`\n    {\n        foods @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                numberOfContainers\n                totalAmount\n            }\n        }\n    }\n`;\n\n\nconst FoodPage: React.FC<FoodPageProps> = () => {\n    const { loading, error, data, refetch } = useQuery(QUERY);\n    // the current query, mostly is ?page=...\n    const currentQuery = useLocation().search;\n\n    React.useEffect(() => {\n        refetch()\n    }, [window.location.pathname]);\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n    if(loading) {\n        return <div> loading...</div>\n    }\n\n    \n    const foods = data.foods as Food[];\n\n\n    return (\n        <CenterNoticeSwitch watch={foods}\n            iconName=\"fastfood\"\n            title=\"No food is added\"\n            subtitle=\"click the '+' button to add a new type of food\"\n        >\n            <SearchList\n                list={foods}\n                filterFunc={\n                    (food, text) => (food as Food).name.toLowerCase().includes(text.toLowerCase())\n                }\n                inputConfig={{\n                    name: \"FoodSearchInput\",\n                    iconName: \"search\",\n                    placeholder: \"Search for food...\"\n                }}\n                minimumSearchLength={2}\n                renderItem={food => (\n                    <FoodCard {...food} \n                        onClick={() => history.replace(\n                            Routes.FOOD_DETAILS + `&food=${food.name}`\n                        )}\n                    />\n                )}\n            >\n\n            </SearchList>\n        </CenterNoticeSwitch>\n    );\n}\n\n\nexport default withHeader(FoodPage, {\n    title: \"Food\",\n    navButtons: [\n        {iconName: \"add\", onClick: () => history.push(Routes.FOOD_ADD)}\n    ]\n});\n\n","export const RawUnit = {\n    unit: \"unit\",\n    g: \"g\",\n    mL: \"mL\"\n}\n\nexport const RawCurrency = {\n    EUR: \"EUR\",\n    USD: \"USD\",\n    PLN: \"PLN\",\n    HKD: \"HKD\",\n}\n\nexport type Currency = keyof typeof RawCurrency;\nexport type Unit     = keyof typeof RawUnit;\n\n\nexport class Price {\n    static toHKDRate = (currency: Currency) => {\n        switch(currency) {\n            case \"EUR\": return 8.6;\n            case \"USD\": return 7.6;\n            case \"PLN\": return 2;\n            case \"HKD\": return 1;\n        }\n    };\n\n    static DEFAULT_ZERO = new Price(0, \"HKD\");\n\n    constructor(\n        readonly amount: number,\n        readonly currency: Currency\n    ) {}\n\n    public as(currency: Currency): Price {\n        const amountInHKD = this.amount * Price.toHKDRate(this.currency);\n        return new Price(amountInHKD / Price.toHKDRate(currency), currency);\n    }\n\n    public add(price: Price): Price {\n        const otherPriceInThisCurrency = price.as(this.currency);\n        return new Price(otherPriceInThisCurrency.amount + this.amount, this.currency);\n    }\n}\n\nexport interface FoodContainer {\n    id: string,\n    capacity: number,\n    amount: number,\n    datePurchased: Date\n    expiryDate?: Date,\n    dateOpened?: Date,\n    price: Price,\n\n}\n\nexport interface FoodInfo {\n    totalAmount: number,\n    percentageLeft: number\n}\n\nexport interface Food {\n    unit: Unit,\n    name: string,\n    containers: FoodContainer[],\n}\n\nexport interface BuyOrder {\n    foodName: string,\n    price: Price,\n    expiryDate?: Date,\n    amount: number\n};\n\nexport interface ConsumeOrder {\n    containerID: string,\n    amount: number\n}\n\nexport const typeDefs = `\n    enum Currency {\n        HKD\n        USD\n        EUR\n        PLN\n    }\n\n    enum Unit {\n        mL\n        g\n        unit\n    }\n\n\n    type Price {\n        currency: Currency!\n        amount: Number!\n    }\n\n    type FoodContainerInfo {\n        expired: Boolean!\n    }\n\n    type FoodContainer {\n        id: ID!\n        capacity: Number!\n        amount: Number!\n        datePurchased: Date!\n        expiryDate: Date\n        dateOpened: Date\n        price: Price!\n\n        opened: Boolean!\n        expired: Boolean!\n        percentageLeft: Number!\n    }\n\n    type FoodInfo {\n        numberOfContainers: Number!\n        expiredContainers: Number!\n        openedContainers: Number!\n        \n        totalAmount: Number!\n        totalWorth: Number!\n\n        percentageLeft: Number!\n    }\n\n    type Food {\n        name: String!\n        unit: Unit!,\n        containers: [FoodContainer!]!\n        info: FoodInfo\n    }\n    \n    type BuyOrder {\n        foodName: String!\n        price: Price!\n        expiryDate: Date\n        amount: Number!\n    }\n\n    type ConsumeOrder {\n        containerID: ID!\n        amount: Number!\n    }\n\n    type Query {\n        food(name: String!): Food\n        foods: [Food]!\n    }\n\n    type Mutation {\n        addFood(name: String!, unit: Unit!): Food\n        buyFood(buyOrders: [BuyOrder]!): [FoodContainer]\n        consumeFoods(consumeOrders: [ConsumeOrder]!): [ID!]\n    }\n`;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\ntype ButtonProps = {\n    title: string,\n    icon?: string,\n    color?: string,\n    onClick?: () => void,\n    disabled?: boolean,\n\n    className?: string\n};\n\nconst Button: React.FC<ButtonProps> = ({\n    title, icon, \n    color = \"primary\",\n    onClick,\n    disabled = false,\n    className\n}) => {\n    return (\n        <div\n            className={`${className} Button Button-${color} ${disabled? \"Button-Disabled\":\"\"}`} \n            onClick={!disabled ? onClick: undefined}>\n            {\n                icon && (\n                    <Icon>{icon}</Icon>\n                )\n            }\n            {title}\n        </div>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useHistory , useLocation } from 'react-router';\nimport { History, Location } from 'history';\nimport {Icon} from '@material-ui/core';\nimport { State } from '../../reducers';\nimport Button from '../Button';\nimport Input, { InputConfigProps, SelectConfigProps, ValueTypes, InputTypes } from '../Input';\nimport './style.scss';\n\n// The representation of the form value as JSON\nexport type FormValueType = {[key: string]: ValueTypes};\n\n// the config object shape\ntype BasicLayoutConfig = InputConfigProps & {\n    label?: string,\n    flex?: number,\n    inputStyle?: \"default\" | \"outlined\"\n};\n\n\n// the combined type\ntype SelectInputConfig = BasicLayoutConfig & SelectConfigProps;\ntype FormLayoutConfig = BasicLayoutConfig | SelectInputConfig;\n\n// the entire layout. The first array stores rows. Each row stores columns.\nexport type FormLayout = FormLayoutConfig[][] \n    | ((\n        store:          State, \n        history:        History<any>, \n        location:       Location<any>,\n        initialValues?: FormValueType) => FormLayoutConfig[][]);\n\n//  Type of the props passed to the <Form> Component\ntype FormProps = {\n    // connect\n    initialValue?: FormValueType,\n    layout: FormLayout,\n    submitIconName?: string,\n    submitButtonText?: string,\n    onSubmit?: (form: FormValueType) => void,\n    withSubmitButton?: boolean,\n    disabledFields?: (form: FormValueType) => string[],\n    setFormValue?: (form: FormValueType) => void\n}\n\nconst FormComponent: React.FC<FormProps> = ({\n    initialValue: customInitialValue,\n    layout : layoutOrLayoutFunc, \n    submitIconName, submitButtonText,\n    onSubmit,\n    withSubmitButton = true,\n    disabledFields,\n    setFormValue\n}) => {\n\n    // see if the incoming layout is a function\n    // if it is then pass it to the store ( for validation). Otherwise use it as-is\n    const state  = useSelector(state => state, shallowEqual) as State;\n    const history = useHistory();\n    const location = useLocation();\n    \n    const layout = (typeof layoutOrLayoutFunc === 'function') \n        ? layoutOrLayoutFunc(state, history, location, customInitialValue) \n        : layoutOrLayoutFunc;\n    \n    // flatten all fields for easier manipulations\n    const allFields = [...layout.reduce((layouts, row) => [...layouts, ...row], [])];\n    // the initial values of the form\n    // if the type is number, then the value would be 0. otherwise empty string\n    const initialValues = customInitialValue || Object.assign({}, \n        ...allFields.map(({name, type, required}) => {\n            if (!required) return null;\n            switch(type) {\n                case \"number\":\n                    return { [name]: 0 }\n                case \"date\":\n                    return { [name]: new Date() }\n                default:\n                    return { [name]: \"\" }\n            }\n        })\n    );\n    \n    // the form state \n    const [form, setForm] = React.useState(initialValues);\n    \n    React.useEffect(() => {\n        setFormValue && setFormValue(form);\n    }, [form, setFormValue]);\n\n\n    const isAllFieldsValid = !allFields.some(({name, required, validate}) => (\n        (required && !form[name]) || (validate && !validate(form[name]))\n    ));\n\n    // functions for manipulating form states\n    const setField = (field: string, value: ValueTypes) => {\n        setForm({...form, [field]: value});\n    };\n    \n    const allDisabledFieldNames = disabledFields ? disabledFields(form) : [];\n    const inputFieldProps = (field: string) => ({\n        value: form[field],\n        onChange: (v: ValueTypes) => setField(field, v),\n        disabled: allDisabledFieldNames.includes(field)\n    });\n\n    return (\n        <div className=\"Form\">\n            {\n                // create all the rows\n                layout.map(row => (\n                    <div className=\"Form-Row\">\n                        {\n                            // create all the columns\n                            row.map(({\n                                // here is each of the form config\n                                name, \n                                flex = 1, \n                                ...inputConfigProps\n                            }) => (\n                                <div className=\"Form-Col\" style={{flex}}>\n                                    <Input\n                                        name={name} \n                                        {...inputConfigProps} \n                                        {...inputFieldProps(name)}\n                                    />\n                                </div>\n                            ))\n                        }\n                    </div>\n                ))\n            }\n            <div style={{flex: 1}} />\n            {\n                withSubmitButton && (\n                    <Button color=\"info\"\n                        title={submitButtonText || \"Submit\"}\n                        icon={submitIconName}\n                        onClick={onSubmit && (() => onSubmit(form))}\n                        disabled={!isAllFieldsValid}\n                        className=\"Form-Submit\"\n                    />\n                )\n            }\n        </div>\n    )\n\n};\n\nexport default FormComponent;","import React from 'react';\nimport { History, Location } from 'history';\nimport { RawUnit } from '../../data/typedefs';\nimport { toast } from 'react-toastify';\nimport Routes from '../../routes';\nimport { withHeader } from '../Header';\nimport Form, { FormLayout, FormValueType } from '../../components/Form';\nimport { State } from '../../reducers';\nimport { gql } from '@apollo/client';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router';\n\nconst ADD_FOOD_QUERY = gql`\n    mutation addFood($name: String!, $unit: Unit!) {\n        addFood(name: $name, unit: $unit) @client {\n            id\n            name\n        }\n    }\n`;\n\nconst GET_FOOD_NAMES_QUERY = gql`\n    query {\n        foods @client {\n            name\n        }\n    }\n`;\n\nexport const formLayout: FormLayout = (\n    { foods }:  State, \n    history:    History<any>, \n    location:   Location<any>,\n    initialValue?: FormValueType) => [\n\n    [{  label: 'Food Name',\n        name: \"name\", placeholder: \"Name\", iconName: \"edit\", required: true,\n        // check if a food with same name exists\n        validate: newName => !foods.find(\n            ({name}) => {\n                return true;\n            }\n        )\n    }],\n    [{\n        label: \"Unit\",\n        name: \"unit\", placeholder: \"Unit\", required: true,\n        flex: 4, type: \"select\",\n        options: Object.values(RawUnit)\n    }]\n];\n\nconst CreateFoodPage: React.FC = () => {\n    const history = useHistory();\n    const { loading: loadingFoodList, error, data } = useQuery(GET_FOOD_NAMES_QUERY);\n    \n    const  [updateFoodFunc] = useMutation(ADD_FOOD_QUERY);\n\n\n    const onAddFood = async (form: FormValueType) => {\n        await updateFoodFunc({\n            variables: {\n                name: form.name,\n                unit: form.unit\n            }\n        })\n        \n        toast.success(\"Food Added.\", {\n            position: toast.POSITION.TOP_CENTER,\n            autoClose: 1000,\n            onClose: () => history.goBack()\n        });\n    }\n\n    return (\n        <Form\n            submitButtonText=\"Add Food\"\n            submitIconName=\"add\"\n            onSubmit={onAddFood}\n            layout={formLayout} \n        />\n    )\n};\n\nexport default withHeader(CreateFoodPage, {\n    title: \"Add Food\",\n    withBackButton: true\n});","import React from 'react';\nimport { ValueTypes } from '../../components/Input';\nimport { Icon } from '@material-ui/core';\n\nexport type AuxInfoProps = {\n    title: string,\n    iconName?: string,\n    value: ValueTypes\n}\nconst AuxInfo: React.FC<AuxInfoProps> = ({title, iconName, value}) => {\n    return (\n        <div className=\"AuxInfo\">\n            {value}\n            <div className=\"AuxInfo-Title\">\n                {title}\n            </div>\n        </div>\n    )\n}\n\nexport default AuxInfo;","import React from 'react';\nimport { Icon } from '@material-ui/core';\n\nexport type ListInfoItemProps = {\n    iconName: string,\n    description: string,\n    value: string,\n    color: string,\n};\nconst ListInfoItem: React.FC<ListInfoItemProps> = ({\n    iconName, description, value, color\n}) => (\n    <div className=\"ListInfoItem-Container\">\n        <div className=\"ListInfoItem-Left\">\n            <Icon style={{color, fontSize: 32}}>{iconName} </Icon>\n        </div>\n        <div className=\"ListInfoItem-Right\" style={{color}}>\n            <div style={{color, fontSize: 18}}>{value}</div>\n            <div style={{color}}>{description}</div>\n        </div>\n    </div>\n);\n\nexport default ListInfoItem;\n","import React from 'react';\nimport \"./style.scss\";\n\n\nconst backgroundColor = 'rgba(255, 255, 255, 0.3)';\ntype PercentageBarProps = {\n    percentageLeft: number,\n    percentageDifference?: number,\n    color: string\n};\nconst PercentageBar: React.FC<PercentageBarProps> = ({\n    color, percentageLeft, percentageDifference = 0\n}) => (\n    <div className=\"PercentageBar\">\n        <div style={{ flexGrow: percentageLeft - percentageDifference, backgroundColor: color, height: 8 }}>\n\n        </div>\n        {\n            percentageDifference ? (\n                <div style={{\n                    flexGrow: percentageDifference, \n                    height: 8, \n                    background: `repeating-linear-gradient(\n                        -50deg,\n                        transparent,\n                        transparent 25%,\n                        ${color} 25%,\n                        ${color} 50%,\n                        transparent 50%\n                    ) top left fixed`,\n                    backgroundSize: '30px 30px'\n                }}/>\n            ) : null\n        }\n        <div style={{ flex: 100 - percentageLeft, backgroundColor }}>\n\n        </div>\n    </div>\n);\n\nexport default PercentageBar;","export const dayToMs = (day: number | null) => {\n    return day? day * 24 * 3600 * 1000 : null;\n}\n\nexport const msToDay = (ms: number | null) => {\n    return ms? ms / 24 / 3600 / 1000 : null;\n}\n\nexport const convertToFloat = (value: string | number) => {\n    return Number.parseFloat(value.toString());\n}\n\nexport const roundNumber = (value: number, roundTo = 2) => parseFloat(value.toFixed(roundTo)) || 0;\n\nexport const getDifferenceInDaysFromNow = (date: Date) => {\n    return Math.ceil(Math.abs(\n            (new Date().getTime() - new Date(date).getTime()) / (1000 * 3600 * 24)\n        ));\n}","import React from 'react';\nimport { Price } from '../../data/typedefs';\nimport { Icon } from '@material-ui/core';\nimport PercentageBar from '../../components/PercentageBar';\nimport { getDifferenceInDaysFromNow } from '../../utils';\nimport \"./style.scss\";\n\ntype ContainerCardProps = {\n    container: {\n        capacity: number;\n        amount: number;\n        datePurchased: Date;\n        expiryDate?: Date;\n        dateOpened?: Date;\n        price: Price;\n\n        opened: boolean;\n        expired: boolean;\n        percentageLeft: number;\n    },\n    unit: string,\n    onClick?: () => void;\n};\nconst ContainerCard : React.FC<ContainerCardProps> = ({\n    container: {\n        capacity, amount, datePurchased, expiryDate,\n        dateOpened, price, opened, expired, percentageLeft\n    },\n    unit, onClick\n}) => {\n    \n    const color = expired ? \"red\" : (opened ? \"orange\" : \"white\");\n    const containerIcon = expired ? \"delete_forever\" : \"kitchen\";\n\n    const expireDateString = () => {\n        if(!expiryDate) return \"\";\n        const daysDiff = getDifferenceInDaysFromNow(expiryDate);\n        if (expired) return `| Expired ${daysDiff} day(s) ago`;\n        else return `| Expire in ${daysDiff} days`;\n    };\n\n    return (\n        <div onClick={onClick} className={`ContainerCard-Container ContainerCard-Container-${color}`}>\n            <div className=\"ContainerCard-ContainerLeft\">\n                {getDifferenceInDaysFromNow(datePurchased)} days old\n                <Icon style={{color, fontSize: 32}}>{containerIcon}</Icon>\n                {price.amount} {price.currency}\n            </div>\n            <div className=\"ContainerCard-ContainerRight\">\n                <div className=\"ContainerCard-ContainerRightUp\">\n                    {percentageLeft.toFixed(2)}%\n                    <PercentageBar color={color} percentageLeft={percentageLeft} />\n                </div>\n                <div className=\"ContainerCard-ContainerRightBottom\">\n                    {\n                        dateOpened ? (\n                            <>\n                                <Icon>broken_image</Icon> \n                                <h6>{new Date(dateOpened).toLocaleDateString()}</h6>\n                            </>\n                        ) : (\n                            <>\n                                <Icon>check</Icon> \n                                <h6>Unopened</h6>\n                            </>\n                        )\n                    }\n                    <h6 style={{color}}>\n                        { expireDateString() }\n                    </h6>\n                    { /* Small buffer here */}\n                    <div className=\"ContainerCard-Amount\">\n                        {amount} {unit}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ContainerCard;","import React from 'react';\nimport AuxInfo, { AuxInfoProps } from './auxInfo';\nimport ListInfoItem, { ListInfoItemProps} from './listInfoItem';\nimport { Price } from '../../data/types';\nimport { useHeader } from '../Header';\nimport Routes from '../../routes';\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport ContainerCard from '../../components/ContainerCard';\n\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport { roundNumber } from '../../utils';\n\nimport \"./style.scss\";\n\nconst FOOD_DETAIL_QUERY = gql`\n    query foodDetails($food: String!) {\n        food(name: $food) @client {\n            name\n            unit\n            containers {\n                capacity\n                amount\n                datePurchased\n                expiryDate\n                dateOpened\n                price\n\n                expired\n                opened\n                percentageLeft\n            }\n            info {\n                numberOfContainers\n                expiredContainers\n                openedContainers\n                totalAmount\n                totalWorth\n                percentageLeft\n            }\n        }\n    }\n`;\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: [{\n        capacity: number,\n        amount: number,\n        datePurchased: Date,\n        expiryDate?: Date,\n        dateOpened?: Date,\n        price: Price,\n\n        expired: boolean,\n        opened: boolean,\n        percentageLeft: number\n    }],\n    info: {\n        numberOfContainers: number,\n        expiredContainers: number,\n        openedContainers: number,\n        totalAmount: number,\n        totalWorth: number,\n        percentageLeft: number\n    }\n}\nconst FoodDetailsPage: React.FC = () => {\n    const history  = useHistory();\n    const location = useLocation();\n    const { navOptions, setNavOptions } = useHeader();\n\n    const foodName = new URLSearchParams(location.search).get('food');\n    const { loading, error, data } = useQuery(FOOD_DETAIL_QUERY, {\n        variables: {\n            food: foodName\n        }\n    });\n\n    if(!foodName) history.goBack();\n\n    React.useEffect(() => {\n        setNavOptions({\n            ...navOptions,\n            title: foodName as string,\n            withBackButton: true,\n            navButtons: [{ \n                iconName: \"edit\", \n                onClick: () => history.push({\n                    pathname: Routes.FOOD_EDIT,\n                    search: `?food=${foodName}`\n                })\n            }]\n        });\n    }, []);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const food = data.food as QueryResultType;\n    // things to render under the main trendbar\n    const auxConfigs: AuxInfoProps[] = [\n        {\n            title: 'Total Amount',\n            iconName: 'kitchen',\n            value: `${roundNumber(food.info.totalAmount)} ${food.unit}`\n        },\n        {\n            title: 'Worth',\n            iconName: 'money',\n            value: `${roundNumber(food.info.totalWorth)} €`\n        },\n        {\n            title: \"Percentage Left\",\n            iconName: \"percentage\",\n            value: `${roundNumber(food.info.percentageLeft)} %`\n        }\n    ];\n\n    const listInfoConfigs: ListInfoItemProps[] = [\n        {\n            color: 'white',\n            iconName: \"kitchen\",\n            description: \"Unopened Containers\",\n            value: (food.info.numberOfContainers - food.info.openedContainers).toString()\n        },\n        {\n            color: 'orange',\n            iconName:\"kitchen\",\n            description: \"Opened Containers\",\n            value: (food.info.openedContainers).toString()\n        },\n        {\n            color: 'red',\n            iconName:\"delete_forever\",\n            description: \"Expired Containers\",\n            value: (food.info.expiredContainers).toString()\n        }\n    ];\n\n    return (\n        <div className=\"FoodDetails-Container\">\n            {/*\n                Top section\n            */}\n             <div className=\"FoodDetails-TopSection\">\n                 <h6>Summary</h6>\n                 <div className=\"FoodDetails-TopSection-AuxInfoRow\">\n                     {\n                         auxConfigs.map(config => (\n                             <AuxInfo key={config.title} {...config} />\n                         ))\n                     }\n                 </div>\n                 {\n                     food.info.numberOfContainers > 0 && (\n                        <div className=\"FoodDetails-TopSection-LIstInfoRow\">\n                            {\n                                listInfoConfigs.map((config, i) => (\n                                    <ListInfoItem {...config} key={i} />\n                                ))\n                            }\n                        </div>\n                     )\n                 }\n             </div>\n\n             <div className=\"FoodDetails-BottomSection\">\n                <CenterNoticeSwitch \n                    watch={food.containers}\n                    iconName=\"kitchen\"\n                    title=\"No Containers\"\n                    subtitle=\"Use the buy food function to add containers of this food\"\n                >\n                    <>\n                        <h6>{food.info.numberOfContainers} Container(s) </h6>\n                        {\n                            food.containers.map(\n                                (container) => <ContainerCard container={container} unit={food.unit} />\n                            )\n                        }\n                    </>\n                </CenterNoticeSwitch>\n             </div>\n        </div>\n    )\n}\n\nexport default FoodDetailsPage;","import React from 'react';\nimport CenterNotice from '../../components/CenterNotice';\nimport { withHeader } from '../Header';\n\nconst ContainerPage: React.FC = () => {\n    return <CenterNotice iconName=\"work-outline\" title=\"Coming Soon!\" />\n};\n\nexport default withHeader(ContainerPage,{\n    title: \"Containers\",\n    navButtons: [\n        {\n            iconName: \"add\",\n            onClick: () => {}\n        }\n    ]\n});","import { \n    Food, FoodContainer, \n    Unit, Price,\n    BuyOrder,\n    ConsumeOrder \n} from './typedefs';\nimport md5 from 'blueimp-md5';\nimport { convertToFloat } from '../utils';\n\nexport const localStorageKey = 'db';\n\ninterface DataBaseType {\n    foods: Array<Food & {[key: string]: any}>\n};\n\nexport const initialDatabase : DataBaseType = {\n    foods: []\n};\n\nconst loadDatabase = () => {\n    const db = localStorage.getItem(localStorageKey);\n    if (!db) {\n        localStorage.setItem(localStorageKey, \n            JSON.stringify(initialDatabase));\n        return initialDatabase;\n    } else {\n        return JSON.parse(db) as DataBaseType;\n    }\n};\n\nconst saveDatabase = (newDb: DataBaseType) => {\n    return localStorage.setItem(localStorageKey, JSON.stringify(newDb));\n};\n\nconst resolvers = {\n    Query: {\n        food: (_: any, { name }: { name: string }) => {\n            const db = loadDatabase();\n            const food = db.foods.find(food => food.name === name);\n            return food;\n        },\n        foods: () => {\n            const db = loadDatabase();\n            return db.foods;\n        },\n    },\n    FoodContainer: {\n        datePurchased: (container: FoodContainer) => {\n            return new Date(container.datePurchased);\n        },\n        opened: (container: FoodContainer) => {\n           return !!container.dateOpened;\n        },\n        expired: (container: FoodContainer) => {\n            return (!!container.expiryDate) && \n                (new Date(container.expiryDate).getDate() < new Date().getDate());\n        },\n        percentageLeft: (container: FoodContainer) => {\n            return container.amount / container.capacity * 100;\n        }\n    },\n    Food: {\n        info: (food: Food) => {\n            const totalAmount = food.containers.reduce(\n                (sum, container) => sum + container.amount, 0\n            );\n            const totalCapacity = food.containers.reduce(\n                (sum, container) => sum + container.capacity, 0\n            );\n            \n            const expiredContainers = food.containers.filter(\n                container => container.expiryDate && new Date(container.expiryDate).getDate() < (new Date()).getDate()\n            ).length;\n\n            const openedContainers = food.containers.filter(\n                container => !!container.dateOpened\n            ).length;\n\n            const totalWorth = food.containers.reduce(\n                (sum, { price }) => sum + new Price(price.amount, price.currency).as(\"EUR\").amount, \n                0);\n            const numberOfContainers = food.containers.length;\n\n            const percentageLeft = (totalCapacity === 0) ? \n                0 : \n                totalAmount / totalCapacity * 100;\n            \n            return {\n                __typename: \"FoodInfo\",\n                numberOfContainers,\n                expiredContainers,\n                openedContainers,\n                totalAmount,\n                totalWorth,\n                percentageLeft,\n            };\n        }\n    },\n    Mutation: {\n        addFood: (_: any, { name, unit } : { name: string, unit: Unit}) => {\n            const db = loadDatabase();\n            db.foods.push({\n                __typename: \"Food\",\n                name, unit,\n                containers: [],\n            });\n\n            saveDatabase(db);\n        },\n\n        buyFood: (_: any, { buyOrders } : {buyOrders: BuyOrder[]}) => {\n            const db = loadDatabase();\n            const newFoodContainers : FoodContainer[] = [];\n            buyOrders.forEach(buyOrder => {\n                const { foodName: name, price, expiryDate, amount } = buyOrder;\n                \n                // locate the food this order is referring to\n                const foodId = db.foods.findIndex(food => food.name === name);\n                \n                // add food to the db if it is found\n                if (foodId > -1) {\n                    //@ts-ignore\n                    const container = {\n                        __typename: \"FoodContainer\",\n                        id: md5((new Date()).toString() + name + amount),\n                        capacity: convertToFloat(amount),\n                        amount: convertToFloat(amount),\n                        datePurchased: new Date(),\n                        expiryDate: expiryDate ? new Date(expiryDate) : null, \n                        dateOpened: null,\n                        price\n                    } as FoodContainer;\n\n                    db.foods[foodId].containers.push(container);\n                    newFoodContainers.push(container);\n                }\n            });\n\n            saveDatabase(db);\n            return newFoodContainers;\n        },\n        consumeFoods: (_: any, { consumeOrders }: {consumeOrders: ConsumeOrder[]}) => {\n            const db = loadDatabase();\n            let hasError = false;\n            consumeOrders.forEach(order => {\n                const { containerID, amount } = order;\n                const foodId = db.foods.findIndex(\n                    food => food.containers.find(con => con.id === containerID)\n                );\n\n                if (foodId < 0) {\n                    console.log(\"food id < 0\");\n                    hasError = true;\n                    return;\n                };\n                const containerIndex = db.foods[foodId]\n                    .containers\n                    .findIndex(con => con.id === containerID);\n                \n                // check if container is okay to deduct\n                const container = db.foods[foodId].containers[containerIndex] as FoodContainer;\n                if (container.amount < amount) {\n                    console.log('amount isnt right');\n                    hasError = true;\n                    return;\n                }\n\n                // apply the deduction\n                db.foods[foodId].containers[containerIndex].amount -= amount;\n                if (!db.foods[foodId].containers[containerIndex].dateOpened) {\n                    db.foods[foodId].containers[containerIndex].dateOpened = new Date();\n                }\n\n                // check if the container needs to be disposed\n                // you dispose a container if it is empty, or it has really really few food left.\n                const {amount: remainingAmount, capacity} = db.foods[foodId].containers[containerIndex];\n                if (remainingAmount / capacity < 0.01) {\n                    db.foods[foodId].containers = db.foods[foodId].containers.filter((_, i) => i !== containerIndex);\n                }\n            });\n\n            if (!hasError) {\n                saveDatabase(db);\n            }\n            return hasError ? \n                consumeOrders.map(({containerID}) => containerID) \n                : null;\n        }\n    }\n}\nexport default resolvers;\n","import React from 'react';\nimport { withHeader } from '../Header';\nimport \"./style.scss\";\nimport { toast } from 'react-toastify';\nimport { localStorageKey, initialDatabase } from '../../data/resolvers';\n\ntype ButtonWithDescriptionRowProps = {\n    title: string,\n    description: string,\n    buttonTitle: string,\n    onClick?: () => void\n}\nconst ButtonWithDescriptionRow: React.FC<ButtonWithDescriptionRowProps> = ({\n    title, description, buttonTitle, onClick \n}) => {\n    return (\n        <div className=\"Settings-DescriptionRow\">\n            <div className=\"Settings-DescriptionRowLeft\">\n                <div className=\"Settings-DescriptionRowTitle\">\n                    {title}\n                </div>\n                <div className=\"Settings-DescriptionRowDescription\">\n                    {description}\n                </div>\n            </div>\n            <div className=\"Settings-DescriptionRowRight\">\n                <div className=\"Settings-DescriptionRowButton\" onClick={onClick}>\n                    { buttonTitle }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst settingsConfig: ButtonWithDescriptionRowProps[] = [\n    {\n        title: \"Reset Database\",\n        description: \"Remove all data you have saved in the local storage. This can not be undone.\",\n        buttonTitle: \"Remove\",\n        onClick: () => {\n            window.localStorage.setItem(localStorageKey, JSON.stringify(initialDatabase));\n            toast.info(\"Database has been reset.\", {\n                autoClose: 3000,\n                onClose: () => window.location.reload()\n            });\n        }\n    },\n    {\n        title: \"Validate Database\",\n        description: \"Validate the values in the current database and try to correct it.\",\n        buttonTitle: \"Validate\"\n    },\n];\n\nconst SettingsPage: React.FC = () => {\n    return (\n        <div className=\"Settings-Container\">\n            {\n                settingsConfig.map((settings, i) => (\n                    <ButtonWithDescriptionRow \n                        key={i}\n                        {...settings}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default withHeader(SettingsPage, {\n    title: \"Settings\"\n});","import React from 'react';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport CenterNotice, { CenterNoticeSwitch} from '../CenterNotice';\nimport FoodCard from '../FoodCard';\nimport { FoodContainer } from '../../data/typedefs';\nimport \"./style.scss\";\n\nconst GET_FOOD_LIST = gql`\n    query {\n        foods @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                totalAmount\n                numberOfContainers   \n            }\n        }\n    }\n`;\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    }\n};\n\ntype FoodTypePickerProps = {\n    onFoodSelected: (food: string) => void\n    filterFood?: (food: QueryResultType) => boolean\n};\nconst FoodTypePicker: React.FC<FoodTypePickerProps> = ({\n    onFoodSelected, filterFood\n}) => {\n\n    const { loading, error, data, refetch } = useQuery(GET_FOOD_LIST);\n    \n    React.useEffect(() => {\n        refetch();\n    }, [onFoodSelected, refetch]);\n    \n    if (loading) {\n        return (\n            <CenterNotice iconName=\"hamburger\" title=\"Loading Food List...\" />\n        )\n    } else if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const foodOptions = data.foods as QueryResultType[];\n    const finalOptions = filterFood ? \n        foodOptions.filter(filterFood) \n        : foodOptions;\n    \n    return (\n        <div className=\"FoodTypePicker-Container\">\n            <CenterNoticeSwitch \n                watch={finalOptions} \n                iconName=\"hamburger\" title=\"No food available\"\n                subtitle=\"Add some food or buy some containers for them and try again.\"\n            >\n                {\n                    finalOptions.map(food => (\n                        <FoodCard {...food} onClick={() => onFoodSelected(food.name)} />\n                    ))\n                }\n            </CenterNoticeSwitch>\n        </div>\n    )\n};\n\nexport default FoodTypePicker;","import React from 'react';\nimport Form, { FormLayout, FormValueType } from '../../components/Form';\n\nimport Button from '../../components/Button';\nimport { BuyOrder, RawCurrency, FoodContainer } from '../../data/typedefs';\nimport FoodCard from '../../components/FoodCard';\nimport { gql } from \"@apollo/client\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Currency } from '../../data/types';\nimport StickyBox from 'react-sticky-box';\n\nconst FOOD_INFO_QUERY = gql`\n    query FoodInfo($name: String!) {\n        food(name: $name) @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                totalAmount\n                numberOfContainers\n            }\n        }\n    }\n`;\n\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n    style?: React.CSSProperties\n};\nconst FoodInfoSummaryComponent: React.FC<QueryResultType> = (props) => (\n    <div className=\"FoodQuantityInfo-Summary\">\n        <p>You are buying:</p>\n        <FoodCard {...props} />\n    </div>\n);\n\nconst formLayout: FormLayout = [\n    [\n        {\n            label: \"Container Capcity\", type: \"number\",\n            name: \"amount\", placeholder: \"Amount\", iconName:\"local_mall\",\n            required: true, flex: 2,\n            validate: value => !!(value && value > 0)\n        },\n        {\n            label: \"# Containers\", type: \"number\",\n            name: \"containerCount\", iconName: \"kitchen\",\n            required: true, flex: 1,\n            validate: value => !!(value && value > 0)\n        }\n    ],\n    [\n        {\n            label: \"Price\", type: \"number\",\n            name: \"price\", iconName: \"local_atm\",\n            required: true,\n            validate: value => !!(value && value > 0),\n            flex: 2\n        },\n        {\n            label: \"Currency\", type: \"select\",\n            name: \"currency\", iconName: \"euro\",\n            flex: 1,\n            options: Object.values(RawCurrency)\n        }\n    ],\n    [\n        {\n            label: \"Price is for...\", type: \"select\",\n            name: \"priceType\", iconName: \"live_help\",\n            options: [\"Each Container\", \"All Containers\"],\n        }\n    ],\n    [\n        {\n            label: \"Expiry Date\", type: \"date\",\n            name: \"expiryDate\", iconName: \"calendar\"\n        }\n    ]\n];\n\nconst computeDisabledFields = (form: FormValueType) => {\n    if((form.containerCount as number) <= 1) {\n        return [\"priceType\"];\n    }\n\n    return [];\n}\ntype FormType = {\n    amount: number,\n    price: number,\n    currency: Currency,\n    containerCount: number,\n    priceType: \"Each Container\" | \"All Containers\",\n    expiryDate: Date | null,\n}\n\nconst initialValue: FormType = {\n    amount: 0,\n    price: 0,\n    currency: \"EUR\",\n    containerCount: 1,\n    priceType: \"All Containers\",\n    expiryDate: null\n}\n\ntype FoodQuantityInfoProps = {\n    food: string | null,\n    onPreviousStepRequested: () => void,\n    onInfoProvided: (order: BuyOrder[]) => void\n};\nconst FoodQuantityInfoComponent: React.FC<FoodQuantityInfoProps> = ({\n    food,\n    onPreviousStepRequested,\n    onInfoProvided,\n}) => {\n    const [ form, setFormValue ] = React.useState(initialValue);\n\n    const { data, loading } = useQuery(FOOD_INFO_QUERY, {\n        variables: {\n            name: food\n        }\n    });\n    if (loading) return null;\n\n    const onSave = () => {\n        const {\n            amount, price, currency, containerCount, priceType, expiryDate\n        } = form;\n        \n        const buyOrders = Array(containerCount).fill({\n            amount, \n            price: {\n                currency, \n                amount: (priceType === \"All Containers\") ? \n                    price / containerCount : price\n            },\n            foodName: food as string,\n            expiryDate\n        } as BuyOrder);\n\n        onInfoProvided(buyOrders);\n    };\n    return (\n        <div className=\"FoodQuantityInfo-Container\">\n            { !loading && (\n                <StickyBox offsetTop={-16}>\n                    <FoodInfoSummaryComponent \n                        {...data.food as QueryResultType}\n                    />\n                </StickyBox>\n            )}\n            \n            <div className=\"FoodQuantityInfo-Form\">\n                <Form withSubmitButton={false} layout={formLayout}\n                    initialValue={initialValue}\n                    setFormValue={setFormValue as (form: FormValueType) => void}\n                    disabledFields={computeDisabledFields}\n                    />\n            </div>\n            <div className=\"FoodQuantityInfo-ButtonRow\">\n                <Button title=\"Previous\" icon=\"navigate_before\" color=\"secondary\" onClick={onPreviousStepRequested} />\n                <Button title=\"Next\" icon=\"save\" color=\"info\" onClick={onSave} />\n            </div>\n        </div>\n    )\n};\n\nexport default FoodQuantityInfoComponent;","import React from 'react'\nimport { range } from 'lodash';\nimport \"./style.scss\";\n\ntype StepIndicatorProps = {\n    step: number,\n    totalSteps: number\n};\ntype StepComponentProps = {\n    i: number,\n    status: \"passed\" | \"ongoing\" | \"pending\"\n};\nconst StepIndicator: React.FC<StepIndicatorProps> = ({\n    step, totalSteps\n}) => { \n    const StepComponent: React.FC<StepComponentProps> = ({ i, status }) => (\n        <div className={`StepIndicator-StepComponent StepIndicator-StepComponent-${status}`}>\n            <div className=\"StepIndicator-Line\" />\n            <div className=\"StepIndicator-Center\">\n                {i + 1}\n            </div>\n            <div className=\"StepIndicator-Line\" />\n        </div>\n    );\n\n    const getStatusFromStep = (i: number) => {\n        if (i < step) return \"passed\";\n        else if (i === step) return \"ongoing\";\n        else return \"pending\";\n    }\n    return (\n        <div className=\"StepIndicator-Container\">\n            {\n                range(totalSteps).map(i => (\n                    <StepComponent i={i} status={getStatusFromStep(i)} />\n                ))\n            }\n        </div>\n\n    )\n};\n\nexport default StepIndicator;","import React from 'react';\nimport StepIndicator from './StepIndicator';\nimport { Icon } from \"@material-ui/core\";\nimport \"./style.scss\";\n\ntype WizardProps = {\n    open: boolean;\n    requestClose: () => void;\n    style?: object;\n    children: (step: number, toStep: (step: number) => void) => React.ReactNode;\n    headerTitle: (step: number) => string;\n}\nconst Wizard: React.FC<WizardProps> = ({\n    open, requestClose, children, style, headerTitle\n}) => {\n    const [step, setStep] = React.useState(0);\n    \n    React.useEffect(() => {\n        setStep(0);\n    }, [open]);\n\n    if(!open) return null;\n    \n    return (\n        <div className=\"Wizard-Container\" style={style}>\n            <div className=\"Wizard-Header\">\n                <div className=\"Header\">\n                    <div>\n                        <Icon style={{fontSize: 32}} onClick={requestClose}>\n                            navigate_before\n                        </Icon>\n                    </div>\n                    <div className=\"Header-NavButtonGroup\">\n                        { headerTitle(step) }\n                    </div>\n                </div>\n            </div>\n            <StepIndicator step={step} totalSteps={3} />\n            <div className=\"Wizard-Content\">\n                { children(step, setStep) }\n            </div>\n        </div>\n    );\n};\n\nexport default Wizard;","import React from 'react';\nimport { BuyOrder } from '../../data/typedefs';\nimport FoodTypePicker from \"../../components/FoodTypePicker\";\nimport FoodQuantityInfo from \"./FoodQuantityInfo\";\nimport Button from '../../components/Button';\nimport CenterNotice from '../../components/CenterNotice';\nimport Wizard from '../../components/Wizard';\nimport \"./style.scss\";\n\ntype SelectFoodPopupProps = {\n    open: boolean;\n    requestClose: () => void;\n    onBuyOrdersAdded: (orders: BuyOrder[]) => void;\n    style?: object;\n};\nconst SelectFoodPopup: React.FC<SelectFoodPopupProps> = ({\n    open, requestClose, style, onBuyOrdersAdded\n}) => {\n    // number of steps the picker is picking\n    // const [step, setStep] = React.useState(0);\n\n    const [selectedFood, setSelectedFood] = React.useState(null as string | null);\n   \n    React.useEffect(() => {\n        // setStep(0);\n        setSelectedFood(null);\n    }, [open]);\n\n    if (!open)return null;\n\n    const headerTitle = (step: number) => {\n        switch (step) {\n            case 0:\n                return \"Select Food\";\n            case 1:\n                return \"Fill in Info\";\n            case 2:\n                return \"Success\";\n            default:\n                return \"\";\n        }\n    };\n\n    const popupContent = (\n        step: number, \n        setStep: (step: number) => void\n    ) => {\n        switch(step) {\n            case 0:\n                return (\n                    <FoodTypePicker \n                        onFoodSelected={food => {setSelectedFood(food); setStep(1)}} \n                    />\n                );\n            case 1:\n                return (\n                    <FoodQuantityInfo\n                        food={selectedFood}\n                        onPreviousStepRequested={() => setStep(0)}\n                        onInfoProvided={(order: BuyOrder[]) => {\n                            onBuyOrdersAdded(order)\n                            setStep(2)\n                        }}\n                    />\n                );\n            case 2:\n                return (\n                    <>\n                        <CenterNotice iconName=\"check_circle_outline\" title=\"Food added to basket\"\n                            subtitle=\"You can choose 'Buy again' to add more, or 'Close' to review your basket\" \n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Close\" icon=\"close\" color=\"secondary\" onClick={requestClose} />\n                            <Button title=\"Buy Again\" icon=\"refresh\" color=\"info\" onClick={() => setStep(0)} />\n                        </div>\n                    </>\n                )\n            default:\n                return null;\n        }\n    }\n    return (\n        <Wizard \n            open={open} \n            requestClose={requestClose}\n            headerTitle={headerTitle} \n            style={style}>\n            { popupContent }\n        </Wizard>\n    );\n};\n\nexport default SelectFoodPopup;","import React from 'react';\nimport GenericCard, { GenericCardExtraProps } from '../../components/GenericCard';\nimport { BuyOrder } from '../../data/typedefs';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst FOOD_QUERY = gql`\n    query GetFood($name: String!) {\n        food(name: $name) @client {\n            unit\n        }\n    }\n`;\ntype PendingOrderCardProps = GenericCardExtraProps & {\n    order: BuyOrder\n};\n\nconst PendingOrderCard: React.FC<PendingOrderCardProps> = ({\n    order, ...props\n}) => {\n    const { foodName, amount: addAmount, expiryDate } = order;\n\n    const { loading, data, error } = useQuery(FOOD_QUERY, {\n        variables: { name: foodName }\n    });\n    \n    if (error) {\n        alert(error.message);\n        return null;\n    }   \n    if(loading) return null;\n    return (\n        <GenericCard \n            mainText={foodName}\n            smallComponent={expiryDate ? expiryDate.toLocaleString(\"en-US\") : \"No expiry date\"}\n            rightComponent={<div>{`${addAmount} ${data.food.unit}`}</div>}\n            {...props}\n        />\n    )   \n};\n\nexport default PendingOrderCard;","import React from 'react';\nimport { BuyOrder, Price } from '../../data/typedefs';\n\ntype PendingInfoSummaryProps = {\n    orders: BuyOrder[]\n}\nconst PendingInfoSummary: React.FC<PendingInfoSummaryProps> = ({\n    orders\n}) => {\n    if (orders.length === 0) return null;\n\n    // compute info\n    const totalAmount = orders.reduce((total, order) => (\n        new Price(order.price.amount, order.price.currency)\n            .as(\"EUR\")\n            .add(total)\n    ), new Price(0, \"EUR\"));\n\n    const numDifferentFoods = Array.from(\n        new Set(orders.map(order => order.foodName)).values()\n    ).length;\n    const numContainers = orders.length;\n\n    return (\n        <div className=\"BuyPage-SummaryRow\">\n            <div className=\"BuyPage-SummaryRow-Left\"/>\n            <div className=\"BuyPage-SummaryRow-Total\">\n                <div>{ numContainers } Container(s)</div>\n                <div>\n                { numDifferentFoods } Different food\n                </div>\n                <div className=\"BuyPage-SummaryRow-Sum\">\n                    Total: {totalAmount.amount.toFixed(2)} EUR\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PendingInfoSummary;","import React from 'react';\nimport SelectFoodPopup from './SelectFoodPopup';\n\nimport Button from '../../components/Button';\nimport { BuyOrder } from '../../data/typedefs';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport PendingOrderCard from './PendingOrderCard';\nimport PendingInfoSummary from './PendingInfoSummary';\nimport { useHeader } from '../Header';\n\nimport { gql } from '@apollo/client';\nimport { useMutation } from '@apollo/react-hooks';\nimport { toast } from 'react-toastify';\nimport \"./style.scss\";\n\nconst ADD_ORDERS = gql`\n    mutation buyFoods($orders: [BuyOrder]!) {\n        buyFood(buyOrders: $orders) @client {\n            id\n        }\n    }\n`;\n\nconst BuyPage: React.FC = () => {\n    const [ openSelectPopup, setOpenSelectPopup] = React.useState(false);\n    const [ pendingBuyOrders, setPendingBuyOrders ] = React.useState([] as BuyOrder[]);\n    const [ hasJustBought, setHasJustBought] = React.useState(false);\n    const { setNavOptions } = useHeader();\n    React.useEffect(() => {\n        setNavOptions({\n            title: \"Buy\",\n            navButtons: [\n                {\n                    iconName: \"add\",\n                    onClick: () => setOpenSelectPopup(true)\n                }\n            ]\n        });\n    }, []);\n\n    const [ buyFoodFunc ] = useMutation(ADD_ORDERS);\n\n    // handler of the final buy button\n    const onSubmitBuyOrders = () => {\n        buyFoodFunc({\n            variables: { orders: pendingBuyOrders}\n        });\n        toast.success(\"Items bought\", {\n            autoClose: 1000,\n            onOpen: () => {\n                setHasJustBought(true);\n            },\n            onClose: () => {\n                setOpenSelectPopup(false);\n                setPendingBuyOrders([]);\n                setHasJustBought(false);\n            }\n        });\n    };\n\n    return (\n        <>\n            <SelectFoodPopup \n                open={openSelectPopup} \n                requestClose={() => setOpenSelectPopup(false)}\n                onBuyOrdersAdded={orders => setPendingBuyOrders([...pendingBuyOrders, ...orders])}\n            />\n            <div className=\"BuyPage-Main\">\n                <CenterNoticeSwitch watch={pendingBuyOrders} \n                    iconName=\"shopping_cart\" \n                    title=\"Nothing to buy yet\"\n                    subtitle=\"Click the '+' button above to add a new item\">\n                    <>\n                        {\n                            pendingBuyOrders.map((order, i) => (\n                                <PendingOrderCard order={order} \n                                    actionButton={{\n                                        iconName: 'cancel',\n                                        onClick: () => setPendingBuyOrders(\n                                            // remove this order from the list of pending orders\n                                            pendingBuyOrders.filter((_, j) => i !== j)\n                                        )\n                                    }}\n                                />\n                            ))\n                        }\n                        {\n                            !openSelectPopup && (\n                                <PendingInfoSummary orders={pendingBuyOrders} />\n                            )\n                        }\n                        <Button \n                            disabled={pendingBuyOrders.length === 0 || hasJustBought} \n                            title=\"Buy\" color=\"info\" icon=\"shopping_cart\" \n                            onClick={onSubmitBuyOrders} \n                        />\n                    </>\n                </CenterNoticeSwitch>\n            </div>\n            \n        </>\n    );\n}\n\nexport default BuyPage;","import React from 'react';\nimport Form, { FormLayout } from '../../components/Form';\n\nconst AmountInterpretationType = {\n    \"Amount Used\": 0,\n    \"Amount Left\": 1,\n    \"Percentage Left\": 2,\n    \"All\": 3\n};\n\ntype FormValueType = {\n    amount: number;\n    interpretationType: keyof typeof AmountInterpretationType;\n};\n\nconst formLayout: FormLayout = [\n    [{\n        name: \"amount\",\n        label: \"Amount\",\n        type: \"number\",\n        iconName: \"fitness_center\"\n    }],\n    [{\n        name: \"interpretationType\",\n        label: \"Interpret amount as...\",\n        type: \"select\",\n        options: Object.keys(AmountInterpretationType),\n        iconName: \"comment\"\n    }]\n];\n\ntype AmountInputProps = {\n    unit: string;\n    amount: number;\n    capacity: number;\n    onAmountChosen: (amount: number) => void\n}\nconst AmountInput: React.FC<AmountInputProps> = ({\n    amount, capacity, onAmountChosen, unit\n}) => {\n    const initialFormValue: FormValueType = {\n        amount: 0,\n        //@ts-ignore\n        interpretationType: Object.keys(AmountInterpretationType)[0]\n    }\n    const [form, setForm] = React.useState(initialFormValue);\n\n    // derived properties\n    const realValue = (() => {\n        const type = AmountInterpretationType[form.interpretationType];\n        switch(type) {\n            case 0:\n                return form.amount;\n            case 1:\n                return capacity - form.amount;\n            case 2:\n                return parseFloat((amount - capacity * (form.amount / 100)).toFixed(2));\n            default:\n                return amount;\n        }\n    })();\n\n    const percentLeft = (amount - realValue) / capacity * 100;\n\n    // report new amount when values changed\n    React.useEffect(() => {\n        onAmountChosen(realValue);\n    }, [realValue, onAmountChosen]);\n\n    return (\n        <div className=\"AmountInput-Container\">\n            <Form \n                initialValue={initialFormValue}\n                layout={formLayout}\n                withSubmitButton={false}\n                submitIconName=\"check\"\n                submitButtonText=\"Consume\"\n                setFormValue={form => setForm(form as FormValueType)}\n            />\n            <div className=\"AmountInput-Summary\">\n                Remaining: {'  '}\n                <div className=\"AmountInput-SummaryText\">\n                    {(amount - realValue).toFixed(2)} {unit} ({percentLeft.toFixed(1)} %)\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AmountInput;","import React from 'react';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport { FoodContainer, Price } from '../../data/typedefs';\nimport ContainerCard from '../../components/ContainerCard';\nimport FoodCard from '../../components/FoodCard';\nimport Button from '../../components/Button';\nimport AmountInput from './AmountInput';\nimport StickyBox from 'react-sticky-box';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nconst CONTAINER_QUERY = gql`\n    query getContainersForFood($food: String!) {\n        food(name: $food) @client {\n            name\n            unit\n            info {\n                totalAmount\n                numberOfContainers\n            }\n\n            containers {\n                id\n                capacity\n                amount\n                datePurchased\n                expiryDate\n                dateOpened\n                price\n\n                opened\n                expired\n                percentageLeft\n            }\n        }\n    }\n`;\n\ntype QueryResultType = {\n    // FoodCard props\n    name: string,\n    unit: string,\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n\n    // Containers list props\n    containers: [{\n        id: string;\n        capacity: number;\n        amount: number;\n        datePurchased: Date;\n        expiryDate?: Date;\n        dateOpened?: Date;\n        price: Price;\n\n        opened: boolean;\n        expired: boolean;\n        percentageLeft: number;\n    }]\n};\n\ntype ContainerPickerProps = {\n    food: string | null;\n    onToPreviousPage: () => void;\n    onSelectContainer: (container: FoodContainer, amount: number) => void;\n};\n\nconst ContainerPicker: React.FC<ContainerPickerProps> = ({\n    food: foodName, onSelectContainer, onToPreviousPage\n}) => {\n    \n    const { loading, error, data, refetch } = useQuery(CONTAINER_QUERY, {\n        variables: {\n            food: foodName\n        }\n    });\n\n    const [containerInd, setContainerInd] = React.useState(0);\n    const [amountUsed, setAmountUsed] = React.useState(0);\n\n    React.useEffect(() => {\n        if (foodName) {\n            refetch({\n                food: foodName\n            });\n        }\n        setContainerInd(0);\n    }, [foodName]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const food = data.food as QueryResultType;\n\n    const {\n        name, unit, containers, info\n    } = food;\n\n    const selectedContainer = containers[containerInd];\n\n    const onConfirmInfo = () => {\n        onSelectContainer(selectedContainer, amountUsed);\n    };\n\n    const isAmountValid = () => {\n        if(!selectedContainer) return false;\n        return amountUsed > 0 && amountUsed <= selectedContainer.amount;\n    }\n\n    return (\n        <div className=\"ContainerPicker-Container\">\n            <StickyBox offsetTop={-8}>\n                <div style={{paddingTop: 8}}>\n                    Selecting containers for:\n                    <FoodCard \n                        name={name} unit={unit} \n                        containers={containers as unknown as FoodContainer[]} \n                        info={info} />\n                </div>\n            </StickyBox>\n            Container #{containerInd + 1} of {containers.length}\n            <div style={{paddingLeft: 24, paddingRight: 24}}>\n                <Slider dots infinite={false} \n                    afterChange={containerId => setContainerInd(containerId)}>\n                    {\n                        food.containers.map(\n                            (container, i) => (<ContainerCard\n                                key={i} \n                                container={container} \n                                unit={food.unit} \n                            />)\n                        )\n                    }\n                </Slider>\n            </div> \n            <div className=\"ContainerPicker-AmountInputContainer\">\n                {\n                    selectedContainer && (\n                        <AmountInput\n                            unit={food.unit}\n                            amount={selectedContainer.amount} \n                            capacity={selectedContainer.capacity}\n                            onAmountChosen={amount => setAmountUsed(amount)}\n                        />\n                    )\n                }\n            </div>\n            <div className=\"ContainerPicker-ButtonRow\">\n                <Button title=\"Previous\" icon=\"refresh\" color=\"secondary\"\n                    onClick={onToPreviousPage} \n                />\n                <Button title=\"Confirm\"  icon=\"check\" \n                    color=\"info\"\n                    disabled={!isAmountValid()}\n                    onClick={onConfirmInfo}\n                />\n            </div>\n        </div>\n    );\n    \n}\n\nexport default ContainerPicker;\n","import React from 'react';\nimport Wizard from '../../components/Wizard';\nimport FoodTypePicker from '../../components/FoodTypePicker';\nimport Button from '../../components/Button';\nimport ContainerPicker from './ContainerPicker';\nimport CenterNotice from '../../components/CenterNotice';\n\nimport { FoodContainer } from '../../data/typedefs';\n\nexport type PendingConsumeOrder = {\n    food: string,\n    container: FoodContainer,\n    amount: number\n}\n\ntype SelectFoodPopupProps = {\n    open: boolean;\n    requestClose: () => void;\n    onConsumeOrderAdded: (order: PendingConsumeOrder) => void;\n}\n\nconst SelectFoodPopup: React.FC<SelectFoodPopupProps> = ({\n    open, requestClose, onConsumeOrderAdded\n}) => {\n    const [selectedFood, setSelectedFood] = React.useState(null as string | null);\n    \n    const headerTitle = (step: number) => {\n        switch(step) {\n            case 0:\n                return \"Select Food\";\n            case 1:\n                return \"Select Container\";\n            case 2:\n                return \"Success\";\n            default:\n                return \"\";\n        }\n    };\n\n    const reportConsumeOrder = (container: FoodContainer, amount: number) => {\n        onConsumeOrderAdded({\n            food: selectedFood as string,\n            container,\n            amount\n        });\n    };\n\n    const popupContent = (\n        step: number,\n        setStep: (step: number) => void\n    ) => {\n        switch(step) {\n            case 0:\n                return (\n                    <FoodTypePicker\n                        filterFood={food => food.containers.length > 0} \n                        onFoodSelected={food => {setSelectedFood(food); setStep(1)}} \n                    />\n                );\n            case 1:\n                return (\n                    <ContainerPicker \n                        food={selectedFood}\n                        onToPreviousPage={() => setStep(0)}\n                        onSelectContainer={(container, amount) => {\n                            reportConsumeOrder(container, amount); \n                            setStep(2);\n                        }}\n                    />\n                );\n            case 2:\n                return (\n                    <>\n                        <CenterNotice iconName=\"check_circle_outline\" title=\"Record added\"\n                            subtitle=\"You can choose 'Add Another' to add another record, or 'Close' to review your consumption order.\" \n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Close\" icon=\"close\" color=\"secondary\" onClick={requestClose} />\n                            <Button title=\"Add Another\" icon=\"refresh\" color=\"info\" onClick={() => setStep(0)} />\n                        </div>\n                    </>\n                )\n            default: \n                return null;\n        }\n    }\n\n    return (\n        <Wizard \n            open={open} \n            requestClose={requestClose}\n            headerTitle={headerTitle}>\n                {popupContent}\n        </Wizard>\n    );\n};\n\nexport default SelectFoodPopup;\n","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport GenericCard from '../../components/GenericCard';\nimport PercentageBar from '../../components/PercentageBar';\nimport { Food, FoodContainer } from '../../data/typedefs';\nimport { PendingConsumeOrder } from './SelectFoodPopup';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst UNIT_QUERY = gql`\n    query getUnit($food: String!) {\n        food(name: $food) @client {\n            unit\n        }\n    }\n`;\ntype PendingConsumptionCardProps = PendingConsumeOrder & {\n    onRemove: () => void\n};\n\nconst PendingConsumptionCard: React.FC<PendingConsumptionCardProps> = ({\n    food, container, amount, onRemove\n}) => {\n    const { loading, error, data, refetch } = useQuery(UNIT_QUERY);\n    \n    React.useEffect(() => {\n        refetch({ food });\n    }, [food]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const { unit } : { unit: string } = data.food;\n    const RightComponent = (\n        <div className=\"PendingConsumptionCard-Right\">\n            -{ amount } { unit }\n        </div>\n    );\n    const originalPercentage = parseFloat(\n        ((container.amount / container.capacity) * 100).toFixed(2)\n    );\n\n    const consumedPercentage = parseFloat(\n        (amount / container.capacity * 100).toFixed(2)\n    );\n    const AuxComponent = (\n        <div className=\"PendingConsumptionCard-SmallComponent\">\n            <div>\n                {originalPercentage}% <Icon>arrow_right</Icon> {originalPercentage - consumedPercentage}%\n            </div>\n            <PercentageBar \n                color=\"orange\"\n                percentageLeft={originalPercentage}\n                percentageDifference={consumedPercentage} \n            />\n            {\n                (originalPercentage - consumedPercentage) < 1 && (\n                    <div className=\"PendingConsumptionCard-DisposeLabel\">\n                        To be disposed\n                    </div>\n                )\n            }\n        </div>\n    );\n\n    return (\n        <GenericCard \n            mainText={food}\n            rightComponent={RightComponent}\n            smallComponent={AuxComponent}\n            actionButton={{\n                iconName: \"highlight_off\",\n                onClick: onRemove\n            }}\n        />\n    );\n};\n\nexport default PendingConsumptionCard;","import React from 'react';\nimport { useHeader } from '../Header';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport Button from '../../components/Button';\nimport SelectFoodPopup, { PendingConsumeOrder } from './SelectFoodPopup';\nimport PendingConsumptionCard from './PendingConsumptionCard';\nimport { gql } from '@apollo/client';\nimport { useMutation } from '@apollo/react-hooks';\nimport { toast } from 'react-toastify';\nimport \"./style.scss\";\n\nconst CONSUME_ORDERS = gql`\n    mutation consumeFoods($orders: [ConsumeOrder]!) {\n        consumeFoods(consumeOrders: $orders) @client {\n            id\n        }\n    }\n`;\n\nconst ConsumePage: React.FC = () => {\n    const [ openSelectPopup, setOpenSelectPopup ] = React.useState(false);\n    const [ submitConsumeOrders ] = useMutation(CONSUME_ORDERS);\n    const [ \n        pendingConsumeOrders, \n        setPendingConsumeOrders \n    ] = React.useState([] as PendingConsumeOrder[]);\n\n    const [hasJustConsumed, setHasJustConsumed] = React.useState(false);\n\n    const { setNavOptions } = useHeader();\n\n    React.useEffect(() => {\n        setNavOptions({\n            title: \"Consume Food\",\n            navButtons: [{\n                iconName: \"add\",\n                onClick: () => setOpenSelectPopup(true)\n            }]\n        });\n    }, []);\n    return (\n        <>\n            <SelectFoodPopup \n                open={openSelectPopup}\n                requestClose={() => setOpenSelectPopup(false)}\n                onConsumeOrderAdded={(order) => setPendingConsumeOrders([\n                    ...pendingConsumeOrders,\n                    order\n                ])}\n            />\n            <CenterNoticeSwitch \n                watch={pendingConsumeOrders}\n                iconName=\"whatshot\"\n                title=\"No Items added\"\n                subtitle=\"Use the '+' button above to add containers to consume.\"\n            >\n                <>\n                    <div className=\"PendingConsumption-Container\">\n                        {\n                            pendingConsumeOrders.map(\n                                (order, i) => (\n                                    <PendingConsumptionCard \n                                        {...order}\n                                        onRemove={() => setPendingConsumeOrders(\n                                            pendingConsumeOrders.filter((_, j) => i !== j)\n                                        )}\n                                    />\n                                )\n                            )\n                        }\n                    </div>\n                    <Button color=\"info\"\n                        onClick={() => {\n                            submitConsumeOrders({\n                                variables: {\n                                    orders: pendingConsumeOrders.map(order => ({\n                                        __typename: \"ConsumeOrder\",\n                                        containerID: order.container.id,\n                                        amount: order.amount\n                                    }))\n                                }\n                            });\n                            toast.success(\"Records saved...\", {\n                                autoClose: 1000,\n                                onOpen: () => {\n                                    setHasJustConsumed(true);\n                                },\n                                onClose: () => {\n                                    // reset the form\n                                    setPendingConsumeOrders([]);\n                                    setHasJustConsumed(false);\n                                }\n                            });\n                        }}\n                        disabled={pendingConsumeOrders.length === 0 || hasJustConsumed}\n                        title=\"Consume\" icon=\"whatshot\" \n                    />\n                </>\n            </CenterNoticeSwitch>\n        </>\n    );\n}\n\nexport default ConsumePage;","import { createStore, Reducer } from 'redux';\nimport { Food, FoodContainer, Price } from '../data/types';\n\nexport type State = {\n    foods: Array<Food>,\n};\n\nexport type ActionTypes = \"ADD_FOOD\"\n    | \"EDIT_FOOD\"\n    | \"BUY_FOOD\"\n    | \"CONSUME_FOOD\";\n\n\nexport type Action = {\n    type: ActionTypes,\n    data: Food | BuyFoodOrder | EditFoodOption\n}\n\nexport type EditFoodOption = {\n    foodID: string,\n    food: Food\n}\nexport type BuyFoodOrder = {\n    foodID: string,\n    quantity: number,\n    price: Price,\n    expiryDate?: Date\n}\n\nconst initialState: State = { \n    foods: [] \n};\n\nconst rootReducers: Reducer<State, Action> = (state: State = initialState, action: Action) => {\n    switch(action.type) {\n        case \"ADD_FOOD\": {\n            const newFood = action.data as Food;\n            return {...state, foods: [...state.foods, newFood]};\n        }\n\n        case \"BUY_FOOD\": {\n            const { foodID, quantity, price, expiryDate } = action.data as BuyFoodOrder;\n            const newState = {...state};\n            const food = newState.foods.find(food => food.id === foodID);\n\n            if(!food) return state;\n            food.buy(quantity, price, expiryDate);\n\n            return newState;\n        }\n        case \"EDIT_FOOD\": {\n            const { foodID, food } = action.data as EditFoodOption;\n            const newState = {\n                ...state,\n                // get all food and map them as-is,\n                // except fot the one with the same ID, update the info\n                foods: state.foods.map(\n                    f => {\n                        if (foodID !== f.id) return f;\n                        else {\n                            f.updateInfo(\n                                food.name,\n                                food.unit,\n                                food.latestTimeToConsumeAfterFirstOpen\n                            );\n                            return f;\n                        }\n                    } \n                )\n            };\n            return newState;\n        }\n\n        case \"CONSUME_FOOD\":\n        default: \n            return state;\n    }\n}\n\nexport default createStore(rootReducers);","import { typeDefs } from \"./typedefs\";\nimport resolvers from './resolvers';\n\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n    typeDefs,\n    resolvers\n});\n\nexport default client;\n","import React from 'react';\nimport Playground from './components/playground';\nimport {\n  Router, Switch, Route, useLocation, BrowserRouter\n} from 'react-router-dom';\nimport history from './history';\nimport NavBar from './pages/Navbar';\nimport  { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// pages\nimport FoodPage from './pages/Food';\nimport CreateFoodPage from './pages/CreateFood';\nimport FoodDetailsPage from './pages/FoodDetails';\nimport ContainerPage from './pages/Container';\nimport SettingsPage from './pages/Settings';\nimport BuyPage from './pages/Buy';\nimport ConsumePage from './pages/Consume';\n\nimport store from './reducers';\nimport  {Provider} from 'react-redux';\nimport Routes, { PageNames, BaseName } from './routes';\nimport { HeaderContainer } from './pages/Header';\n\nimport client from './data/graphql';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n\nimport './App.scss';\n\nconst RouteSwitch: React.FC = () => {\n  const query = new URLSearchParams(useLocation().search);\n  // const query = new URLSearchParams(search);\n  // const [pageName, setPageName] = React.useState(\"\");\n\n  // React.useEffect(() => {\n  //   setPageName(new URLSearchParams(search || \"\").get('page') || \"\");\n  // }, [search]);\n  console.log('query');\n  console.log(query);\n  console.log(useLocation().search);\n  switch(query.get('page')) {\n    case PageNames.FOOD_LIST:\n      return <FoodPage />\n    case PageNames.FOOD_ADD:\n      return <CreateFoodPage />\n    case PageNames.CONTAINERS_LIST:\n      return <ContainerPage />\n    case PageNames.FOOD_DETAILS:\n      return <FoodDetailsPage />\n    case PageNames.BUY_FOOD:\n      return <BuyPage />\n    case PageNames.CONSUME:\n      return <ConsumePage />\n    case PageNames.SETTINGS:\n      return <SettingsPage />\n    default:\n      return null;\n  }\n}\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Provider store={store}>\n            <Router  history={history}>\n                <HeaderContainer>\n                  <div className=\"Page\">\n                    <Switch>\n                      <Route path={Routes.HOME} component={RouteSwitch} />\n                    </Switch>\n                  </div>\n                </HeaderContainer>\n                <ToastContainer />\n                <NavBar />\n            </Router>\n        </Provider>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}