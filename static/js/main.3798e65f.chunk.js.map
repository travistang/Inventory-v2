{"version":3,"sources":["pages/Navbar/NavIcon.tsx","routes.ts","pages/Navbar/index.tsx","components/GenericCard/index.tsx","components/FoodCard/ContainerOverview.tsx","components/FoodCard/index.tsx","pages/Header/index.tsx","history.ts","components/Input/index.tsx","components/CenterNotice/index.tsx","components/SearchList/index.tsx","pages/Food/index.tsx","data/typedefs.ts","components/Button/index.tsx","components/Form/index.tsx","pages/CreateFood/index.tsx","pages/FoodDetails/auxInfo.tsx","pages/FoodDetails/listInfoItem.tsx","components/PercentageBar/index.tsx","utils.ts","components/ContainerCard/index.tsx","pages/FoodDetails/index.tsx","pages/Container/index.tsx","data/resolvers.ts","pages/Settings/index.tsx","components/FoodTypePicker/index.tsx","pages/Buy/FoodQuantityInfo.tsx","components/Wizard/StepIndicator.tsx","components/Wizard/index.tsx","pages/Buy/SelectFoodPopup.tsx","pages/Buy/PendingOrderCard.tsx","pages/Buy/PendingInfoSummary.tsx","pages/Buy/index.tsx","pages/Consume/AmountInput.tsx","pages/Consume/ContainerPicker.tsx","pages/Consume/SelectFoodPopup.tsx","pages/Consume/PendingConsumptionCard.tsx","pages/Consume/index.tsx","reducers/index.ts","data/graphql.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavIcon","title","icon","active","path","className","Icon","style","color","PageNames","Routes","FOOD_LIST","FOOD_ADD","FOOD_DETAILS","FOOD_EDIT","BUY_FOOD","CONTAINERS_LIST","SETTINGS","CONSUME","HOME","navItems","NavBar","location","useLocation","history","useHistory","map","props","i","key","onClick","push","pathname","split","startsWith","GenericCard","mainText","rightComponent","smallComponent","actionButton","iconName","STATUS_COLOR","UNOPENED","UNOPENED_EXPIRED","OPENED","OPENED_EXPIRED","ContainerOverview","containers","now","Date","getDate","icons","expiryDate","dateOpened","expired","Object","keys","opened","SmallInfo","value","withRouter","name","unit","info","totalAmount","fontSize","numberOfContainers","constate","React","useState","withBackButton","navOptions","setNavOptions","HeaderContextProvider","useHeader","Header","navButtons","goBack","HeaderContainer","children","withHeader","WrappedComponent","newNavOptions","useEffect","createBrowserHistory","Input","rawOnChange","onChange","required","validate","label","type","placeholder","isValid","setIsValid","valueToDisplay","toLocaleString","finalClassNameOuter","finalClassName","Error","options","multiple","otherProps","e","target","selected","opt","CenterNotice","subtitle","textAlign","CenterNoticeSwitch","watch","centerNoticeProps","length","defaultEmptyResultConfig","SearchGroup","list","filterFunc","renderItem","minimumSearchLength","inputConfig","emptyResultConfig","searchTerm","setSearchTerm","searchResults","filter","item","QUERY","gql","useQuery","loading","error","data","refetch","search","window","alert","message","foods","SearchList","food","text","toLowerCase","includes","RawUnit","g","mL","Price","amount","currency","amountInHKD","this","toHKDRate","price","as","DEFAULT_ZERO","Button","disabled","undefined","FormComponent","customInitialValue","initialValue","layoutOrLayoutFunc","layout","submitIconName","submitButtonText","onSubmit","withSubmitButton","disabledFields","setFormValue","state","useSelector","shallowEqual","allFields","reduce","layouts","row","initialValues","assign","form","setForm","isAllFieldsValid","some","allDisabledFieldNames","inputFieldProps","field","v","setField","flex","inputConfigProps","ADD_FOOD_QUERY","GET_FOOD_NAMES_QUERY","formLayout","newName","find","values","useMutation","updateFoodFunc","Form","a","async","variables","toast","position","POSITION","TOP_CENTER","autoClose","onClose","AuxInfo","parseFloat","toString","toFixed","ListInfoItem","description","PercentageBar","percentageLeft","percentageDifference","flexGrow","backgroundColor","height","background","backgroundSize","convertToFloat","Number","getDifferenceInDaysFromNow","date","Math","ceil","abs","ContainerCard","container","capacity","datePurchased","containerIcon","toLocaleDateString","daysDiff","expireDateString","FOOD_DETAIL_QUERY","FoodDetailsPage","foodName","URLSearchParams","get","auxConfigs","totalWorth","listInfoConfigs","openedContainers","expiredContainers","config","initialDatabase","loadDatabase","db","localStorage","getItem","JSON","parse","setItem","stringify","saveDatabase","newDb","resolvers","Query","_","FoodContainer","Food","sum","totalCapacity","__typename","Mutation","addFood","buyFood","buyOrders","newFoodContainers","forEach","buyOrder","foodId","findIndex","id","md5","consumeFoods","consumeOrders","hasError","order","containerID","con","console","log","containerIndex","ButtonWithDescriptionRow","buttonTitle","settingsConfig","reload","settings","GET_FOOD_LIST","FoodTypePicker","onFoodSelected","filterFood","foodOptions","finalOptions","FOOD_INFO_QUERY","FoodInfoSummaryComponent","EUR","USD","PLN","HKD","computeDisabledFields","containerCount","priceType","FoodQuantityInfoComponent","onPreviousStepRequested","onInfoProvided","offsetTop","Array","fill","StepIndicator","step","totalSteps","StepComponent","status","getStatusFromStep","range","Wizard","open","requestClose","headerTitle","setStep","SelectFoodPopup","onBuyOrdersAdded","selectedFood","setSelectedFood","FoodQuantityInfo","FOOD_QUERY","PendingOrderCard","addAmount","PendingInfoSummary","orders","total","add","numDifferentFoods","from","Set","numContainers","ADD_ORDERS","BuyPage","openSelectPopup","setOpenSelectPopup","pendingBuyOrders","setPendingBuyOrders","buyFoodFunc","j","success","AmountInterpretationType","AmountInput","onAmountChosen","initialFormValue","interpretationType","realValue","percentLeft","CONTAINER_QUERY","ContainerPicker","onSelectContainer","onToPreviousPage","containerInd","setContainerInd","amountUsed","setAmountUsed","selectedContainer","paddingTop","paddingLeft","paddingRight","dots","infinite","afterChange","containerId","onConsumeOrderAdded","reportConsumeOrder","UNIT_QUERY","PendingConsumptionCard","onRemove","RightComponent","originalPercentage","consumedPercentage","AuxComponent","CONSUME_ORDERS","ConsumePage","submitConsumeOrders","pendingConsumeOrders","setPendingConsumeOrders","initialState","createStore","action","newFood","foodID","quantity","newState","buy","f","updateInfo","latestTimeToConsumeAfterFirstOpen","client","ApolloClient","typeDefs","RouteSwitch","query","CreateFood","Container","FoodDetails","Buy","Consume","Settings","App","store","basename","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3798e65f.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@material-ui/core';\n\nexport type NavIconProps = {\n    title: string,\n    icon: string,\n    path: string,\n    active?: Boolean\n};\n\nconst NavIcon: React.FC<NavIconProps> = ({\n    title, icon, path, active\n}) => {\n    return (\n        <div className=\"NavIcon-Container\">\n            <div className={`NavIcon ${active?\"NavIcon-Active\":\"\"}`}>\n                <Icon style={{color: active?\"primary\":\"text\"}}>{icon}</Icon>\n                {' '}\n                {title}\n            </div>\n        </div>\n    )\n};\n\nexport default NavIcon;","export const PageNames = {\n    FOOD_LIST: \"food\",\n    FOOD_ADD: \"food_new\",\n    FOOD_DETAILS: \"food_details\",\n    FOOD_EDIT: \"food_edit\",\n    BUY_FOOD: \"buy\",\n    CONTAINERS_LIST: \"containers\",\n    SETTINGS: \"settings\",\n    CONSUME: \"consume\",\n    HOME: \"\"\n};\n\nconst Routes = {\n    FOOD_LIST: \"/app?page=food\",\n    FOOD_ADD: \"/app?page=food_new\",\n    FOOD_DETAILS: \"/app?page=food_details\",\n    FOOD_EDIT: \"/app?page=food_edit\",\n\n    BUY_FOOD: \"/app?page=buy\",\n    CONTAINERS_LIST: \"/app?page=containers\",\n\n    SETTINGS: \"/app?page=settings\",\n\n    CONSUME: \"/app?page=consume\",\n    HOME: \"/app\"\n}\n\nexport default Routes","import React from \"react\";\nimport NavIcon, { NavIconProps } from \"./NavIcon\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Routes from '../../routes';\nimport \"./style.scss\";\n\nconst navItems: Array<NavIconProps> = [\n    {\n        title: \"Assets\",\n        icon: \"work-outline\",\n        path: Routes.CONTAINERS_LIST,\n    },\n    {\n        title: \"Consume\",\n        icon: \"whatshot\",\n        path: Routes.CONSUME\n    },\n    {\n        title: \"Food\",\n        icon: \"fastfood\",\n        path: Routes.FOOD_LIST\n    },\n    {\n        title: \"Buy\",\n        icon: \"shopping-cart\",\n        path: Routes.BUY_FOOD\n    }, \n    {\n        title: \"Settings\",\n        icon: \"settings\",\n        path: Routes.SETTINGS\n    }\n];\n\n\nconst NavBar: React.FC = () => {\n    const location = useLocation();\n    const history  = useHistory();\n    return (\n        <div className=\"NavBarContainer\">\n            {\n                navItems.map((props, i) => (\n                    <div key={i} onClick={() => history.push(props.path as string)}>\n                        <NavIcon {...props} active={\n                                (location.pathname.split('/app')[1] || '/app')\n                                .startsWith(props.path.split('/app')[1] || '/app')\n                            }  \n                        />\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type GenericCardExtraProps = {\n    actionButton?: {\n        iconName: string,\n        onClick: () => void\n    }\n};\n\nexport type GenericCardProps = GenericCardExtraProps & {\n    mainText: string,\n    rightComponent: React.ReactNode,\n    smallComponent?: React.ReactNode,\n    onClick?: () => void\n};\n\nconst GenericCard: React.FC<GenericCardProps> = ({\n    mainText, rightComponent, smallComponent, onClick,\n    actionButton\n}) => {\n    return (\n        <div className=\"GenericCard\" onClick={onClick}>\n            {\n                actionButton && (\n                    <div className=\"GenericCard-ActionButton\">\n                        <div onClick={actionButton.onClick}>\n                            <Icon >{actionButton.iconName}</Icon>\n                        </div>\n                    </div>\n                )\n            }\n            <div className=\"GenericCard-Left\">\n                <div className=\"GenericCard-MainText\">{mainText}</div>\n                <div className=\"GenericCard-containers\">\n                    { smallComponent }\n                </div>\n            </div>\n            \n            <div className=\"GenericCard-Right\">\n                { rightComponent }\n            </div>\n        </div>\n    );\n}\n\nexport default GenericCard;","import React from 'react';\nimport { FoodContainer } from '../../data/typedefs';\nimport { Icon } from '@material-ui/core';\n\nconst STATUS_COLOR = {\n    UNOPENED: {\n        color: 'white',\n        icon: \"kitchen\"\n    },\n    UNOPENED_EXPIRED: {\n        color: 'white',\n        icon: \"delete_forever\"\n    },\n    OPENED: {\n        color: 'orange',\n        icon: \"kitchen\"\n    },\n    OPENED_EXPIRED: {\n        color: 'orange',\n        icon: \"delete_forever\"\n    }\n}\n\ntype StatusTypes = keyof typeof STATUS_COLOR;\n\ntype ContainerOverviewProps = {\n    containers: FoodContainer[]\n};\nconst ContainerOverview: React.FC<ContainerOverviewProps> = ({\n    containers\n}) => {\n    const now = new Date().getDate();\n\n    const icons = containers.map(({\n        expiryDate,\n        dateOpened,\n    }, i) => {\n\n        let status = Object.keys(STATUS_COLOR)[0] as StatusTypes;\n        const expired = !!expiryDate && new Date(expiryDate).getDate() > now;\n        const opened  = !!dateOpened;\n\n        if (expired) {\n            status = opened ? \"OPENED_EXPIRED\" : \"UNOPENED_EXPIRED\";\n        } else {\n            status = opened ? \"OPENED\" : \"UNOPENED\";\n        }\n\n        const { icon, color } = STATUS_COLOR[status];\n        return (\n            <Icon key={i} style={{color}}>{icon}</Icon>\n        );\n    });\n\n    return (\n        <>\n            {icons}\n        </>\n    );\n};\n\nexport default ContainerOverview;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport GenericCard, { GenericCardExtraProps } from '../GenericCard';\nimport ContainerOverview from './ContainerOverview';\nimport { FoodContainer } from '../../data/typedefs';\n\ntype FoodCardProps = GenericCardExtraProps & {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n    onClick?: () => void\n};\n\nconst SmallInfo = ({ \n    icon, value, style \n}: { icon?: string, value: number | string, style?: any}) => (\n    <div className=\"FoodCard-SmallInfo\" style={style}>\n        { icon && <Icon>{icon}</Icon> }\n        { value }\n    </div>\n);\n\nconst FoodCard: React.FC<FoodCardProps & RouteComponentProps<any>> = ({\n    name, unit, info, onClick, containers, ...props\n}) => {\n    const rightComponent = <SmallInfo value={`${info.totalAmount} ${unit}`} style={{fontSize: 18}} />;\n    const smallComponent = !info.numberOfContainers ?\n         \"No containers\" :\n         <ContainerOverview containers={containers} />;\n\n    return (\n        <GenericCard \n            mainText={name} \n            rightComponent={rightComponent} \n            smallComponent={smallComponent} \n            onClick={onClick} \n            {...props}\n        />\n    );\n}\n\nexport default withRouter(FoodCard);","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport { useHistory } from 'react-router';\nimport constate from 'constate';\nimport './style.scss';\n\ntype NavButtonProps = {\n    iconName: string,\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\ntype HeaderProps = {\n    title: string,\n    withBackButton?: boolean,\n    navButtons?: Array<NavButtonProps>\n};\n\nexport type WithHeaderProps = {\n    setNavOptions: (opt: HeaderProps) => void;\n    navOptions: HeaderProps;\n    setHeaderTitle: (newTitle: string) => void;\n}\n\n// custom hooks\nexport function useHeaderHook() {\n    const [ navOptions, setNavOptions] = React.useState({\n        title: \"\",\n        withBackButton: false\n    } as HeaderProps);\n\n    return { navOptions, setNavOptions } ;\n};\n\nexport const [HeaderContextProvider, useHeader] = constate(useHeaderHook);\n\nconst Header: React.FC = () => {\n    const { \n        navOptions: {\n            title, navButtons, withBackButton\n        }\n    } = useHeader();\n\n    const history = useHistory();\n    return (\n        <div className=\"Header\">\n            <div>\n                {\n                    withBackButton && (\n                            <Icon style={{fontSize: 32}} onClick={() => history.goBack()}>navigate_before</Icon>\n                    )\n                }\n                {title}\n            </div>\n            \n            <div className=\"Header-NavButtonGroup\">\n                {\n                    navButtons && navButtons.map(({iconName, onClick}) => (\n                        <div className=\"Header-NavButton\" onClick={onClick}>\n                            <Icon>{iconName}</Icon>\n                        </div>\n                    ))                    \n                }\n            </div>\n        </div>\n    )\n}\n\nexport const HeaderContainer: React.FC = ({ children }) => {\n    return (\n        <HeaderContextProvider>\n            <Header/>\n            {children}\n        </HeaderContextProvider>\n    )\n};\n\nexport const withHeader = (WrappedComponent : React.FC<any>, newNavOptions : HeaderProps) => {\n    const Component: React.FC = props => {\n        const {setNavOptions} = useHeader();\n        React.useEffect(() => {\n            setNavOptions(newNavOptions);\n        }, []);\n\n        return <WrappedComponent {...props} />\n    }\n\n    return Component;\n}\nexport default Header;","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;","import React from 'react';\nimport {Icon} from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type InputTypes = \"text\" | \"textarea\" | \"number\" | \"date\" | \"select\";\nexport type ValueTypes = string | number | Date | null;\n\nexport type InputConfigProps = {\n    name: string;\n    label?: string;\n    type?: InputTypes;\n    iconName?: string;\n    placeholder?: string;\n    required?: boolean;\n    validate?: (value: ValueTypes) => boolean;\n    className?: string;\n}\n\nexport type SelectConfigProps = {\n    options: ValueTypes[];\n    multiple?: boolean;\n}\n\nexport type InputProps = InputConfigProps & {\n    value: ValueTypes,\n    onChange: (value: ValueTypes) => void,\n    disabled?: boolean\n}\n\nconst Input: React.FC<InputProps> = ({\n    onChange: rawOnChange, value,\n    // validation props\n    required = false, validate = () => true,\n    name,\n    label,\n    type = \"text\",\n    placeholder,\n    className,\n    iconName,\n    ...props\n}) => {\n    \n    // TODO: Isolate validation component\n    const [ isValid, setIsValid ] = React.useState(validate(value));\n    // on change armed with validation\n    const onChange = (value: ValueTypes) => {\n        if((required && !value) || !validate(value)) {\n            setIsValid(false);\n        } else { \n            setIsValid(true);\n        }\n        rawOnChange(value);\n    }\n\n    const valueToDisplay: (value: ValueTypes, type: InputTypes) => string | number = value => {\n        if (value instanceof Date) {\n            return value.toLocaleString('en-US');\n        } \n        return value || \"\";\n    }\n\n    const finalClassNameOuter = `Input  ${!isValid ? \"Invalid\" : \"\"}`;\n    const finalClassName = `Input-Inner ${className || \"\"}`;\n    switch(type) {\n        /**\n         * \n         *  The Select Field\n         * \n         */\n        case \"select\":\n            if(!(props as SelectConfigProps)) {\n                throw new Error(\"Input field is `select` but not options provided.\");\n            }\n            const { options, multiple = false, ...otherProps } = props as SelectConfigProps;\n            return (\n                <div>\n                    {label && <p>{label}</p>}\n                    <div className={finalClassNameOuter}>\n                        { iconName && <Icon>{iconName} </Icon>}\n                        <select\n                            multiple={multiple}\n                            name={name}\n                            {...otherProps}\n                            className={finalClassName}\n                            onChange={e => onChange(e.target.value)}\n                            value={valueToDisplay(value, type)}\n                        >\n                            {placeholder && \n                                <option value=\"\" selected={value === \"\"}>{placeholder}</option>\n                            }\n                            {\n                                options.map(opt => (\n                                    <option\n                                        selected={opt === value}>\n                                        {opt}\n                                    </option>\n                                ))\n                            }\n                        </select>\n                        <Icon>expand_more</Icon>\n                    </div>\n                </div>\n            )\n        /**\n         * \n         *  The General Input Field\n         * \n         */\n        default:\n            return (\n                <>\n                    {label && <p>{label}</p>}\n                    <div className={finalClassNameOuter}>\n                        { iconName && <Icon>{iconName} </Icon>}\n                        <input\n                            name={name}\n                            {...props}\n                            className={finalClassName}\n                            placeholder={placeholder}\n                            onChange={e => onChange(e.target.value)}\n                            type={type}\n                            value={valueToDisplay(value, type)}\n                        />\n                        {\n                            type === 'number' && (\n                                <div className=\"Input-NumberPicker\">\n                                    <Icon onClick={() => onChange((value as number || 0) + 1)}>expand_less</Icon>\n                                    <Icon onClick={() => onChange((value as number || 0) - 1)}>expand_more</Icon>\n                                </div>\n                            )\n                        }\n                    </div>\n                </>\n            )\n    }\n}\n\nexport default Input;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport './style.scss';\n\nexport type CenterNoticeProps = {\n    iconName: string,\n    title?: string, \n    subtitle?: string\n};\n\ntype CenterNoticeSwitchProps = CenterNoticeProps & {\n    watch: Array<any> | boolean,\n    children: any\n}\nconst CenterNotice: React.FC<CenterNoticeProps> = ({\n    iconName, title, subtitle\n}) => {\n    return (\n        <div className=\"CenterNotice\">\n            <Icon style={{fontSize: 72}}>{iconName}</Icon>\n            <div style={{textAlign: 'center'}}>\n                {\n                    title && <h3>{title}</h3>\n                }\n                {\n                    subtitle && <h6>{subtitle}</h6>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport const CenterNoticeSwitch: React.FC<CenterNoticeSwitchProps> = ({\n    watch, children, ...centerNoticeProps\n}) => {\n    if((watch as Array<any>).length === 0 || !(watch as boolean)) {\n        return (<CenterNotice {...centerNoticeProps} />);\n    } else {\n        return children;\n    }\n}\n\nexport default CenterNotice;","import React from 'react';\nimport Input, {InputConfigProps} from '../Input';\nimport { \n    CenterNoticeProps, \n    CenterNoticeSwitch \n} from '../CenterNotice';\nimport \"./style.scss\";\n\ntype SearchGroupProps<T> = {\n        list: Array<T>,\n        filterFunc: (item: T, searchTerm: string) => boolean\n        \n        minimumSearchLength?: number,\n        renderItem: (item: T) => React.ReactNode,\n        inputConfig: InputConfigProps,\n        emptyResultConfig?: CenterNoticeProps,\n}\n\nconst defaultEmptyResultConfig: CenterNoticeProps = {\n    iconName: \"search\",\n    title: \"No results found\"\n}\n\nconst SearchGroup: React.FC<SearchGroupProps<any>> = ({\n    list, filterFunc, renderItem,\n    minimumSearchLength = 1,\n    inputConfig,\n    emptyResultConfig = defaultEmptyResultConfig\n}) => {\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n    const searchResults = (searchTerm.length >= minimumSearchLength)?\n        list.filter(item => filterFunc(item, searchTerm)):list;\n\n    return (\n        <div className=\"SearchGroup\">\n            <div className=\"SearchGroup-Input\">\n                <Input\n                    \n                    {...inputConfig} \n                    value={searchTerm} \n                    onChange={e => setSearchTerm(e as string)}\n                />\n            </div>\n            <div className=\"SearchGroup-List\">\n                <CenterNoticeSwitch \n                    watch={searchResults} \n                    {...emptyResultConfig}\n                >\n                    { \n                           searchResults.map(item => renderItem(item))\n                    }\n                </CenterNoticeSwitch>\n            </div>\n        </div>\n    )\n    return null;\n}\n\nexport default SearchGroup;","import React from 'react';\nimport FoodCard from '../../components/FoodCard';\nimport { withHeader } from '../Header';\nimport { useLocation } from 'react-router-dom';\nimport history from '../../history';\nimport { Food } from '../../data/typedefs';\nimport SearchList from '../../components/SearchList';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport Routes from '../../routes';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from '@apollo/client';\n\ntype FoodPageProps = {\n    foods: Array<Food>\n}\n\nconst QUERY = gql`\n    {\n        foods @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                numberOfContainers\n                totalAmount\n            }\n        }\n    }\n`;\n\n\nconst FoodPage: React.FC<FoodPageProps> = () => {\n    const { loading, error, data, refetch } = useQuery(QUERY);\n    // the current query, mostly is ?page=...\n    const currentQuery = useLocation().search;\n\n    React.useEffect(() => {\n        refetch()\n    }, [window.location.pathname]);\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n    if(loading) {\n        return <div> loading...</div>\n    }\n\n    \n    const foods = data.foods as Food[];\n\n\n    return (\n        <CenterNoticeSwitch watch={foods}\n            iconName=\"fastfood\"\n            title=\"No food is added\"\n            subtitle=\"click the '+' button to add a new type of food\"\n        >\n            <SearchList\n                list={foods}\n                filterFunc={\n                    (food, text) => (food as Food).name.toLowerCase().includes(text.toLowerCase())\n                }\n                inputConfig={{\n                    name: \"FoodSearchInput\",\n                    iconName: \"search\",\n                    placeholder: \"Search for food...\"\n                }}\n                minimumSearchLength={2}\n                renderItem={food => (\n                    <FoodCard {...food} \n                        onClick={() => history.push(Routes.FOOD_DETAILS + `&food=${food.name}`)}\n                    />\n                )}\n            >\n\n            </SearchList>\n        </CenterNoticeSwitch>\n    );\n}\n\n\nexport default withHeader(FoodPage, {\n    title: \"Food\",\n    navButtons: [\n        {iconName: \"add\", onClick: () => history.push(Routes.FOOD_ADD)}\n    ]\n});\n\n","export const RawUnit = {\n    unit: \"unit\",\n    g: \"g\",\n    mL: \"mL\"\n}\n\nexport const RawCurrency = {\n    EUR: \"EUR\",\n    USD: \"USD\",\n    PLN: \"PLN\",\n    HKD: \"HKD\",\n}\n\nexport type Currency = keyof typeof RawCurrency;\nexport type Unit     = keyof typeof RawUnit;\n\n\nexport class Price {\n    static toHKDRate = (currency: Currency) => {\n        switch(currency) {\n            case \"EUR\": return 8.6;\n            case \"USD\": return 7.6;\n            case \"PLN\": return 2;\n            case \"HKD\": return 1;\n        }\n    };\n\n    static DEFAULT_ZERO = new Price(0, \"HKD\");\n\n    constructor(\n        readonly amount: number,\n        readonly currency: Currency\n    ) {}\n\n    public as(currency: Currency): Price {\n        const amountInHKD = this.amount * Price.toHKDRate(this.currency);\n        return new Price(amountInHKD / Price.toHKDRate(currency), currency);\n    }\n\n    public add(price: Price): Price {\n        const otherPriceInThisCurrency = price.as(this.currency);\n        return new Price(otherPriceInThisCurrency.amount + this.amount, this.currency);\n    }\n}\n\nexport interface FoodContainer {\n    id: string,\n    capacity: number,\n    amount: number,\n    datePurchased: Date\n    expiryDate?: Date,\n    dateOpened?: Date,\n    price: Price,\n\n}\n\nexport interface FoodInfo {\n    totalAmount: number,\n    percentageLeft: number\n}\n\nexport interface Food {\n    unit: Unit,\n    name: string,\n    containers: FoodContainer[],\n}\n\nexport interface BuyOrder {\n    foodName: string,\n    price: Price,\n    expiryDate?: Date,\n    amount: number\n};\n\nexport interface ConsumeOrder {\n    containerID: string,\n    amount: number\n}\n\nexport const typeDefs = `\n    enum Currency {\n        HKD\n        USD\n        EUR\n        PLN\n    }\n\n    enum Unit {\n        mL\n        g\n        unit\n    }\n\n\n    type Price {\n        currency: Currency!\n        amount: Number!\n    }\n\n    type FoodContainerInfo {\n        expired: Boolean!\n    }\n\n    type FoodContainer {\n        id: ID!\n        capacity: Number!\n        amount: Number!\n        datePurchased: Date!\n        expiryDate: Date\n        dateOpened: Date\n        price: Price!\n\n        opened: Boolean!\n        expired: Boolean!\n        percentageLeft: Number!\n    }\n\n    type FoodInfo {\n        numberOfContainers: Number!\n        expiredContainers: Number!\n        openedContainers: Number!\n        \n        totalAmount: Number!\n        totalWorth: Number!\n\n        percentageLeft: Number!\n    }\n\n    type Food {\n        name: String!\n        unit: Unit!,\n        containers: [FoodContainer!]!\n        info: FoodInfo\n    }\n    \n    type BuyOrder {\n        foodName: String!\n        price: Price!\n        expiryDate: Date\n        amount: Number!\n    }\n\n    type ConsumeOrder {\n        containerID: ID!\n        amount: Number!\n    }\n\n    type Query {\n        food(name: String!): Food\n        foods: [Food]!\n    }\n\n    type Mutation {\n        addFood(name: String!, unit: Unit!): Food\n        buyFood(buyOrders: [BuyOrder]!): [FoodContainer]\n        consumeFoods(consumeOrders: [ConsumeOrder]!): [ID!]\n    }\n`;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\ntype ButtonProps = {\n    title: string,\n    icon?: string,\n    color?: string,\n    onClick?: () => void,\n    disabled?: boolean,\n\n    className?: string\n};\n\nconst Button: React.FC<ButtonProps> = ({\n    title, icon, \n    color = \"primary\",\n    onClick,\n    disabled = false,\n    className\n}) => {\n    return (\n        <div\n            className={`${className} Button Button-${color} ${disabled? \"Button-Disabled\":\"\"}`} \n            onClick={!disabled ? onClick: undefined}>\n            {\n                icon && (\n                    <Icon>{icon}</Icon>\n                )\n            }\n            {title}\n        </div>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useHistory , useLocation } from 'react-router';\nimport { History, Location } from 'history';\nimport {Icon} from '@material-ui/core';\nimport { State } from '../../reducers';\nimport Button from '../Button';\nimport Input, { InputConfigProps, SelectConfigProps, ValueTypes, InputTypes } from '../Input';\nimport './style.scss';\n\n// The representation of the form value as JSON\nexport type FormValueType = {[key: string]: ValueTypes};\n\n// the config object shape\ntype BasicLayoutConfig = InputConfigProps & {\n    label?: string,\n    flex?: number,\n    inputStyle?: \"default\" | \"outlined\"\n};\n\n\n// the combined type\ntype SelectInputConfig = BasicLayoutConfig & SelectConfigProps;\ntype FormLayoutConfig = BasicLayoutConfig | SelectInputConfig;\n\n// the entire layout. The first array stores rows. Each row stores columns.\nexport type FormLayout = FormLayoutConfig[][] \n    | ((\n        store:          State, \n        history:        History<any>, \n        location:       Location<any>,\n        initialValues?: FormValueType) => FormLayoutConfig[][]);\n\n//  Type of the props passed to the <Form> Component\ntype FormProps = {\n    // connect\n    initialValue?: FormValueType,\n    layout: FormLayout,\n    submitIconName?: string,\n    submitButtonText?: string,\n    onSubmit?: (form: FormValueType) => void,\n    withSubmitButton?: boolean,\n    disabledFields?: (form: FormValueType) => string[],\n    setFormValue?: (form: FormValueType) => void\n}\n\nconst FormComponent: React.FC<FormProps> = ({\n    initialValue: customInitialValue,\n    layout : layoutOrLayoutFunc, \n    submitIconName, submitButtonText,\n    onSubmit,\n    withSubmitButton = true,\n    disabledFields,\n    setFormValue\n}) => {\n\n    // see if the incoming layout is a function\n    // if it is then pass it to the store ( for validation). Otherwise use it as-is\n    const state  = useSelector(state => state, shallowEqual) as State;\n    const history = useHistory();\n    const location = useLocation();\n    \n    const layout = (typeof layoutOrLayoutFunc === 'function') \n        ? layoutOrLayoutFunc(state, history, location, customInitialValue) \n        : layoutOrLayoutFunc;\n    \n    // flatten all fields for easier manipulations\n    const allFields = [...layout.reduce((layouts, row) => [...layouts, ...row], [])];\n    // the initial values of the form\n    // if the type is number, then the value would be 0. otherwise empty string\n    const initialValues = customInitialValue || Object.assign({}, \n        ...allFields.map(({name, type, required}) => {\n            if (!required) return null;\n            switch(type) {\n                case \"number\":\n                    return { [name]: 0 }\n                case \"date\":\n                    return { [name]: new Date() }\n                default:\n                    return { [name]: \"\" }\n            }\n        })\n    );\n    \n    // the form state \n    const [form, setForm] = React.useState(initialValues);\n    \n    React.useEffect(() => {\n        setFormValue && setFormValue(form);\n    }, [form, setFormValue]);\n\n\n    const isAllFieldsValid = !allFields.some(({name, required, validate}) => (\n        (required && !form[name]) || (validate && !validate(form[name]))\n    ));\n\n    // functions for manipulating form states\n    const setField = (field: string, value: ValueTypes) => {\n        setForm({...form, [field]: value});\n    };\n    \n    const allDisabledFieldNames = disabledFields ? disabledFields(form) : [];\n    const inputFieldProps = (field: string) => ({\n        value: form[field],\n        onChange: (v: ValueTypes) => setField(field, v),\n        disabled: allDisabledFieldNames.includes(field)\n    });\n\n    return (\n        <div className=\"Form\">\n            {\n                // create all the rows\n                layout.map(row => (\n                    <div className=\"Form-Row\">\n                        {\n                            // create all the columns\n                            row.map(({\n                                // here is each of the form config\n                                name, \n                                flex = 1, \n                                ...inputConfigProps\n                            }) => (\n                                <div className=\"Form-Col\" style={{flex}}>\n                                    <Input\n                                        name={name} \n                                        {...inputConfigProps} \n                                        {...inputFieldProps(name)}\n                                    />\n                                </div>\n                            ))\n                        }\n                    </div>\n                ))\n            }\n            <div style={{flex: 1}} />\n            {\n                withSubmitButton && (\n                    <Button color=\"info\"\n                        title={submitButtonText || \"Submit\"}\n                        icon={submitIconName}\n                        onClick={onSubmit && (() => onSubmit(form))}\n                        disabled={!isAllFieldsValid}\n                        className=\"Form-Submit\"\n                    />\n                )\n            }\n        </div>\n    )\n\n};\n\nexport default FormComponent;","import React from 'react';\nimport { History, Location } from 'history';\nimport { RawUnit } from '../../data/typedefs';\nimport { toast } from 'react-toastify';\nimport Routes from '../../routes';\nimport { withHeader } from '../Header';\nimport Form, { FormLayout, FormValueType } from '../../components/Form';\nimport { State } from '../../reducers';\nimport { gql } from '@apollo/client';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router';\n\nconst ADD_FOOD_QUERY = gql`\n    mutation addFood($name: String!, $unit: Unit!) {\n        addFood(name: $name, unit: $unit) @client {\n            id\n            name\n        }\n    }\n`;\n\nconst GET_FOOD_NAMES_QUERY = gql`\n    query {\n        foods @client {\n            name\n        }\n    }\n`;\n\nexport const formLayout: FormLayout = (\n    { foods }:  State, \n    history:    History<any>, \n    location:   Location<any>,\n    initialValue?: FormValueType) => [\n\n    [{  label: 'Food Name',\n        name: \"name\", placeholder: \"Name\", iconName: \"edit\", required: true,\n        // check if a food with same name exists\n        validate: newName => !foods.find(\n            ({name}) => {\n                return true;\n            }\n        )\n    }],\n    [{\n        label: \"Unit\",\n        name: \"unit\", placeholder: \"Unit\", required: true,\n        flex: 4, type: \"select\",\n        options: Object.values(RawUnit)\n    }]\n];\n\nconst CreateFoodPage: React.FC = () => {\n    const history = useHistory();\n    const { loading: loadingFoodList, error, data } = useQuery(GET_FOOD_NAMES_QUERY);\n    \n    const  [updateFoodFunc] = useMutation(ADD_FOOD_QUERY);\n\n\n    const onAddFood = async (form: FormValueType) => {\n        await updateFoodFunc({\n            variables: {\n                name: form.name,\n                unit: form.unit\n            }\n        })\n        \n        toast(\"Food Added.\", {\n            position: toast.POSITION.TOP_CENTER,\n            autoClose: 3000,\n            onClose: () => history.goBack()\n        });\n        // setTimeout(() => {\n        //     history.push(Routes.FOOD_LIST);\n        // }, 2000);\n    }\n\n    return (\n        <Form\n            submitButtonText=\"Add Food\"\n            submitIconName=\"add\"\n            onSubmit={onAddFood}\n            layout={formLayout} \n        />\n    )\n};\n\nexport default withHeader(CreateFoodPage, {\n    title: \"Add Food\",\n    withBackButton: true\n});","import React from 'react';\nimport { ValueTypes } from '../../components/Input';\nimport { Icon } from '@material-ui/core';\n\nexport type AuxInfoProps = {\n    title: string,\n    iconName?: string,\n    value: ValueTypes\n}\nconst AuxInfo: React.FC<AuxInfoProps> = ({title, iconName, value}) => {\n    return (\n        <div className=\"AuxInfo\">\n            {value ? parseFloat(value.toString()).toFixed(2) : \"\"}\n            <div className=\"AuxInfo-Title\">\n                {title}\n            </div>\n        </div>\n    )\n}\n\nexport default AuxInfo;","import React from 'react';\nimport { Icon } from '@material-ui/core';\n\nexport type ListInfoItemProps = {\n    iconName: string,\n    description: string,\n    value: string,\n    color: string,\n};\nconst ListInfoItem: React.FC<ListInfoItemProps> = ({\n    iconName, description, value, color\n}) => (\n    <div className=\"ListInfoItem-Container\">\n        <div className=\"ListInfoItem-Left\">\n            <Icon style={{color, fontSize: 32}}>{iconName} </Icon>\n        </div>\n        <div className=\"ListInfoItem-Right\" style={{color}}>\n            <div style={{color, fontSize: 18}}>{value}</div>\n            <div style={{color}}>{description}</div>\n        </div>\n    </div>\n);\n\nexport default ListInfoItem;\n","import React from 'react';\nimport \"./style.scss\";\n\n\nconst backgroundColor = 'rgba(255, 255, 255, 0.3)';\ntype PercentageBarProps = {\n    percentageLeft: number,\n    percentageDifference?: number,\n    color: string\n};\nconst PercentageBar: React.FC<PercentageBarProps> = ({\n    color, percentageLeft, percentageDifference = 0\n}) => (\n    <div className=\"PercentageBar\">\n        <div style={{ flexGrow: percentageLeft - percentageDifference, backgroundColor: color, height: 8 }}>\n\n        </div>\n        {\n            percentageDifference ? (\n                <div style={{\n                    flexGrow: percentageDifference, \n                    height: 8, \n                    background: `repeating-linear-gradient(\n                        -50deg,\n                        transparent,\n                        transparent 25%,\n                        ${color} 25%,\n                        ${color} 50%,\n                        transparent 50%\n                    ) top left fixed`,\n                    backgroundSize: '30px 30px'\n                }}/>\n            ) : null\n        }\n        <div style={{ flex: 100 - percentageLeft, backgroundColor }}>\n\n        </div>\n    </div>\n);\n\nexport default PercentageBar;","export const dayToMs = (day: number | null) => {\n    return day? day * 24 * 3600 * 1000 : null;\n}\n\nexport const msToDay = (ms: number | null) => {\n    return ms? ms / 24 / 3600 / 1000 : null;\n}\n\nexport const convertToFloat = (value: string | number) => {\n    return Number.parseFloat(value.toString());\n}\n\nexport const getDifferenceInDaysFromNow = (date: Date) => {\n    return Math.ceil(Math.abs(\n            (new Date().getDate() - new Date(date).getDate()) / (1000 * 3600 * 24)\n        ));\n}","import React from 'react';\nimport { Price } from '../../data/typedefs';\nimport { Icon } from '@material-ui/core';\nimport PercentageBar from '../../components/PercentageBar';\nimport { getDifferenceInDaysFromNow } from '../../utils';\nimport \"./style.scss\";\n\ntype ContainerCardProps = {\n    container: {\n        capacity: number;\n        amount: number;\n        datePurchased: Date;\n        expiryDate?: Date;\n        dateOpened?: Date;\n        price: Price;\n\n        opened: boolean;\n        expired: boolean;\n        percentageLeft: number;\n    },\n    unit: string,\n    onClick?: () => void;\n};\nconst ContainerCard : React.FC<ContainerCardProps> = ({\n    container: {\n        capacity, amount, datePurchased, expiryDate,\n        dateOpened, price, opened, expired, percentageLeft\n    },\n    unit, onClick\n}) => {\n    \n    const color = expired ? \"red\" : (opened ? \"orange\" : \"white\");\n    const containerIcon = expired ? \"delete_forever\" : \"kitchen\";\n\n    const expireDateString = () => {\n        if(!expiryDate) return \"\";\n        const daysDiff = getDifferenceInDaysFromNow(expiryDate);\n        if (expired) return `| Expired ${daysDiff} day(s) ago`;\n        else return `| Expire in ${daysDiff} days`;\n    };\n\n    return (\n        <div onClick={onClick} className={`ContainerCard-Container ContainerCard-Container-${color}`}>\n            <div className=\"ContainerCard-ContainerLeft\">\n                {getDifferenceInDaysFromNow(datePurchased)} days old\n                <Icon style={{color, fontSize: 32}}>{containerIcon}</Icon>\n                {price.amount} {price.currency}\n            </div>\n            <div className=\"ContainerCard-ContainerRight\">\n                <div className=\"ContainerCard-ContainerRightUp\">\n                    {percentageLeft.toFixed(2)}%\n                    <PercentageBar color={color} percentageLeft={percentageLeft} />\n                </div>\n                <div className=\"ContainerCard-ContainerRightBottom\">\n                    {\n                        dateOpened ? (\n                            <>\n                                <Icon>broken_image</Icon> \n                                <h6>{new Date(dateOpened).toLocaleDateString()}</h6>\n                            </>\n                        ) : (\n                            <>\n                                <Icon>check</Icon> \n                                <h6>Unopened</h6>\n                            </>\n                        )\n                    }\n                    <h6 style={{color}}>\n                        { expireDateString() }\n                    </h6>\n                    { /* Small buffer here */}\n                    <div className=\"ContainerCard-Amount\">\n                        {amount} {unit}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ContainerCard;","import React from 'react';\nimport AuxInfo, { AuxInfoProps } from './auxInfo';\nimport ListInfoItem, { ListInfoItemProps} from './listInfoItem';\nimport { Price } from '../../data/types';\nimport { useHeader } from '../Header';\nimport Routes from '../../routes';\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport ContainerCard from '../../components/ContainerCard';\n\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nimport \"./style.scss\";\n\nconst FOOD_DETAIL_QUERY = gql`\n    query foodDetails($food: String!) {\n        food(name: $food) @client {\n            name\n            unit\n            containers {\n                capacity\n                amount\n                datePurchased\n                expiryDate\n                dateOpened\n                price\n\n                expired\n                opened\n                percentageLeft\n            }\n            info {\n                numberOfContainers\n                expiredContainers\n                openedContainers\n                totalAmount\n                totalWorth\n                percentageLeft\n            }\n        }\n    }\n`;\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: [{\n        capacity: number,\n        amount: number,\n        datePurchased: Date,\n        expiryDate?: Date,\n        dateOpened?: Date,\n        price: Price,\n\n        expired: boolean,\n        opened: boolean,\n        percentageLeft: number\n    }],\n    info: {\n        numberOfContainers: number,\n        expiredContainers: number,\n        openedContainers: number,\n        totalAmount: number,\n        totalWorth: number,\n        percentageLeft: number\n    }\n}\nconst FoodDetailsPage: React.FC = () => {\n    const history  = useHistory();\n    const location = useLocation();\n    const { navOptions, setNavOptions } = useHeader();\n\n    const foodName = new URLSearchParams(location.search).get('food');\n    const { loading, error, data } = useQuery(FOOD_DETAIL_QUERY, {\n        variables: {\n            food: foodName\n        }\n    });\n\n    if(!foodName) history.goBack();\n\n    React.useEffect(() => {\n        setNavOptions({\n            ...navOptions,\n            title: foodName as string,\n            withBackButton: true,\n            navButtons: [{ \n                iconName: \"edit\", \n                onClick: () => history.push({\n                    pathname: Routes.FOOD_EDIT,\n                    search: `?food=${foodName}`\n                })\n            }]\n        });\n    }, []);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const food = data.food as QueryResultType;\n    // things to render under the main trendbar\n    const auxConfigs: AuxInfoProps[] = [\n        {\n            title: 'Total Amount',\n            iconName: 'kitchen',\n            value: `${food.info.totalAmount} ${food.unit}`\n        },\n        {\n            title: 'Worth',\n            iconName: 'money',\n            value: `${food.info.totalWorth}€`\n        },\n        {\n            title: \"Percentage Left\",\n            iconName: \"percentage\",\n            value: `${food.info.percentageLeft}%`\n        }\n    ];\n\n    const listInfoConfigs: ListInfoItemProps[] = [\n        {\n            color: 'white',\n            iconName: \"kitchen\",\n            description: \"Unopened Containers\",\n            value: (food.info.numberOfContainers - food.info.openedContainers).toString()\n        },\n        {\n            color: 'orange',\n            iconName:\"kitchen\",\n            description: \"Opened Containers\",\n            value: (food.info.openedContainers).toString()\n        },\n        {\n            color: 'red',\n            iconName:\"delete_forever\",\n            description: \"Expired Containers\",\n            value: (food.info.expiredContainers).toString()\n        }\n    ];\n\n    return (\n        <div className=\"FoodDetails-Container\">\n            {/*\n                Top section\n            */}\n             <div className=\"FoodDetails-TopSection\">\n                 <h6>Summary</h6>\n                 <div className=\"FoodDetails-TopSection-AuxInfoRow\">\n                     {\n                         auxConfigs.map(config => (\n                             <AuxInfo key={config.title} {...config} />\n                         ))\n                     }\n                 </div>\n                 {\n                     food.info.numberOfContainers > 0 && (\n                        <div className=\"FoodDetails-TopSection-LIstInfoRow\">\n                            {\n                                listInfoConfigs.map((config, i) => (\n                                    <ListInfoItem {...config} key={i} />\n                                ))\n                            }\n                        </div>\n                     )\n                 }\n             </div>\n\n             <div className=\"FoodDetails-BottomSection\">\n                <CenterNoticeSwitch \n                    watch={food.containers}\n                    iconName=\"kitchen\"\n                    title=\"No Containers\"\n                    subtitle=\"Use the buy food function to add containers of this food\"\n                >\n                    <>\n                        <h6>{food.info.numberOfContainers} Container(s) </h6>\n                        {\n                            food.containers.map(\n                                (container) => <ContainerCard container={container} unit={food.unit} />\n                            )\n                        }\n                    </>\n                </CenterNoticeSwitch>\n             </div>\n        </div>\n    )\n}\n\nexport default FoodDetailsPage;","import React from 'react';\nimport CenterNotice from '../../components/CenterNotice';\nimport { withHeader } from '../Header';\n\nconst ContainerPage: React.FC = () => {\n    return <CenterNotice iconName=\"work-outline\" title=\"Coming Soon!\" />\n};\n\nexport default withHeader(ContainerPage,{\n    title: \"Containers\",\n    navButtons: [\n        {\n            iconName: \"add\",\n            onClick: () => {}\n        }\n    ]\n});","import { \n    Food, FoodContainer, \n    Unit, Price,\n    BuyOrder,\n    ConsumeOrder \n} from './typedefs';\nimport md5 from 'blueimp-md5';\nimport { convertToFloat } from '../utils';\n\nexport const localStorageKey = 'db';\n\ninterface DataBaseType {\n    foods: Array<Food & {[key: string]: any}>\n};\n\nexport const initialDatabase : DataBaseType = {\n    foods: []\n};\n\nconst loadDatabase = () => {\n    const db = localStorage.getItem(localStorageKey);\n    if (!db) {\n        localStorage.setItem(localStorageKey, \n            JSON.stringify(initialDatabase));\n        return initialDatabase;\n    } else {\n        return JSON.parse(db) as DataBaseType;\n    }\n};\n\nconst saveDatabase = (newDb: DataBaseType) => {\n    return localStorage.setItem(localStorageKey, JSON.stringify(newDb));\n};\n\nconst resolvers = {\n    Query: {\n        food: (_: any, { name }: { name: string }) => {\n            const db = loadDatabase();\n            const food = db.foods.find(food => food.name === name);\n            return food;\n        },\n        foods: () => {\n            const db = loadDatabase();\n            return db.foods;\n        },\n    },\n    FoodContainer: {\n        datePurchased: (container: FoodContainer) => {\n            return new Date(container.datePurchased);\n        },\n        opened: (container: FoodContainer) => {\n           return !!container.dateOpened;\n        },\n        expired: (container: FoodContainer) => {\n            return (!!container.expiryDate) && \n                (new Date(container.expiryDate).getDate() < new Date().getDate());\n        },\n        percentageLeft: (container: FoodContainer) => {\n            return container.amount / container.capacity * 100;\n        }\n    },\n    Food: {\n        info: (food: Food) => {\n            const totalAmount = food.containers.reduce(\n                (sum, container) => sum + container.amount, 0\n            );\n            const totalCapacity = food.containers.reduce(\n                (sum, container) => sum + container.capacity, 0\n            );\n            \n            const expiredContainers = food.containers.filter(\n                container => container.expiryDate && new Date(container.expiryDate).getDate() < (new Date()).getDate()\n            ).length;\n\n            const openedContainers = food.containers.filter(\n                container => !!container.dateOpened\n            ).length;\n\n            const totalWorth = food.containers.reduce(\n                (sum, { price }) => sum + new Price(price.amount, price.currency).as(\"EUR\").amount, \n                0);\n            const numberOfContainers = food.containers.length;\n\n            const percentageLeft = (totalCapacity === 0) ? \n                0 : \n                totalAmount / totalCapacity * 100;\n            \n            return {\n                __typename: \"FoodInfo\",\n                numberOfContainers,\n                expiredContainers,\n                openedContainers,\n                totalAmount,\n                totalWorth,\n                percentageLeft,\n            };\n        }\n    },\n    Mutation: {\n        addFood: (_: any, { name, unit } : { name: string, unit: Unit}) => {\n            const db = loadDatabase();\n            db.foods.push({\n                __typename: \"Food\",\n                name, unit,\n                containers: [],\n            });\n\n            saveDatabase(db);\n        },\n\n        buyFood: (_: any, { buyOrders } : {buyOrders: BuyOrder[]}) => {\n            const db = loadDatabase();\n            const newFoodContainers : FoodContainer[] = [];\n            buyOrders.forEach(buyOrder => {\n                const { foodName: name, price, expiryDate, amount } = buyOrder;\n                \n                // locate the food this order is referring to\n                const foodId = db.foods.findIndex(food => food.name === name);\n                \n                // add food to the db if it is found\n                if (foodId > -1) {\n                    //@ts-ignore\n                    const container = {\n                        __typename: \"FoodContainer\",\n                        id: md5((new Date()).toString() + name + amount),\n                        capacity: convertToFloat(amount),\n                        amount: convertToFloat(amount),\n                        datePurchased: new Date(),\n                        expiryDate: expiryDate ? new Date(expiryDate) : null, \n                        dateOpened: null,\n                        price\n                    } as FoodContainer;\n\n                    db.foods[foodId].containers.push(container);\n                    newFoodContainers.push(container);\n                }\n            });\n\n            saveDatabase(db);\n            return newFoodContainers;\n        },\n        consumeFoods: (_: any, { consumeOrders }: {consumeOrders: ConsumeOrder[]}) => {\n            const db = loadDatabase();\n            let hasError = false;\n            consumeOrders.forEach(order => {\n                const { containerID, amount } = order;\n                const foodId = db.foods.findIndex(\n                    food => food.containers.find(con => con.id === containerID)\n                );\n\n                if (foodId < 0) {\n                    console.log(\"food id < 0\");\n                    hasError = true;\n                    return;\n                };\n                const containerIndex = db.foods[foodId]\n                    .containers\n                    .findIndex(con => con.id === containerID);\n                \n                // check if container is okay to deduct\n                const container = db.foods[foodId].containers[containerIndex] as FoodContainer;\n                if (container.amount < amount) {\n                    console.log('amount isnt right');\n                    hasError = true;\n                    return;\n                }\n\n                // apply the deduction\n                db.foods[foodId].containers[containerIndex].amount -= amount;\n                if (!db.foods[foodId].containers[containerIndex].dateOpened) {\n                    db.foods[foodId].containers[containerIndex].dateOpened = new Date();\n                }\n\n                // check if the container needs to be disposed\n                // you dispose a container if it is empty, or it has really really few food left.\n                const {amount: remainingAmount, capacity} = db.foods[foodId].containers[containerIndex];\n                if (remainingAmount / capacity < 0.01) {\n                    db.foods[foodId].containers = db.foods[foodId].containers.filter((_, i) => i !== containerIndex);\n                }\n            });\n\n            if (!hasError) {\n                saveDatabase(db);\n            }\n            return hasError ? \n                consumeOrders.map(({containerID}) => containerID) \n                : null;\n        }\n    }\n}\nexport default resolvers;\n","import React from 'react';\nimport { withHeader } from '../Header';\nimport \"./style.scss\";\nimport { toast } from 'react-toastify';\nimport { localStorageKey, initialDatabase } from '../../data/resolvers';\n\ntype ButtonWithDescriptionRowProps = {\n    title: string,\n    description: string,\n    buttonTitle: string,\n    onClick?: () => void\n}\nconst ButtonWithDescriptionRow: React.FC<ButtonWithDescriptionRowProps> = ({\n    title, description, buttonTitle, onClick \n}) => {\n    return (\n        <div className=\"Settings-DescriptionRow\">\n            <div className=\"Settings-DescriptionRowLeft\">\n                <div className=\"Settings-DescriptionRowTitle\">\n                    {title}\n                </div>\n                <div className=\"Settings-DescriptionRowDescription\">\n                    {description}\n                </div>\n            </div>\n            <div className=\"Settings-DescriptionRowRight\">\n                <div className=\"Settings-DescriptionRowButton\" onClick={onClick}>\n                    { buttonTitle }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst settingsConfig: ButtonWithDescriptionRowProps[] = [\n    {\n        title: \"Reset Database\",\n        description: \"Remove all data you have saved in the local storage. This can not be undone.\",\n        buttonTitle: \"Remove\",\n        onClick: () => {\n            window.localStorage.setItem(localStorageKey, JSON.stringify(initialDatabase));\n            toast.info(\"Database has been reset.\", {\n                autoClose: 3000,\n                onClose: () => window.location.reload()\n            });\n        }\n    },\n    {\n        title: \"Validate Database\",\n        description: \"Validate the values in the current database and try to correct it.\",\n        buttonTitle: \"Validate\"\n    },\n];\n\nconst SettingsPage: React.FC = () => {\n    return (\n        <div className=\"Settings-Container\">\n            {\n                settingsConfig.map((settings, i) => (\n                    <ButtonWithDescriptionRow \n                        key={i}\n                        {...settings}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default withHeader(SettingsPage, {\n    title: \"Settings\"\n});","import React from 'react';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport CenterNotice, { CenterNoticeSwitch} from '../CenterNotice';\nimport FoodCard from '../FoodCard';\nimport { FoodContainer } from '../../data/typedefs';\nimport \"./style.scss\";\n\nconst GET_FOOD_LIST = gql`\n    query {\n        foods @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                totalAmount\n                numberOfContainers   \n            }\n        }\n    }\n`;\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    }\n};\n\ntype FoodTypePickerProps = {\n    onFoodSelected: (food: string) => void\n    filterFood?: (food: QueryResultType) => boolean\n};\nconst FoodTypePicker: React.FC<FoodTypePickerProps> = ({\n    onFoodSelected, filterFood\n}) => {\n\n    const { loading, error, data, refetch } = useQuery(GET_FOOD_LIST);\n    \n    React.useEffect(() => {\n        refetch();\n    }, [onFoodSelected, refetch]);\n    \n    if (loading) {\n        return (\n            <CenterNotice iconName=\"hamburger\" title=\"Loading Food List...\" />\n        )\n    } else if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const foodOptions = data.foods as QueryResultType[];\n    const finalOptions = filterFood ? \n        foodOptions.filter(filterFood) \n        : foodOptions;\n    \n    return (\n        <div className=\"FoodTypePicker-Container\">\n            <CenterNoticeSwitch \n                watch={finalOptions} \n                iconName=\"hamburger\" title=\"No food available\"\n                subtitle=\"Add some food or buy some containers for them and try again.\"\n            >\n                {\n                    finalOptions.map(food => (\n                        <FoodCard {...food} onClick={() => onFoodSelected(food.name)} />\n                    ))\n                }\n            </CenterNoticeSwitch>\n        </div>\n    )\n};\n\nexport default FoodTypePicker;","import React from 'react';\nimport Form, { FormLayout, FormValueType } from '../../components/Form';\n\nimport Button from '../../components/Button';\nimport { BuyOrder, RawCurrency, FoodContainer } from '../../data/typedefs';\nimport FoodCard from '../../components/FoodCard';\nimport { gql } from \"@apollo/client\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Currency } from '../../data/types';\nimport StickyBox from 'react-sticky-box';\n\nconst FOOD_INFO_QUERY = gql`\n    query FoodInfo($name: String!) {\n        food(name: $name) @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                totalAmount\n                numberOfContainers\n            }\n        }\n    }\n`;\n\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n    style?: React.CSSProperties\n};\nconst FoodInfoSummaryComponent: React.FC<QueryResultType> = (props) => (\n    <div className=\"FoodQuantityInfo-Summary\">\n        <p>You are buying:</p>\n        <FoodCard {...props} />\n    </div>\n);\n\nconst formLayout: FormLayout = [\n    [\n        {\n            label: \"Container Capcity\", type: \"number\",\n            name: \"amount\", placeholder: \"Amount\", iconName:\"local_mall\",\n            required: true, flex: 2,\n            validate: value => !!(value && value > 0)\n        },\n        {\n            label: \"# Containers\", type: \"number\",\n            name: \"containerCount\", iconName: \"kitchen\",\n            required: true, flex: 1,\n            validate: value => !!(value && value > 0)\n        }\n    ],\n    [\n        {\n            label: \"Price\", type: \"number\",\n            name: \"price\", iconName: \"local_atm\",\n            required: true,\n            validate: value => !!(value && value > 0),\n            flex: 2\n        },\n        {\n            label: \"Currency\", type: \"select\",\n            name: \"currency\", iconName: \"euro\",\n            flex: 1,\n            options: Object.values(RawCurrency)\n        }\n    ],\n    [\n        {\n            label: \"Price is for...\", type: \"select\",\n            name: \"priceType\", iconName: \"live_help\",\n            options: [\"Each Container\", \"All Containers\"],\n        }\n    ],\n    [\n        {\n            label: \"Expiry Date\", type: \"date\",\n            name: \"expiryDate\", iconName: \"calendar\"\n        }\n    ]\n];\n\nconst computeDisabledFields = (form: FormValueType) => {\n    if((form.containerCount as number) <= 1) {\n        return [\"priceType\"];\n    }\n\n    return [];\n}\ntype FormType = {\n    amount: number,\n    price: number,\n    currency: Currency,\n    containerCount: number,\n    priceType: \"Each Container\" | \"All Containers\",\n    expiryDate: Date | null,\n}\n\nconst initialValue: FormType = {\n    amount: 0,\n    price: 0,\n    currency: \"EUR\",\n    containerCount: 1,\n    priceType: \"All Containers\",\n    expiryDate: null\n}\n\ntype FoodQuantityInfoProps = {\n    food: string | null,\n    onPreviousStepRequested: () => void,\n    onInfoProvided: (order: BuyOrder[]) => void\n};\nconst FoodQuantityInfoComponent: React.FC<FoodQuantityInfoProps> = ({\n    food,\n    onPreviousStepRequested,\n    onInfoProvided,\n}) => {\n    const [ form, setFormValue ] = React.useState(initialValue);\n\n    const { data, loading } = useQuery(FOOD_INFO_QUERY, {\n        variables: {\n            name: food\n        }\n    });\n    if (loading) return null;\n\n    const onSave = () => {\n        const {\n            amount, price, currency, containerCount, priceType, expiryDate\n        } = form;\n        \n        const buyOrders = Array(containerCount).fill({\n            amount, \n            price: {\n                currency, \n                amount: (priceType === \"All Containers\") ? \n                    price / containerCount : price\n            },\n            foodName: food as string,\n            expiryDate\n        } as BuyOrder);\n\n        onInfoProvided(buyOrders);\n    };\n    return (\n        <div className=\"FoodQuantityInfo-Container\">\n            { !loading && (\n                <StickyBox offsetTop={-16}>\n                    <FoodInfoSummaryComponent \n                        {...data.food as QueryResultType}\n                    />\n                </StickyBox>\n            )}\n            \n            <div className=\"FoodQuantityInfo-Form\">\n                <Form withSubmitButton={false} layout={formLayout}\n                    initialValue={initialValue}\n                    setFormValue={setFormValue as (form: FormValueType) => void}\n                    disabledFields={computeDisabledFields}\n                    />\n            </div>\n            <div className=\"FoodQuantityInfo-ButtonRow\">\n                <Button title=\"Previous\" icon=\"navigate_before\" color=\"secondary\" onClick={onPreviousStepRequested} />\n                <Button title=\"Next\" icon=\"save\" color=\"info\" onClick={onSave} />\n            </div>\n        </div>\n    )\n};\n\nexport default FoodQuantityInfoComponent;","import React from 'react'\nimport { range } from 'lodash';\nimport \"./style.scss\";\n\ntype StepIndicatorProps = {\n    step: number,\n    totalSteps: number\n};\ntype StepComponentProps = {\n    i: number,\n    status: \"passed\" | \"ongoing\" | \"pending\"\n};\nconst StepIndicator: React.FC<StepIndicatorProps> = ({\n    step, totalSteps\n}) => { \n    const StepComponent: React.FC<StepComponentProps> = ({ i, status }) => (\n        <div className={`StepIndicator-StepComponent StepIndicator-StepComponent-${status}`}>\n            <div className=\"StepIndicator-Line\" />\n            <div className=\"StepIndicator-Center\">\n                {i + 1}\n            </div>\n            <div className=\"StepIndicator-Line\" />\n        </div>\n    );\n\n    const getStatusFromStep = (i: number) => {\n        if (i < step) return \"passed\";\n        else if (i === step) return \"ongoing\";\n        else return \"pending\";\n    }\n    return (\n        <div className=\"StepIndicator-Container\">\n            {\n                range(totalSteps).map(i => (\n                    <StepComponent i={i} status={getStatusFromStep(i)} />\n                ))\n            }\n        </div>\n\n    )\n};\n\nexport default StepIndicator;","import React from 'react';\nimport StepIndicator from './StepIndicator';\nimport { Icon } from \"@material-ui/core\";\nimport \"./style.scss\";\n\ntype WizardProps = {\n    open: boolean;\n    requestClose: () => void;\n    style?: object;\n    children: (step: number, toStep: (step: number) => void) => React.ReactNode;\n    headerTitle: (step: number) => string;\n}\nconst Wizard: React.FC<WizardProps> = ({\n    open, requestClose, children, style, headerTitle\n}) => {\n    const [step, setStep] = React.useState(0);\n    \n    React.useEffect(() => {\n        setStep(0);\n    }, [open]);\n\n    if(!open) return null;\n    \n    return (\n        <div className=\"Wizard-Container\" style={style}>\n            <div className=\"Wizard-Header\">\n                <div className=\"Header\">\n                    <div>\n                        <Icon style={{fontSize: 32}} onClick={requestClose}>\n                            navigate_before\n                        </Icon>\n                    </div>\n                    <div className=\"Header-NavButtonGroup\">\n                        { headerTitle(step) }\n                    </div>\n                </div>\n            </div>\n            <StepIndicator step={step} totalSteps={3} />\n            <div className=\"Wizard-Content\">\n                { children(step, setStep) }\n            </div>\n        </div>\n    );\n};\n\nexport default Wizard;","import React from 'react';\nimport { BuyOrder } from '../../data/typedefs';\nimport FoodTypePicker from \"../../components/FoodTypePicker\";\nimport FoodQuantityInfo from \"./FoodQuantityInfo\";\nimport Button from '../../components/Button';\nimport CenterNotice from '../../components/CenterNotice';\nimport Wizard from '../../components/Wizard';\nimport \"./style.scss\";\n\ntype SelectFoodPopupProps = {\n    open: boolean;\n    requestClose: () => void;\n    onBuyOrdersAdded: (orders: BuyOrder[]) => void;\n    style?: object;\n};\nconst SelectFoodPopup: React.FC<SelectFoodPopupProps> = ({\n    open, requestClose, style, onBuyOrdersAdded\n}) => {\n    // number of steps the picker is picking\n    // const [step, setStep] = React.useState(0);\n\n    const [selectedFood, setSelectedFood] = React.useState(null as string | null);\n   \n    React.useEffect(() => {\n        // setStep(0);\n        setSelectedFood(null);\n    }, [open]);\n\n    if (!open)return null;\n\n    const headerTitle = (step: number) => {\n        switch (step) {\n            case 0:\n                return \"Select Food\";\n            case 1:\n                return \"Fill in Info\";\n            case 2:\n                return \"Success\";\n            default:\n                return \"\";\n        }\n    };\n\n    const popupContent = (\n        step: number, \n        setStep: (step: number) => void\n    ) => {\n        switch(step) {\n            case 0:\n                return (\n                    <FoodTypePicker \n                        onFoodSelected={food => {setSelectedFood(food); setStep(1)}} \n                    />\n                );\n            case 1:\n                return (\n                    <FoodQuantityInfo\n                        food={selectedFood}\n                        onPreviousStepRequested={() => setStep(0)}\n                        onInfoProvided={(order: BuyOrder[]) => {\n                            onBuyOrdersAdded(order)\n                            setStep(2)\n                        }}\n                    />\n                );\n            case 2:\n                return (\n                    <>\n                        <CenterNotice iconName=\"check_circle_outline\" title=\"Food added to basket\"\n                            subtitle=\"You can choose 'Buy again' to add more, or 'Close' to review your basket\" \n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Close\" icon=\"close\" color=\"secondary\" onClick={requestClose} />\n                            <Button title=\"Buy Again\" icon=\"refresh\" color=\"info\" onClick={() => setStep(0)} />\n                        </div>\n                    </>\n                )\n            default:\n                return null;\n        }\n    }\n    return (\n        <Wizard \n            open={open} \n            requestClose={requestClose}\n            headerTitle={headerTitle} \n            style={style}>\n            { popupContent }\n        </Wizard>\n    );\n};\n\nexport default SelectFoodPopup;","import React from 'react';\nimport GenericCard, { GenericCardExtraProps } from '../../components/GenericCard';\nimport { BuyOrder } from '../../data/typedefs';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst FOOD_QUERY = gql`\n    query GetFood($name: String!) {\n        food(name: $name) @client {\n            unit\n        }\n    }\n`;\ntype PendingOrderCardProps = GenericCardExtraProps & {\n    order: BuyOrder\n};\n\nconst PendingOrderCard: React.FC<PendingOrderCardProps> = ({\n    order, ...props\n}) => {\n    const { foodName, amount: addAmount, expiryDate } = order;\n\n    const { loading, data, error } = useQuery(FOOD_QUERY, {\n        variables: { name: foodName }\n    });\n    \n    if (error) {\n        alert(error.message);\n        return null;\n    }   \n    if(loading) return null;\n    return (\n        <GenericCard \n            mainText={foodName}\n            smallComponent={expiryDate ? expiryDate.toLocaleString(\"en-US\") : \"No expiry date\"}\n            rightComponent={<div>{`${addAmount} ${data.food.unit}`}</div>}\n            {...props}\n        />\n    )   \n};\n\nexport default PendingOrderCard;","import React from 'react';\nimport { BuyOrder, Price } from '../../data/typedefs';\n\ntype PendingInfoSummaryProps = {\n    orders: BuyOrder[]\n}\nconst PendingInfoSummary: React.FC<PendingInfoSummaryProps> = ({\n    orders\n}) => {\n    if (orders.length === 0) return null;\n\n    // compute info\n    const totalAmount = orders.reduce((total, order) => (\n        new Price(order.price.amount, order.price.currency)\n            .as(\"EUR\")\n            .add(total)\n    ), new Price(0, \"EUR\"));\n\n    const numDifferentFoods = Array.from(\n        new Set(orders.map(order => order.foodName)).values()\n    ).length;\n    const numContainers = orders.length;\n\n    return (\n        <div className=\"BuyPage-SummaryRow\">\n            <div className=\"BuyPage-SummaryRow-Left\"/>\n            <div className=\"BuyPage-SummaryRow-Total\">\n                <div>{ numContainers } Container(s)</div>\n                <div>\n                { numDifferentFoods } Different food\n                </div>\n                <div className=\"BuyPage-SummaryRow-Sum\">\n                    Total: {totalAmount.amount.toFixed(2)} EUR\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PendingInfoSummary;","import React from 'react';\nimport SelectFoodPopup from './SelectFoodPopup';\n\nimport Button from '../../components/Button';\nimport { BuyOrder } from '../../data/typedefs';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport PendingOrderCard from './PendingOrderCard';\nimport PendingInfoSummary from './PendingInfoSummary';\nimport { useHeader } from '../Header';\n\nimport { gql } from '@apollo/client';\nimport { useMutation } from '@apollo/react-hooks';\nimport { toast } from 'react-toastify';\nimport \"./style.scss\";\n\nconst ADD_ORDERS = gql`\n    mutation buyFoods($orders: [BuyOrder]!) {\n        buyFood(buyOrders: $orders) @client {\n            id\n        }\n    }\n`;\n\nconst BuyPage: React.FC = () => {\n    const [ openSelectPopup, setOpenSelectPopup] = React.useState(false);\n    const [ pendingBuyOrders, setPendingBuyOrders ] = React.useState([] as BuyOrder[]);\n    \n    const { setNavOptions } = useHeader();\n    React.useEffect(() => {\n        setNavOptions({\n            title: \"Buy\",\n            navButtons: [\n                {\n                    iconName: \"add\",\n                    onClick: () => setOpenSelectPopup(true)\n                }\n            ]\n        });\n    }, []);\n\n    const [ buyFoodFunc ] = useMutation(ADD_ORDERS);\n\n    // handler of the final buy button\n    const onSubmitBuyOrders = () => {\n        buyFoodFunc({\n            variables: { orders: pendingBuyOrders}\n        });\n        toast.success(\"Items bought\", {\n            autoClose: 3000,\n            onClose: () => {\n                setOpenSelectPopup(false);\n                setPendingBuyOrders([]);\n            }\n        });\n    };\n\n    return (\n        <>\n            <SelectFoodPopup \n                open={openSelectPopup} \n                requestClose={() => setOpenSelectPopup(false)}\n                onBuyOrdersAdded={orders => setPendingBuyOrders([...pendingBuyOrders, ...orders])}\n            />\n            <div className=\"BuyPage-Main\">\n                <CenterNoticeSwitch watch={pendingBuyOrders} \n                    iconName=\"shopping_cart\" \n                    title=\"Nothing to buy yet\"\n                    subtitle=\"Click the '+' button above to add a new item\">\n                    <>\n                        {\n                            pendingBuyOrders.map((order, i) => (\n                                <PendingOrderCard order={order} \n                                    actionButton={{\n                                        iconName: 'cancel',\n                                        onClick: () => setPendingBuyOrders(\n                                            // remove this order from the list of pending orders\n                                            pendingBuyOrders.filter((_, j) => i !== j)\n                                        )\n                                    }}\n                                />\n                            ))\n                        }\n                        {\n                            !openSelectPopup && (\n                                <PendingInfoSummary orders={pendingBuyOrders} />\n                            )\n                        }\n                        <Button \n                            disabled={pendingBuyOrders.length === 0} \n                            title=\"Buy\" color=\"info\" icon=\"shopping_cart\" \n                            onClick={onSubmitBuyOrders} \n                        />\n                    </>\n                </CenterNoticeSwitch>\n            </div>\n            \n        </>\n    );\n}\n\nexport default BuyPage;","import React from 'react';\nimport Form, { FormLayout } from '../../components/Form';\n\nconst AmountInterpretationType = {\n    \"Amount Used\": 0,\n    \"Amount Left\": 1,\n    \"Percentage Left\": 2,\n    \"All\": 3\n};\n\ntype FormValueType = {\n    amount: number;\n    interpretationType: keyof typeof AmountInterpretationType;\n};\n\nconst formLayout: FormLayout = [\n    [{\n        name: \"amount\",\n        label: \"Amount\",\n        type: \"number\",\n        iconName: \"fitness_center\"\n    }],\n    [{\n        name: \"interpretationType\",\n        label: \"Interpret amount as...\",\n        type: \"select\",\n        options: Object.keys(AmountInterpretationType),\n        iconName: \"comment\"\n    }]\n];\n\ntype AmountInputProps = {\n    unit: string;\n    amount: number;\n    capacity: number;\n    onAmountChosen: (amount: number) => void\n}\nconst AmountInput: React.FC<AmountInputProps> = ({\n    amount, capacity, onAmountChosen, unit\n}) => {\n    const initialFormValue: FormValueType = {\n        amount: 0,\n        //@ts-ignore\n        interpretationType: Object.keys(AmountInterpretationType)[0]\n    }\n    const [form, setForm] = React.useState(initialFormValue);\n\n    // derived properties\n    const realValue = (() => {\n        const type = AmountInterpretationType[form.interpretationType];\n        switch(type) {\n            case 0:\n                return form.amount;\n            case 1:\n                return capacity - form.amount;\n            case 2:\n                return parseFloat((amount - capacity * (form.amount / 100)).toFixed(2));\n            default:\n                return amount;\n        }\n    })();\n\n    const percentLeft = (amount - realValue) / capacity * 100;\n\n    // report new amount when values changed\n    React.useEffect(() => {\n        onAmountChosen(realValue);\n    }, [realValue, onAmountChosen]);\n\n    return (\n        <div className=\"AmountInput-Container\">\n            <Form \n                initialValue={initialFormValue}\n                layout={formLayout}\n                withSubmitButton={false}\n                submitIconName=\"check\"\n                submitButtonText=\"Consume\"\n                setFormValue={form => setForm(form as FormValueType)}\n            />\n            <div className=\"AmountInput-Summary\">\n                Remaining: {'  '}\n                <div className=\"AmountInput-SummaryText\">\n                    {(amount - realValue).toFixed(2)} {unit} ({percentLeft.toFixed(1)} %)\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AmountInput;","import React from 'react';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport { FoodContainer, Price } from '../../data/typedefs';\nimport ContainerCard from '../../components/ContainerCard';\nimport FoodCard from '../../components/FoodCard';\nimport Button from '../../components/Button';\nimport AmountInput from './AmountInput';\nimport StickyBox from 'react-sticky-box';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nconst CONTAINER_QUERY = gql`\n    query getContainersForFood($food: String!) {\n        food(name: $food) @client {\n            name\n            unit\n            info {\n                totalAmount\n                numberOfContainers\n            }\n\n            containers {\n                id\n                capacity\n                amount\n                datePurchased\n                expiryDate\n                dateOpened\n                price\n\n                opened\n                expired\n                percentageLeft\n            }\n        }\n    }\n`;\n\ntype QueryResultType = {\n    // FoodCard props\n    name: string,\n    unit: string,\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n\n    // Containers list props\n    containers: [{\n        id: string;\n        capacity: number;\n        amount: number;\n        datePurchased: Date;\n        expiryDate?: Date;\n        dateOpened?: Date;\n        price: Price;\n\n        opened: boolean;\n        expired: boolean;\n        percentageLeft: number;\n    }]\n};\n\ntype ContainerPickerProps = {\n    food: string | null;\n    onToPreviousPage: () => void;\n    onSelectContainer: (container: FoodContainer, amount: number) => void;\n};\n\nconst ContainerPicker: React.FC<ContainerPickerProps> = ({\n    food: foodName, onSelectContainer, onToPreviousPage\n}) => {\n    \n    const { loading, error, data, refetch } = useQuery(CONTAINER_QUERY, {\n        variables: {\n            food: foodName\n        }\n    });\n\n    const [containerInd, setContainerInd] = React.useState(0);\n    const [amountUsed, setAmountUsed] = React.useState(0);\n\n    React.useEffect(() => {\n        if (foodName) {\n            refetch({\n                food: foodName\n            });\n        }\n        setContainerInd(0);\n    }, [foodName]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const food = data.food as QueryResultType;\n\n    const {\n        name, unit, containers, info\n    } = food;\n\n    const selectedContainer = containers[containerInd];\n\n    const onConfirmInfo = () => {\n        onSelectContainer(selectedContainer, amountUsed);\n    };\n\n    const isAmountValid = () => {\n        if(!selectedContainer) return false;\n        return amountUsed > 0 && amountUsed <= selectedContainer.amount;\n    }\n\n    return (\n        <div className=\"ContainerPicker-Container\">\n            <StickyBox offsetTop={-8}>\n                <div style={{paddingTop: 8}}>\n                    Selecting containers for:\n                    <FoodCard \n                        name={name} unit={unit} \n                        containers={containers as unknown as FoodContainer[]} \n                        info={info} />\n                </div>\n            </StickyBox>\n            Container #{containerInd + 1} of {containers.length}\n            <div style={{paddingLeft: 24, paddingRight: 24}}>\n                <Slider dots infinite={false} \n                    afterChange={containerId => setContainerInd(containerId)}>\n                    {\n                        food.containers.map(\n                            (container, i) => (<ContainerCard\n                                key={i} \n                                container={container} \n                                unit={food.unit} \n                            />)\n                        )\n                    }\n                </Slider>\n            </div> \n            <div className=\"ContainerPicker-AmountInputContainer\">\n                {\n                    selectedContainer && (\n                        <AmountInput\n                            unit={food.unit}\n                            amount={selectedContainer.amount} \n                            capacity={selectedContainer.capacity}\n                            onAmountChosen={amount => setAmountUsed(amount)}\n                        />\n                    )\n                }\n            </div>\n            <div className=\"ContainerPicker-ButtonRow\">\n                <Button title=\"Previous\" icon=\"refresh\" color=\"secondary\"\n                    onClick={onToPreviousPage} \n                />\n                <Button title=\"Confirm\"  icon=\"check\" \n                    color=\"info\"\n                    disabled={!isAmountValid()}\n                    onClick={onConfirmInfo}\n                />\n            </div>\n        </div>\n    );\n    \n}\n\nexport default ContainerPicker;\n","import React from 'react';\nimport Wizard from '../../components/Wizard';\nimport FoodTypePicker from '../../components/FoodTypePicker';\nimport Button from '../../components/Button';\nimport ContainerPicker from './ContainerPicker';\nimport CenterNotice from '../../components/CenterNotice';\n\nimport { FoodContainer } from '../../data/typedefs';\n\nexport type PendingConsumeOrder = {\n    food: string,\n    container: FoodContainer,\n    amount: number\n}\n\ntype SelectFoodPopupProps = {\n    open: boolean;\n    requestClose: () => void;\n    onConsumeOrderAdded: (order: PendingConsumeOrder) => void;\n}\n\nconst SelectFoodPopup: React.FC<SelectFoodPopupProps> = ({\n    open, requestClose, onConsumeOrderAdded\n}) => {\n    const [selectedFood, setSelectedFood] = React.useState(null as string | null);\n    \n    const headerTitle = (step: number) => {\n        switch(step) {\n            case 0:\n                return \"Select Food\";\n            case 1:\n                return \"Select Container\";\n            case 2:\n                return \"Success\";\n            default:\n                return \"\";\n        }\n    };\n\n    const reportConsumeOrder = (container: FoodContainer, amount: number) => {\n        onConsumeOrderAdded({\n            food: selectedFood as string,\n            container,\n            amount\n        });\n    };\n\n    const popupContent = (\n        step: number,\n        setStep: (step: number) => void\n    ) => {\n        switch(step) {\n            case 0:\n                return (\n                    <FoodTypePicker\n                        filterFood={food => food.containers.length > 0} \n                        onFoodSelected={food => {setSelectedFood(food); setStep(1)}} \n                    />\n                );\n            case 1:\n                return (\n                    <ContainerPicker \n                        food={selectedFood}\n                        onToPreviousPage={() => setStep(0)}\n                        onSelectContainer={(container, amount) => {\n                            reportConsumeOrder(container, amount); \n                            setStep(2);\n                        }}\n                    />\n                );\n            case 2:\n                return (\n                    <>\n                        <CenterNotice iconName=\"check_circle_outline\" title=\"Record added\"\n                            subtitle=\"You can choose 'Add Another' to add another record, or 'Close' to review your consumption order.\" \n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Close\" icon=\"close\" color=\"secondary\" onClick={requestClose} />\n                            <Button title=\"Add Another\" icon=\"refresh\" color=\"info\" onClick={() => setStep(0)} />\n                        </div>\n                    </>\n                )\n            default: \n                return null;\n        }\n    }\n\n    return (\n        <Wizard \n            open={open} \n            requestClose={requestClose}\n            headerTitle={headerTitle}>\n                {popupContent}\n        </Wizard>\n    );\n};\n\nexport default SelectFoodPopup;\n","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport GenericCard from '../../components/GenericCard';\nimport PercentageBar from '../../components/PercentageBar';\nimport { Food, FoodContainer } from '../../data/typedefs';\nimport { PendingConsumeOrder } from './SelectFoodPopup';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst UNIT_QUERY = gql`\n    query getUnit($food: String!) {\n        food(name: $food) @client {\n            unit\n        }\n    }\n`;\ntype PendingConsumptionCardProps = PendingConsumeOrder & {\n    onRemove: () => void\n};\n\nconst PendingConsumptionCard: React.FC<PendingConsumptionCardProps> = ({\n    food, container, amount, onRemove\n}) => {\n    const { loading, error, data, refetch } = useQuery(UNIT_QUERY);\n    \n    React.useEffect(() => {\n        refetch({ food });\n    }, [food]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const { unit } : { unit: string } = data.food;\n    const RightComponent = (\n        <div className=\"PendingConsumptionCard-Right\">\n            -{ amount } { unit }\n        </div>\n    );\n    const originalPercentage = parseFloat(\n        ((container.amount / container.capacity) * 100).toFixed(2)\n    );\n\n    const consumedPercentage = parseFloat(\n        (amount / container.capacity * 100).toFixed(2)\n    );\n    const AuxComponent = (\n        <div className=\"PendingConsumptionCard-SmallComponent\">\n            <div>\n                {originalPercentage}% <Icon>arrow_right</Icon> {originalPercentage - consumedPercentage}%\n            </div>\n            <PercentageBar \n                color=\"orange\"\n                percentageLeft={originalPercentage}\n                percentageDifference={consumedPercentage} \n            />\n            {\n                (originalPercentage - consumedPercentage) < 1 && (\n                    <div className=\"PendingConsumptionCard-DisposeLabel\">\n                        To be disposed\n                    </div>\n                )\n            }\n        </div>\n    );\n\n    return (\n        <GenericCard \n            mainText={food}\n            rightComponent={RightComponent}\n            smallComponent={AuxComponent}\n            actionButton={{\n                iconName: \"highlight_off\",\n                onClick: onRemove\n            }}\n        />\n    );\n};\n\nexport default PendingConsumptionCard;","import React from 'react';\nimport { useHeader } from '../Header';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport Button from '../../components/Button';\nimport SelectFoodPopup, { PendingConsumeOrder } from './SelectFoodPopup';\nimport PendingConsumptionCard from './PendingConsumptionCard';\nimport { gql } from '@apollo/client';\nimport { useMutation } from '@apollo/react-hooks';\nimport { toast } from 'react-toastify';\nimport \"./style.scss\";\n\nconst CONSUME_ORDERS = gql`\n    mutation consumeFoods($orders: [ConsumeOrder]!) {\n        consumeFoods(consumeOrders: $orders) @client {\n            id\n        }\n    }\n`;\n\nconst ConsumePage: React.FC = () => {\n    const [ openSelectPopup, setOpenSelectPopup ] = React.useState(false);\n    const [ submitConsumeOrders ] = useMutation(CONSUME_ORDERS);\n    const [ \n        pendingConsumeOrders, \n        setPendingConsumeOrders \n    ] = React.useState([] as PendingConsumeOrder[]);\n\n    const { setNavOptions } = useHeader();\n\n    React.useEffect(() => {\n        setNavOptions({\n            title: \"Consume Food\",\n            navButtons: [{\n                iconName: \"add\",\n                onClick: () => setOpenSelectPopup(true)\n            }]\n        });\n    }, []);\n    return (\n        <>\n            <SelectFoodPopup \n                open={openSelectPopup}\n                requestClose={() => setOpenSelectPopup(false)}\n                onConsumeOrderAdded={(order) => setPendingConsumeOrders([\n                    ...pendingConsumeOrders,\n                    order\n                ])}\n            />\n            <CenterNoticeSwitch \n                watch={pendingConsumeOrders}\n                iconName=\"whatshot\"\n                title=\"No Items added\"\n                subtitle=\"Use the '+' button above to add containers to consume.\"\n            >\n                <>\n                    <div className=\"PendingConsumption-Container\">\n                        {\n                            pendingConsumeOrders.map(\n                                (order, i) => (\n                                    <PendingConsumptionCard \n                                        {...order}\n                                        onRemove={() => setPendingConsumeOrders(\n                                            pendingConsumeOrders.filter((_, j) => i !== j)\n                                        )}\n                                    />\n                                )\n                            )\n                        }\n                    </div>\n                    <Button color=\"info\"\n                        onClick={() => {\n                            submitConsumeOrders({\n                                variables: {\n                                    orders: pendingConsumeOrders.map(order => ({\n                                        __typename: \"ConsumeOrder\",\n                                        containerID: order.container.id,\n                                        amount: order.amount\n                                    }))\n                                }\n                            });\n                            toast.success(\"Records saved...\", {\n                                autoClose: 3000,\n                                onClose: () => {\n                                    // reset the form\n                                    setPendingConsumeOrders([]);\n                                }\n                            });\n                        }}\n                        disabled={pendingConsumeOrders.length === 0}\n                        title=\"Consume\" icon=\"whatshot\" \n                    />\n                </>\n            </CenterNoticeSwitch>\n        </>\n    );\n}\n\nexport default ConsumePage;","import { createStore, Reducer } from 'redux';\nimport { Food, FoodContainer, Price } from '../data/types';\n\nexport type State = {\n    foods: Array<Food>,\n};\n\nexport type ActionTypes = \"ADD_FOOD\"\n    | \"EDIT_FOOD\"\n    | \"BUY_FOOD\"\n    | \"CONSUME_FOOD\";\n\n\nexport type Action = {\n    type: ActionTypes,\n    data: Food | BuyFoodOrder | EditFoodOption\n}\n\nexport type EditFoodOption = {\n    foodID: string,\n    food: Food\n}\nexport type BuyFoodOrder = {\n    foodID: string,\n    quantity: number,\n    price: Price,\n    expiryDate?: Date\n}\n\nconst initialState: State = { \n    foods: [] \n};\n\nconst rootReducers: Reducer<State, Action> = (state: State = initialState, action: Action) => {\n    switch(action.type) {\n        case \"ADD_FOOD\": {\n            const newFood = action.data as Food;\n            return {...state, foods: [...state.foods, newFood]};\n        }\n\n        case \"BUY_FOOD\": {\n            const { foodID, quantity, price, expiryDate } = action.data as BuyFoodOrder;\n            const newState = {...state};\n            const food = newState.foods.find(food => food.id === foodID);\n\n            if(!food) return state;\n            food.buy(quantity, price, expiryDate);\n\n            return newState;\n        }\n        case \"EDIT_FOOD\": {\n            const { foodID, food } = action.data as EditFoodOption;\n            const newState = {\n                ...state,\n                // get all food and map them as-is,\n                // except fot the one with the same ID, update the info\n                foods: state.foods.map(\n                    f => {\n                        if (foodID !== f.id) return f;\n                        else {\n                            f.updateInfo(\n                                food.name,\n                                food.unit,\n                                food.latestTimeToConsumeAfterFirstOpen\n                            );\n                            return f;\n                        }\n                    } \n                )\n            };\n            return newState;\n        }\n\n        case \"CONSUME_FOOD\":\n        default: \n            return state;\n    }\n}\n\nexport default createStore(rootReducers);","import { typeDefs } from \"./typedefs\";\nimport resolvers from './resolvers';\n\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n    typeDefs,\n    resolvers\n});\n\nexport default client;\n","import React from 'react';\nimport Playground from './components/playground';\nimport {\n  HashRouter, Switch, Route, Redirect, useLocation, BrowserRouter\n} from 'react-router-dom';\nimport history from './history';\nimport NavBar from './pages/Navbar';\nimport  { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// pages\nimport FoodPage from './pages/Food';\nimport CreateFoodPage from './pages/CreateFood';\nimport FoodDetailsPage from './pages/FoodDetails';\nimport ContainerPage from './pages/Container';\nimport SettingsPage from './pages/Settings';\nimport BuyPage from './pages/Buy';\nimport ConsumePage from './pages/Consume';\n\nimport store from './reducers';\nimport  {Provider} from 'react-redux';\nimport Routes, { PageNames } from './routes';\nimport { HeaderContainer } from './pages/Header';\n\nimport client from './data/graphql';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n\nimport './App.scss';\n\nconst RouteSwitch: React.FC = () => {\n  const query = new URLSearchParams(useLocation().search);\n  console.log(query.get('page'));\n  switch(query.get('page')) {\n    case PageNames.FOOD_LIST:\n      return <FoodPage />\n    case PageNames.FOOD_EDIT:\n    case PageNames.FOOD_ADD:\n      return <CreateFoodPage />\n    case PageNames.CONTAINERS_LIST:\n      return <ContainerPage />\n    case PageNames.FOOD_DETAILS:\n      return <FoodDetailsPage />\n    case PageNames.BUY_FOOD:\n      return <BuyPage />\n    case PageNames.CONSUME:\n      return <ConsumePage />\n    case PageNames.SETTINGS:\n      return <SettingsPage />\n    default:\n      return null;\n  }\n}\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Provider store={store}>\n            <BrowserRouter basename=\"/Inventory-v2\">\n                <HeaderContainer>\n                  <div className=\"Page\">\n                    <Switch>\n                      <Route path={Routes.HOME} component={RouteSwitch} />\n                      {\n                        /*\n                          <Route path={Routes.FOOD_LIST} component={FoodPage} />\n                          <Route path={Routes.FOOD_ADD} component={CreateFoodPage} />\n                          <Route path={Routes.FOOD_EDIT} component={CreateFoodPage} exact />\n                          <Route path={Routes.CONTAINERS_LIST} component={ContainerPage} exact />\n                          <Route path={Routes.FOOD_DETAILS} component={FoodDetailsPage} exact />\n      \n                          <Route path={Routes.BUY_FOOD} component={BuyPage} exact />\n                          <Route path={Routes.CONSUME} component={ConsumePage} exact />\n                          \n                          <Route path={Routes.SETTINGS} component={SettingsPage} exact />\n    \n                          // <Route path={Routes.HOME} component={() => <Redirect to={Routes.FOOD_LIST} />} />\n                        */\n                      }\n                    </Switch>\n                  </div>\n                </HeaderContainer>\n                <ToastContainer />\n                <NavBar />\n            </BrowserRouter>\n        </Provider>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}