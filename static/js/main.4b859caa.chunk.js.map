{"version":3,"sources":["routes.ts","history.ts","pages/Navbar/NavIcon.tsx","pages/Navbar/index.tsx","components/GenericCard/index.tsx","utils.ts","components/FoodCard/ContainerOverview.tsx","components/FoodCard/index.tsx","pages/Header/index.tsx","components/Input/ChipSelect/index.tsx","components/Input/index.tsx","components/CenterNotice/index.tsx","components/SearchList/index.tsx","pages/Food/index.tsx","data/typedefs.ts","components/Button/index.tsx","components/Form/index.tsx","pages/CreateFood/index.tsx","pages/EditFood/index.tsx","pages/FoodDetails/auxInfo.tsx","pages/FoodDetails/listInfoItem.tsx","components/PercentageBar/index.tsx","components/ContainerCard/index.tsx","pages/FoodDetails/index.tsx","pages/Container/index.tsx","data/resolvers.ts","pages/Settings/index.tsx","components/FoodTypePicker/index.tsx","components/Wizard/StepIndicator.tsx","components/Wizard/index.tsx","pages/Buy/QuestionStep/index.tsx","pages/Buy/FormPreview/index.tsx","pages/Buy/SelectFoodPopup.tsx","pages/Buy/PendingOrderCard.tsx","pages/Buy/PendingInfoSummary.tsx","pages/Buy/index.tsx","pages/Consume/AmountInput.tsx","pages/Consume/ContainerPicker.tsx","pages/Consume/SelectFoodPopup.tsx","pages/Consume/PendingConsumptionCard.tsx","pages/Consume/index.tsx","reducers/index.ts","data/graphql.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PageNames","Routes","FOOD_LIST","FOOD_ADD","FOOD_DETAILS","FOOD_EDIT","BUY_FOOD","CONTAINERS_LIST","SETTINGS","CONSUME","HOME","history","createBrowserHistory","basename","forceRefresh","NavIcon","title","icon","active","path","className","Icon","style","color","navItems","tag","NavBar","search","useLocation","query","URLSearchParams","useHistory","map","i","props","key","onClick","push","indexOf","get","GenericCard","mainText","rightComponent","smallComponent","actionButton","iconName","convertToFloat","value","Number","parseFloat","toString","roundNumber","roundTo","toFixed","getDifferenceInDaysFromNow","date","Math","ceil","abs","Date","getTime","isTimeInPast","time","randomString","length","result","characters","charactersLength","charAt","floor","random","STATUS_COLOR","UNOPENED","UNOPENED_EXPIRED","OPENED","OPENED_EXPIRED","ContainerOverview","statusList","containers","expiryDate","dateOpened","opened","Object","keys","status","counts","_","groupBy","sort","a","b","display","alignItems","marginRight","SmallInfo","withRouter","name","unit","info","totalAmount","fontSize","numberOfContainers","cardStyle","understock","backgroundColor","constate","React","useState","withBackButton","navOptions","setNavOptions","HeaderContextProvider","useHeader","Header","navButtons","goBack","HeaderContainer","children","withHeader","WrappedComponent","newNavOptions","useEffect","Chip","label","selected","onSelect","ChipSelect","options","onChipClicked","option","Input","rawOnChange","onChange","required","validate","type","placeholder","isValid","setIsValid","valueToDisplay","toLocaleString","finalClassNameOuter","finalClassName","Error","multiple","otherProps","e","target","opt","CenterNotice","subtitle","textAlign","CenterNoticeSwitch","watch","centerNoticeProps","defaultEmptyResultConfig","SearchGroup","list","filterFunc","renderItem","minimumSearchLength","inputConfig","emptyResultConfig","searchTerm","setSearchTerm","searchResults","filter","item","QUERY","gql","useQuery","loading","error","data","refetch","window","location","pathname","alert","message","foods","fa","fb","localeCompare","SearchList","food","text","toLowerCase","includes","replace","RawUnit","g","mL","Price","amount","currency","amountInHKD","this","toHKDRate","price","as","DEFAULT_ZERO","Button","disabled","undefined","FormComponent","customInitialValue","initialValue","layoutOrLayoutFunc","layout","submitIconName","submitButtonText","onSubmit","withSubmitButton","disabledFields","setFormValue","disableSubmitButton","state","useSelector","shallowEqual","allFields","reduce","layouts","row","initialValues","assign","form","setForm","isAllFieldsValid","some","allDisabledFieldNames","inputFieldProps","field","v","setField","flex","inputConfigProps","ADD_FOOD_QUERY","GET_FOOD_NAMES_QUERY","formLayout","newName","find","values","useMutation","updateFoodFunc","Form","async","variables","toast","success","position","POSITION","TOP_CENTER","autoClose","onClose","EDIT_FOOD","showToast","setShowToast","originalFoodName","editingFood","foodListData","editFoodMutation","originalName","AuxInfo","ListInfoItem","description","PercentageBar","percentageLeft","percentageDifference","gridTemplateColumns","s","console","log","ContainerCard","container","capacity","datePurchased","expired","containerIcon","toLocaleDateString","daysDiff","expireDateString","FOOD_DETAIL_QUERY","FoodDetailsPage","foodName","auxConfigs","totalWorth","stockLevel","listInfoConfigs","openedContainers","expiredContainers","config","initialDatabase","loadDatabase","db","localStorage","getItem","JSON","parse","setItem","stringify","saveDatabase","newDb","resolvers","Query","FoodContainer","Food","sum","totalCapacity","getDate","__typename","Mutation","addFood","buyFood","buyOrders","newFoodContainers","forEach","buyOrder","foodId","findIndex","id","editFood","newData","consumeFoods","consumeOrders","hasError","order","containerID","con","containerIndex","ButtonWithDescriptionRow","buttonTitle","settingsConfig","reload","settings","GET_FOOD_LIST","FoodTypePicker","onFoodSelected","filterFood","foodOptions","finalOptions","foodA","foodB","containerDiff","StepIndicator","step","totalSteps","StepComponent","getStatusFromStep","range","Wizard","open","requestClose","headerTitle","setStep","QuestionStep","questions","questionText","FOOD_UNIT","FormPreview","selectedFood","containersCount","priceType","totalPrice","toDateString","QuestionStepPage","currentPage","setFormField","SelectFoodPopup","onBuyOrdersAdded","initialFormValue","fieldName","Array","fill","FOOD_QUERY","PendingOrderCard","addAmount","PendingInfoSummary","orders","total","add","numDifferentFoods","from","Set","numContainers","ADD_ORDERS","BuyPage","openSelectPopup","setOpenSelectPopup","pendingBuyOrders","setPendingBuyOrders","hasJustBought","setHasJustBought","buyFoodFunc","j","onOpen","AmountInterpretationType","AmountInput","onAmountChosen","interpretationType","realValue","percentLeft","CONTAINER_QUERY","ContainerPicker","onSelectContainer","onToPreviousPage","containerInd","setContainerInd","amountUsed","setAmountUsed","selectedContainer","offsetTop","paddingTop","paddingLeft","paddingRight","dots","infinite","afterChange","containerId","onConsumeOrderAdded","setSelectedFood","reportConsumeOrder","UNIT_QUERY","PendingConsumptionCard","onRemove","RightComponent","originalPercentage","consumedPercentage","AuxComponent","CONSUME_ORDERS","ConsumePage","submitConsumeOrders","pendingConsumeOrders","setPendingConsumeOrders","hasJustConsumed","setHasJustConsumed","initialState","createStore","action","newFood","foodID","quantity","newState","buy","f","updateInfo","latestTimeToConsumeAfterFirstOpen","client","ApolloClient","typeDefs","RouteSwitch","CreateFood","EditFood","Container","FoodDetails","Buy","Consume","Settings","App","foodList","correctDatabase","store","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","ready","unregister","checkValidServiceWorker"],"mappings":"imBAEaA,EACE,OADFA,EAEC,WAFDA,EAGK,eAHLA,EAIE,YAJFA,EAKC,MALDA,EAMQ,aANRA,EAOC,WAPDA,EAQA,UAmBEC,EAfA,CACXC,UAAW,iBACXC,SAAU,qBACVC,aAAc,yBACdC,UAAW,sBAEXC,SAAU,gBACVC,gBAAiB,uBAEjBC,SAAU,qBAEVC,QAAS,oBACTC,KAAM,Q,QCnBKC,EAJCC,YAAqB,CACjCC,SDJoB,gBCIAC,cAAc,I,gBCmBvBC,EAbyB,SAAC,GAEnC,EADFC,MACG,IADIC,EACL,EADKA,KAAYC,GACjB,EADWC,KACX,EADiBD,QAEnB,OACI,yBAAKE,UAAU,qBACX,yBAAKA,UAAS,kBAAaF,EAAO,iBAAiB,KAC/C,kBAACG,EAAA,EAAD,CAAMC,MAAO,CAACC,MAAOL,EAAO,UAAU,SAAUD,GAC/C,OCXXO,G,OAAkD,CACpD,CACIR,MAAO,SACPC,KAAM,eACNE,KAAMlB,EAAOM,gBACbkB,IAAK,CAACzB,IAEV,CACIgB,MAAO,UACPC,KAAM,WACNE,KAAMlB,EAAOQ,QACbgB,IAAK,CAACzB,IAEV,CACIgB,MAAO,OACPC,KAAM,WACNE,KAAMlB,EAAOC,UACbuB,IAAK,CACDzB,EACAA,EACAA,IAGR,CACIgB,MAAO,MACPC,KAAM,gBACNE,KAAMlB,EAAOK,SACbmB,IAAK,CAACzB,IAEV,CACIgB,MAAO,WACPC,KAAM,WACNE,KAAMlB,EAAOO,SACbiB,IAAK,CAACzB,MAsBC0B,EAjBU,WAAO,IACpBC,EAAWC,cAAXD,OACFE,EAAQ,IAAIC,gBAAgBH,GAC5BhB,EAAWoB,cACjB,OACI,yBAAKX,UAAU,mBAEPI,EAASQ,KAAI,WAAkBC,GAAlB,IAAER,EAAF,EAAEA,IAAQS,EAAV,8BACT,yBAAKC,IAAKF,EAAGG,QAAS,kBAAMzB,EAAQ0B,KAAKH,EAAMf,QAC3C,kBAAC,EAAD,iBAAae,EAAb,CAAoBhB,OAAQO,EAAIa,QAAQT,EAAMU,IAAI,SAAW,KAAO,W,yBCJ7EC,G,OA9BiC,SAAC,GAI1C,IAHHC,EAGE,EAHFA,SAAUC,EAGR,EAHQA,eAAgBC,EAGxB,EAHwBA,eAAgBP,EAGxC,EAHwCA,QAC1CQ,EAEE,EAFFA,aACAtB,EACE,EADFA,MAEA,OACI,yBAAKF,UAAU,cAAcgB,QAASA,EAASd,MAAOA,GAE9CsB,GACI,yBAAKxB,UAAU,4BACX,yBAAKgB,QAASQ,EAAaR,SACvB,kBAACf,EAAA,EAAD,KAAQuB,EAAaC,YAKrC,yBAAKzB,UAAU,oBACX,yBAAKA,UAAU,wBAAwBqB,GACvC,yBAAKrB,UAAU,0BACTuB,IAIV,yBAAKvB,UAAU,qBACTsB,MCnCLI,EAAiB,SAACC,GAC3B,OAAOC,OAAOC,WAAWF,EAAMG,aAGtBC,EAAc,SAACJ,GAAD,IAAgBK,EAAhB,uDAA0B,EAA1B,OAAgCH,WAAWF,EAAMM,QAAQD,KAAa,GAEpFE,EAA6B,SAACC,GACvC,OAAOC,KAAKC,KAAKD,KAAKE,MACb,IAAIC,MAAOC,UAAY,IAAID,KAAKJ,GAAMK,WAAvC,SAICC,EAAe,SAACC,GACzB,OAAO,IAAIH,KAAKG,GAAMF,WAAY,IAAID,MAAOC,WAGpCG,EAAe,SAACC,GAIzB,IAHA,IAAIC,EAAmB,GACjBC,EAAmB,iEACnBC,EAAmBD,EAAWF,OAC1B/B,EAAI,EAAGA,EAAI+B,EAAQ/B,IAC1BgC,GAAUC,EAAWE,OAAOZ,KAAKa,MAAMb,KAAKc,SAAWH,IAE1D,OAAOF,G,iBCzBLM,EAAe,CACjBC,SAAU,CACNjD,MAAO,QACPN,KAAM,WAEVwD,iBAAkB,CACdlD,MAAO,QACPN,KAAM,kBAEVyD,OAAQ,CACJnD,MAAO,SACPN,KAAM,WAEV0D,eAAgB,CACZpD,MAAO,SACPN,KAAM,mBAuDC2D,EA9C6C,SAAC,GAEtD,IACGC,EADJ,EADFC,WAEwE9C,KAAI,WAGzEC,GAAO,IAFN8C,EAEK,EAFLA,WACAC,EACK,EADLA,WAKMC,GAFOC,OAAOC,KAAKZ,GAAc,KAErBS,GAQlB,MAAO,CAAEI,SATSL,GAAclB,EAAakB,GAIhCE,EAAS,iBAAmB,mBAE5BA,EAAS,SAAW,eAM/BI,EAASC,IAAEC,QAAQV,EAAY,UAErC,OACI,oCAGYK,OAAOC,KAAKE,GAAQG,MAAK,SAACC,EAAGC,GAAJ,OAAUL,EAAOI,GAAGzB,OAASqB,EAAOK,GAAG1B,UAClEhC,KAAI,SAAAoD,GAAM,OACR,yBAAK9D,MAAO,CACRC,MAAOgD,EAAaa,GAAQ7D,MAC5BoE,QAAS,OACTC,WAAY,SACZC,YAAa,IAEb,kBAACxE,EAAA,EAAD,CAAMC,MAAO,CAACC,MAAOgD,EAAaa,GAAQ7D,QACrCgD,EAAaa,GAAQnE,MAEzBoE,EAAOD,GAAQpB,OAAS,GAAxB,YAAkCqB,EAAOD,GAAQpB,cCjDpE8B,EAAY,SAAC,GAAD,IACd7E,EADc,EACdA,KAAM8B,EADQ,EACRA,MAAOzB,EADC,EACDA,MADC,OAGd,yBAAKF,UAAU,qBAAqBE,MAAOA,GACrCL,GAAQ,kBAACI,EAAA,EAAD,KAAOJ,GACf8B,IAyBKgD,eArBsD,SAAC,GAE/D,IADHC,EACE,EADFA,KAAMC,EACJ,EADIA,KAAMC,EACV,EADUA,KAAM9D,EAChB,EADgBA,QAAS0C,EACzB,EADyBA,WAAe5C,EACxC,6DACIQ,EAAiB,kBAAC,EAAD,CAAWK,MAAK,UAAKmD,EAAKC,YAAV,YAAyBF,GAAQ3E,MAAO,CAAC8E,SAAU,MACpFzD,EAAkBuD,EAAKG,mBAExB,kBAAC,EAAD,CAAmBvB,WAAYA,IAD/B,gBAGCwB,EAAYJ,EAAKK,WAAa,CAACC,gBAAiB,wBAA0B,GAChF,OACI,kBAAC,EAAD,eACI/D,SAAUuD,EACVtD,eAAgBA,EAChBC,eAAgBA,EAChBP,QAASA,EACTd,MAAOgF,GACHpE,O,4BCXkCuE,aAT3C,WAA0B,IAAD,EACSC,IAAMC,SAAS,CAChD3F,MAAO,GACP4F,gBAAgB,IAHQ,mBAM5B,MAAO,CAAEC,WANmB,KAMPC,cANO,S,mBASlBC,E,KAAuBC,E,KAE/BC,EAAmB,WAAO,IAAD,EAKvBD,IAHAH,WACI7F,EAHmB,EAGnBA,MAAOkG,EAHY,EAGZA,WAAYN,EAHA,EAGAA,eAIrBjG,EAAUoB,cAChB,OACI,yBAAKX,UAAU,UACX,6BAEQwF,GACQ,kBAACvF,EAAA,EAAD,CAAMC,MAAO,CAAC8E,SAAU,IAAKhE,QAAS,kBAAMzB,EAAQwG,WAApD,mBAGXnG,GAGL,yBAAKI,UAAU,yBAEP8F,GAAcA,EAAWlF,KAAI,gBAAEa,EAAF,EAAEA,SAAUT,EAAZ,EAAYA,QAAZ,OACzB,yBAAKhB,UAAU,mBAAmBgB,QAASA,GACvC,kBAACf,EAAA,EAAD,KAAOwB,UAStBuE,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxC,OACI,kBAACN,EAAD,KACI,kBAAC,EAAD,MACCM,IAKAC,EAAa,SAACC,EAAkCC,GAUzD,OAT4B,SAAAtF,GAAU,IAC3B4E,EAAiBE,IAAjBF,cAKP,OAJAJ,IAAMe,WAAU,WACZX,EAAcU,KACf,IAEI,kBAACD,EAAqBrF,KCrE/BwF,G,cAA4B,SAAC,GAI5B,IAHHzG,EAGE,EAHFA,KAAM0G,EAGJ,EAHIA,MAENC,EACE,EADFA,SAAUC,EACR,EADQA,SAEV,OACI,yBACIzG,UAAWwG,EAAW,gBAAkB,OACxCxF,QAASyF,GACP5G,GAAQ,kBAACI,EAAA,EAAD,KAAOJ,GAChB0G,KASAG,EAAwC,SAAC,GAE/C,IADHC,EACE,EADFA,QAASF,EACP,EADOA,SAAU9E,EACjB,EADiBA,MAObiF,EAAgB,SAACjF,GAGnB8E,EAAS9E,IAGb,OACI,yBAAK3B,UAAU,wBAEP2G,EAAQ/F,KAAI,SAAAiG,GAAM,OACd,kBAAC,EAAD,iBAAUA,EAAV,CACI9F,IAAK8F,EAAON,MACZC,SAAU7E,IAAUkF,EAAOlF,MAC3B8E,SAAU,kBAAMG,EAAcC,EAAOlF,gBC2F9CmF,EApHsD,SAAC,GAW/D,IAVOC,EAUR,EAVFC,SAAuBrF,EAUrB,EAVqBA,MAUrB,IARFsF,gBAQE,aARgBC,gBAQhB,MAR2B,kBAAM,GAQjC,EAPFtC,EAOE,EAPFA,KACA2B,EAME,EANFA,MAME,IALFY,YAKE,MALK,OAKL,EAJFC,EAIE,EAJFA,YACApH,EAGE,EAHFA,UACAyB,EAEE,EAFFA,SACGX,EACD,uHAG8BwE,IAAMC,SAAS2B,EAASvF,IAHtD,mBAGM0F,EAHN,KAGeC,EAHf,KAKIN,EAAW,SAACrF,GACVsF,IAAatF,IAAWuF,EAASvF,GACjC2F,GAAW,GAEXA,GAAW,GAEfP,EAAYpF,IAGV4F,EAA2E,SAAA5F,GAC7E,OAAIA,aAAiBY,KACVZ,EAAM6F,eAAe,SAEzB7F,GAAS,IAGd8F,EAAmB,iBAAcJ,EAAsB,GAAZ,WAC3CK,EAAc,sBAAkB1H,GAAa,IACnD,OAAOmH,GAMH,IAAK,SACD,IAAKrG,EACD,MAAM,IAAI6G,MAAM,qDAFxB,MAIyD7G,EAA7C6F,EAJZ,EAIYA,QAJZ,IAIqBiB,gBAJrB,SAI0CC,EAJ1C,sCAKI,OACI,6BACKtB,GAAS,2BAAIA,GACd,yBAAKvG,UAAWyH,GACVhG,GAAY,kBAACxB,EAAA,EAAD,KAAOwB,EAAP,KACd,0CACImG,SAAUA,EACVhD,KAAMA,GACFiD,EAHR,CAII7H,UAAW0H,EACXV,SAAU,SAAAc,GAAC,OAAId,EAASc,EAAEC,OAAOpG,QACjCA,MAAO4F,EAAe5F,KAErByF,GACG,4BAAQzF,MAAM,GAAG6E,SAAoB,KAAV7E,GAAeyF,GAG1CT,EAAQ/F,KAAI,SAAAoH,GAAG,OACX,4BACIxB,SAAUwB,IAAQrG,GACjBqG,OAKjB,kBAAC/H,EAAA,EAAD,sBAShB,QACI,OACI,oCACKsG,GAAS,2BAAIA,GACd,yBAAKvG,UAAWyH,GACVhG,GAAY,kBAACxB,EAAA,EAAD,KAAOwB,EAAP,KACd,yCACImD,KAAMA,GACF9D,EAFR,CAGId,UAAW0H,EACXN,YAAaA,EACbJ,SAAU,SAAAc,GACN,OAAOX,GACH,IAAK,SACDH,EAASnF,WAAWiG,EAAEC,OAAOpG,QAC7B,MACJ,QACIqF,EAASc,EAAEC,OAAOpG,SAG9BwF,KAAMA,EACNxF,MAAO4F,EAAe5F,MAGb,WAATwF,GACI,yBAAKnH,UAAU,sBACX,kBAACC,EAAA,EAAD,CAAMe,QAAS,kBAAMgG,GAAUrF,GAAmB,GAAK,KAAvD,eACA,kBAAC1B,EAAA,EAAD,CAAMe,QAAS,kBAAMgG,GAAUrF,GAAmB,GAAK,KAAvD,oBCzH9BsG,G,OAA4C,SAAC,GAE5C,IADHxG,EACE,EADFA,SAAU7B,EACR,EADQA,MAAOsI,EACf,EADeA,SAEjB,OACI,yBAAKlI,UAAU,gBACX,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAC8E,SAAU,KAAMvD,GAC9B,yBAAKvB,MAAO,CAACiI,UAAW,WAEhBvI,GAAS,4BAAKA,GAGdsI,GAAY,4BAAKA,OAOxBE,EAAwD,SAAC,GAE/D,IADHC,EACE,EADFA,MAAOpC,EACL,EADKA,SAAaqC,EAClB,oCACF,OAAoC,IAAhCD,EAAqBzF,QAAkByF,EAGhCpC,EAFC,kBAAC,EAAiBqC,IAMnBL,ICxBTM,G,OAA8C,CAChD9G,SAAU,SACV7B,MAAO,qBAuCI4I,GApCsC,SAAC,GAK/C,IAJHC,EAIE,EAJFA,KAAMC,EAIJ,EAJIA,WAAYC,EAIhB,EAJgBA,WAIhB,IAHFC,2BAGE,MAHoB,EAGpB,EAFFC,EAEE,EAFFA,YAEE,IADFC,yBACE,MADkBP,EAClB,IACkCjD,IAAMC,SAAS,IADjD,mBACKwD,EADL,KACiBC,EADjB,KAGIC,EAAiBF,EAAWnG,QAAUgG,EACxCH,EAAKS,QAAO,SAAAC,GAAI,OAAIT,EAAWS,EAAMJ,MAAaN,EAEtD,OACI,yBAAKzI,UAAU,eACX,yBAAKA,UAAU,qBACX,kBAAC,EAAD,iBAEQ6I,EAFR,CAGIlH,MAAOoH,EACP/B,SAAU,SAAAc,GAAC,OAAIkB,EAAclB,QAGrC,yBAAK9H,UAAU,oBACX,kBAAC,EAAD,eACIqI,MAAOY,GACHH,GAGGG,EAAcrI,KAAI,SAAAuI,GAAI,OAAIR,EAAWQ,U,kZClChE,IAAMC,GAAQC,aAAH,MAsEInD,MAnD2B,WAAO,IAAD,EACFoD,aAASF,IAA3CG,EADoC,EACpCA,QAASC,EAD2B,EAC3BA,MAAOC,EADoB,EACpBA,KAAMC,EADc,EACdA,QAM9B,GAJApE,IAAMe,WAAU,WACZqD,MACD,CAACC,OAAOC,SAASC,WAEhBL,EAEA,OADAM,MAAMN,EAAMO,SACL,KAEX,GAAGR,EACC,OAAO,4CAIX,IAAMS,EAAQP,EAAKO,MAAM5F,MAAK,SAAC6F,EAAUC,GAAX,OAAwBD,EAAGrF,KAAKuF,cAAcD,EAAGtF,SAG/E,OACI,kBAAC,EAAD,CAAoByD,MAAO2B,EACvBvI,SAAS,WACT7B,MAAM,mBACNsI,SAAS,kDAET,kBAACkC,GAAD,CACI3B,KAAMuB,EACNtB,WACI,SAAC2B,EAAMC,GAAP,OAAiBD,EAAczF,KAAK2F,cAAcC,SAASF,EAAKC,gBAEpE1B,YAAa,CACTjE,KAAM,kBACNnD,SAAU,SACV2F,YAAa,sBAEjBwB,oBAAqB,EACrBD,WAAY,SAAA0B,GAAI,OACZ,kBAAC,EAAD,iBAAcA,EAAd,CACIrJ,QAAS,kBAAMzB,EAAQkL,QACnB5L,EAAOG,aAAP,gBAA+BqL,EAAKzF,iBAY5B,CAChChF,MAAO,YACPkG,WAAY,CACR,CAACrE,SAAU,MAAOT,QAAS,kBAAMzB,EAAQ0B,KAAKpC,EAAOE,e,sCCzFhD2L,GAAU,CACnB7F,KAAM,OACN8F,EAAG,IACHC,GAAI,MAcKC,GAAb,WAYI,WACaC,EACAC,GACV,0BAFUD,SAEX,KADWC,WAdjB,gDAiBcA,GACN,IAAMC,EAAcC,KAAKH,OAASD,EAAMK,UAAUD,KAAKF,UACvD,OAAO,IAAIF,EAAMG,EAAcH,EAAMK,UAAUH,GAAWA,KAnBlE,0BAsBeI,GAEP,OAAO,IAAIN,EADsBM,EAAMC,GAAGH,KAAKF,UACLD,OAASG,KAAKH,OAAQG,KAAKF,cAxB7E,KAAaF,GACFK,UAAY,SAACH,GAChB,OAAOA,GACH,IAAK,MAAO,OAAO,IACnB,IAAK,MAAO,OAAO,IACnB,IAAK,MAAO,OAAO,EACnB,IAAK,MAAO,OAAO,IANlBF,GAUFQ,aAAe,IAAIR,GAAM,EAAG,OAqDhC,I,oCC7CQS,I,OArBuB,SAAC,GAMhC,IALH1L,EAKE,EALFA,MAAOC,EAKL,EALKA,KAKL,IAJFM,aAIE,MAJM,UAIN,EAHFa,EAGE,EAHFA,QAGE,IAFFuK,gBAEE,SADFvL,EACE,EADFA,UAEA,OACI,yBACIA,UAAS,UAAKA,EAAL,0BAAgCG,EAAhC,YAAyCoL,EAAU,kBAAkB,IAC9EvK,QAAUuK,OAAoBC,EAATxK,GAEjBnB,GACI,kBAACI,EAAA,EAAD,KAAOJ,GAGdD,KCkIE6L,I,OAjH4B,SAAC,GAUrC,IATWC,EASZ,EATFC,aACSC,EAQP,EARFC,OACAC,EAOE,EAPFA,eAAgBC,EAOd,EAPcA,iBAChBC,EAME,EANFA,SAME,IALFC,wBAKE,SAJFC,EAIE,EAJFA,eACAC,EAGE,EAHFA,aAEAC,EACE,EADFA,oBAKMC,EAASC,cAAY,SAAAD,GAAK,OAAIA,IAAOE,MACrChN,EAAUoB,cACViJ,EAAWpJ,cAEXqL,EAAwC,oBAAvBD,EACjBA,EAAmBS,EAAO9M,EAASqK,EAAU8B,GAC7CE,EAGAY,EAAS,aAAOX,EAAOY,QAAO,SAACC,EAASC,GAAV,6BAAsBD,GAAtB,aAAkCC,MAAM,KAGtEC,EAAgBlB,GAAsB5H,OAAO+I,OAAP,MAAA/I,OAAM,CAAQ,IAAR,oBAC3C0I,EAAU5L,KAAI,YAA6B,IAA3BgE,EAA0B,EAA1BA,KAAMuC,EAAoB,EAApBA,KACrB,IADyC,EAAdF,SACZ,OAAO,KACtB,OAAOE,GACH,IAAK,SACD,OAAO,gBAAGvC,EAAO,GACrB,IAAK,OACD,OAAO,gBAAGA,EAAO,IAAIrC,MACzB,QACI,OAAO,gBAAGqC,EAAO,WAzB/B,EA+BsBU,IAAMC,SAASqH,GA/BrC,mBA+BKE,EA/BL,KA+BWC,EA/BX,KAiCFzH,IAAMe,WAAU,WACZ8F,GAAgBA,EAAaW,KAC9B,CAACA,EAAMX,IAGV,IAAMa,GAAoBR,EAAUS,MAAK,gBAAErI,EAAF,EAAEA,KAAMqC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,SAAlB,OACpCD,IAAa6F,EAAKlI,IAAWsC,IAAaA,EAAS4F,EAAKlI,OAcvDsI,EAAwBhB,EAAiBA,EAAeY,GAAQ,GAChEK,EAAkB,SAACC,GAAD,MAAoB,CACxCzL,MAAOmL,EAAKM,GACZpG,SAAU,SAACqG,GAAD,OAbG,SAACD,EAAezL,GAC7B,IAAMwF,SAAcyF,EAAcQ,GAG9BL,EADS,WAAT5F,EACQ,gBAAI2F,EAAL,gBAAYM,EAAQvL,WAAWF,IAAoB,IAElD,gBAAImL,EAAL,gBAAYM,EAAQzL,KAOF2L,CAASF,EAAOC,IAC7C9B,SAAU2B,EAAsB1C,SAAS4C,KAG7C,OACI,yBAAKpN,UAAU,QAGP6L,EAAOjL,KAAI,SAAA+L,GAAG,OACV,yBAAK3M,UAAU,YAGP2M,EAAI/L,KAAI,gBAEJgE,EAFI,EAEJA,KAFI,IAGJ2I,YAHI,MAGG,EAHH,EAIDC,EAJC,sCAMJ,yBAAKxN,UAAU,WAAWE,MAAO,CAACqN,SAC9B,kBAAC,EAAD,eACI3I,KAAMA,GACF4I,EACAL,EAAgBvI,aAQhD,yBAAK1E,MAAO,CAACqN,KAAM,KAEftB,GACI,kBAAC,GAAD,CAAQ9L,MAAM,OACVP,MAAOmM,GAAoB,SAC3BlM,KAAMiM,EACN9K,QAASgL,GAAa,kBAAMA,EAASc,IACrCvB,UAAWyB,GAAoBZ,EAC/BpM,UAAU,mB,2XC3IlC,IAAMyN,GAAiBpE,aAAH,MASdqE,GAAuBrE,aAAH,MAQbsE,GAAyB,SAAC,EAEnCpO,EACAqK,EACA+B,GAJkC,IAChC3B,EADgC,EAChCA,MADgC,MAID,CAEjC,CAAC,CAAGzD,MAAO,YACP3B,KAAM,OAAQwC,YAAa,OAAQ3F,SAAU,OAAQwF,UAAU,EAE/DC,SAAU,SAAA0G,GAAO,OAAK5D,EAAM6D,MACxB,YAAY,EAAVjJ,KACE,OAAO,QAInB,CAAC,CACG2B,MAAO,OACP3B,KAAM,OAAQwC,YAAa,OAAQH,UAAU,EAC7CsG,KAAM,EAAGpG,KAAM,SACfR,QAAS7C,OAAOgK,OAAOpD,MAE3B,CAAC,CACGnE,MAAO,uBAAwBY,KAAM,SACrCvC,KAAM,aAAcwC,YAAa,cACjCF,SAAU,SAAAmG,GAAC,OAAU,OAANA,GAAcA,GAAK,OAoC3BnH,MAhCkB,WAC7B,IAAM3G,EAAUoB,cADmB,EAEe2I,aAASoE,IAFxB,KAE3BnE,QAF2B,EAEDC,MAFC,EAEMC,KAEfsE,aAAYN,KAA9BO,EAJ2B,oBAsBnC,OACI,kBAACC,GAAD,CACIlC,iBAAiB,WACjBD,eAAe,MACfE,SAnBU,SAAOc,GAAP,UAAAzI,EAAA6J,OAAA,mEAAA7J,EAAA,MACR2J,EAAe,CACjBG,UAAW,CACPvJ,KAAMkI,EAAKlI,KACXC,KAAMiI,EAAKjI,SAJL,OAQduJ,IAAMC,QAAQ,cAAe,CACzBC,SAAUF,IAAMG,SAASC,WACzBC,UAAW,IACXC,QAAS,kBAAMnP,EAAQwG,YAXb,sCAoBV8F,OAAQ8B,OAKsB,CACtC/N,MAAO,WACP4F,gBAAgB,I,8hBCjFpB,IAAM1G,GAAYuK,aAAH,MAaTsF,GAAYtF,aAAH,MAiDAnD,MAzCgB,WAAO,IAAD,EACGZ,IAAMC,UAAS,GADlB,mBACzBqJ,EADyB,KACdC,EADc,KAG3BtP,EAAWoB,cACXiJ,EAAWpJ,cACXsO,EAAmB,IAAIpO,gBAAgBkJ,EAASrJ,QAAQY,IAAI,QALjC,EAMOmI,aAASxK,GAAW,CACxDqP,UAAW,CACPY,YAAaD,KAFPE,EANmB,EAMzBvF,KAAoBF,EANK,EAMLA,QANK,EAYHwE,aAAYY,IAAlCM,EAZyB,oBA8BjC,OAAG1F,EAAgB,KAEf,kBAAC0E,GAAD,CACIpC,OAAQ8B,GACRhC,aAAY,OAAEqD,QAAF,IAAEA,OAAF,EAAEA,EAAc3E,KAC5B2B,SAtBW,SAAOc,GAAP,UAAAzI,EAAA6J,OAAA,mEAAA7J,EAAA,MACT4K,EAAiB,CACnBd,UAAW,CACPe,aAAcJ,EACdzE,KAAMyC,MAJC,OAQfsB,IAAMC,QAAQ,eAAgB,CAC1BI,UAAW,IACXC,QAAS,WACLG,GAAa,GACbtP,EAAQ0B,KAAKpC,EAAOC,cAZb,sCAuBXsN,oBAAqBwC,MAKO,CACpChP,MAAO,iBACP4F,gBAAgB,ICtDL2J,GAXyB,SAAC,GAA8B,IAA7BvP,EAA4B,EAA5BA,MAAiB+B,GAAW,EAArBF,SAAqB,EAAXE,OACvD,OACI,yBAAK3B,UAAU,WACV2B,EACD,yBAAK3B,UAAU,iBACVJ,KCSFwP,GAdmC,SAAC,GAAD,IAC9C3N,EAD8C,EAC9CA,SAAU4N,EADoC,EACpCA,YAAa1N,EADuB,EACvBA,MAAOxB,EADgB,EAChBA,MADgB,OAG9C,yBAAKH,UAAU,0BACX,yBAAKA,UAAU,qBACX,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,QAAO6E,SAAU,KAAMvD,EAArC,MAEJ,yBAAKzB,UAAU,qBAAqBE,MAAO,CAACC,UACxC,yBAAKD,MAAO,CAACC,QAAO6E,SAAU,KAAMrD,GACpC,yBAAKzB,MAAO,CAACC,UAASkP,MCQnBC,I,OAhBqC,SAAC,GAAD,EAChDnP,MADgD,IACzCoP,EADyC,EACzCA,eADyC,IACzBC,4BADyB,MACF,EADE,SAGhD,yBAAKxP,UAAU,gBAAgBE,MAAO,CAClCuP,oBAAsB,WAClB,IAAMC,EAAC,UAAMH,EAAiBC,EAAvB,aAAgDA,EAAhD,aAAyE,IAAMD,EAA/E,KAEP,OADAI,QAAQC,IAAIF,GACLA,EAHW,KAMtB,8BACA,8BACA,iCC0DOG,I,OAzDsC,SAAC,GAM/C,IAAD,IALFC,UACchF,GAIZ,EAJEiF,SAIF,EAJYjF,QAAQkF,EAIpB,EAJoBA,cAAerM,EAInC,EAJmCA,WACjCC,EAGF,EAHEA,WAAYuH,EAGd,EAHcA,MAAOtH,EAGrB,EAHqBA,OAAQoM,EAG7B,EAH6BA,QAASV,EAGtC,EAHsCA,eAExC1K,EACE,EADFA,KAAM7D,EACJ,EADIA,QAGAb,EAAQ8P,EAAU,MAASpM,EAAS,OAAS,OAC7CqM,EAAgBD,EAAU,iBAAmB,UASnD,OACI,yBAAKjP,QAASA,EAAShB,UAAS,0DAAqDG,IACjF,yBAAKH,UAAU,+BACVkC,EAA2B8N,GADhC,YAEI,kBAAC/P,EAAA,EAAD,CAAMC,MAAO,CAACC,QAAO6E,SAAU,KAAMkL,GACpCnO,EAAYoJ,EAAML,QAHvB,IAGiCK,EAAMJ,UAEvC,yBAAK/K,UAAU,gCACX,yBAAKA,UAAU,kCACVuP,EAAetN,QAAQ,GAD5B,IAEI,kBAAC,GAAD,CAAe9B,MAAOA,EAAOoP,eAAgBA,KAEjD,yBAAKvP,UAAU,sCAEP4D,EACI,oCACI,kBAAC3D,EAAA,EAAD,qBACA,4BAAK,IAAIsC,KAAKqB,GAAYuM,uBAG9B,oCACI,kBAAClQ,EAAA,EAAD,cACA,yCAIZ,wBAAIC,MAAO,CAACC,UAjCH,WACrB,IAAIwD,EAAY,MAAO,GACvB,IAAMyM,EAAWlO,EAA2ByB,GAC5C,OAAIsM,EAAe,aAAN,OAAoBG,EAApB,eACR,sBAAsBA,EAAtB,SA8BaC,IAGN,yBAAKrQ,UAAU,wBACV8K,EADL,IACcjG,Q,ywBCxDlC,IAAMyL,GAAoBjH,aAAH,MAwLRkH,GAhImB,WAC9B,IAAMhR,EAAWoB,cACXiJ,EAAWpJ,cAFmB,EAGEoF,IAA9BH,EAH4B,EAG5BA,WAAYC,EAHgB,EAGhBA,cAEd8K,EAAW,IAAI9P,gBAAgBkJ,EAASrJ,QAAQY,IAAI,QALtB,EAMHmI,aAASgH,GAAmB,CACzDnC,UAAW,CACP9D,KAAMmG,KAFNjH,EAN4B,EAM5BA,QAASC,EANmB,EAMnBA,MAAOC,EANY,EAMZA,KAoBxB,GAdI+G,GAAUjR,EAAQwG,SAEtBT,IAAMe,WAAU,WACZX,EAAc,gBACPD,EADM,CAET7F,MAAO4Q,EACPhL,gBAAgB,EAChBM,WAAY,CAAC,CACTrE,SAAU,OACVT,QAAS,kBAAMzB,EAAQ0B,KAAR,UAAgBpC,EAAOI,UAAvB,iBAAyCuR,YAGjE,IAECjH,EACA,OAAO,KAGX,GAAIC,EAEA,OADAM,MAAMN,EAAMO,SACL,KAGX,IAAMM,EAAOZ,EAAKY,KAEZoG,EAA6B,CAC/B,CACI7Q,MAAO,eACP6B,SAAU,UACVE,MAAM,GAAD,OAAKI,EAAYsI,EAAKvF,KAAKC,aAA3B,YAA2CsF,EAAKxF,OAEzD,CACIjF,MAAO,QACP6B,SAAU,QACVE,MAAM,GAAD,OAAKI,EAAYsI,EAAKvF,KAAK4L,YAA3B,YAET,CACI9Q,MAAO,kBACP6B,SAAU,aACVE,MAAM,GAAD,OAAKI,EAAYsI,EAAKvF,KAAKyK,gBAA3B,OAET,CACI3P,MAAO,sBACP6B,SAAU,GACVE,MAAM,GAAD,OAAK0I,EAAKsG,WAAV,YAAwBtG,EAAKxF,QAIpC+L,EAAuC,CACzC,CACIzQ,MAAO,QACPsB,SAAU,UACV4N,YAAa,sBACb1N,OAAQ0I,EAAKvF,KAAKG,mBAAqBoF,EAAKvF,KAAK+L,kBAAkB/O,YAEvE,CACI3B,MAAO,SACPsB,SAAS,UACT4N,YAAa,oBACb1N,MAAQ0I,EAAKvF,KAAK+L,iBAAkB/O,YAExC,CACI3B,MAAO,MACPsB,SAAS,iBACT4N,YAAa,qBACb1N,MAAQ0I,EAAKvF,KAAKgM,kBAAmBhP,aAI7C,OACI,yBAAK9B,UAAU,yBAIV,yBAAKA,UAAU,0BACX,yBAAKA,UAAU,qCAEPyQ,EAAW7P,KAAI,SAAAmQ,GAAM,OACjB,kBAAC,GAAD,eAAShQ,IAAKgQ,EAAOnR,OAAWmR,QAKxC1G,EAAKvF,KAAKG,mBAAqB,GAC5B,yBAAKjF,UAAU,sCAEP4Q,EAAgBhQ,KAAI,SAACmQ,EAAQlQ,GAAT,OAChB,kBAAC,GAAD,iBAAkBkQ,EAAlB,CAA0BhQ,IAAKF,UAQtD,yBAAKb,UAAU,6BACZ,kBAAC,EAAD,CACIqI,MAAOgC,EAAK3G,WACZjC,SAAS,UACT7B,MAAM,gBACNsI,SAAS,4DAET,oCACI,4BAAKmC,EAAKvF,KAAKG,mBAAf,kBAEIoF,EAAK3G,WAAW9C,KACZ,SAACkP,GAAD,OAAe,kBAAC,GAAD,CAAeA,UAAWA,EAAWjL,KAAMwF,EAAKxF,eCtLhFqB,MAJiB,WAC5B,OAAO,8CAG6B,CACpCtG,MAAO,SACPkG,WAAY,CACR,CACIrE,SAAU,MACVT,QAAS,iBCMRgQ,I,OAAiC,CAC1ChH,MAAO,KAGLiH,GAAe,WACjB,IAAMC,EAAKC,aAAaC,QAXG,MAY3B,OAAKF,EAKMG,KAAKC,MAAMJ,IAJlBC,aAAaI,QAbU,KAcnBF,KAAKG,UAAUR,KACRA,KAMbS,GAAe,SAACC,GAClB,OAAOP,aAAaI,QAtBO,KAsBkBF,KAAKG,UAAUE,KAiMjDC,GA7KG,CACdC,MAAO,CACHvH,KAAM,SAACnG,EAAD,GAAyC,IAA9BU,EAA6B,EAA7BA,KAEPyF,EADK4G,KACKjH,MAAM6D,MAAK,SAAAxD,GAAI,OAAIA,EAAKzF,OAASA,KACjD,OAAOyF,GAEXL,MAAO,WAEH,OADWiH,KACDjH,QAGlB6H,cAAe,CACX7B,cAAe,SAACF,GACZ,OAAO,IAAIvN,KAAKuN,EAAUE,gBAE9BnM,OAAQ,SAACiM,GACN,QAASA,EAAUlM,YAEtBqM,QAAS,SAACH,GACN,QAAUA,EAAUnM,YAAelB,EAAaqN,EAAUnM,aAE9D4L,eAAgB,SAACO,GACb,OAAOA,EAAUhF,OAASgF,EAAUC,SAAW,MAGvD+B,KAAM,CACFhN,KAAM,SAACuF,GACH,IAAMtF,EAAcsF,EAAK3G,WAAW+I,QAChC,SAACsF,EAAKjC,GAAN,OAAoBiC,EAAMjC,EAAUhF,SAAQ,GAE1CkH,EAAgB3H,EAAK3G,WAAW+I,QAClC,SAACsF,EAAKjC,GAAN,OAAoBiC,EAAMjC,EAAUC,WAAU,GAG5Ce,EAAoBzG,EAAK3G,WAAWwF,QACtC,SAAA4G,GAAS,OAAIA,EAAUnM,YAAc,IAAIpB,KAAKuN,EAAUnM,YAAYsO,WAAa,IAAI1P,MAAQ0P,aAC/FrP,OAEIiO,EAAmBxG,EAAK3G,WAAWwF,QACrC,SAAA4G,GAAS,QAAMA,EAAUlM,cAC3BhB,OAEI8N,EAAarG,EAAK3G,WAAW+I,QAC/B,SAACsF,EAAD,OAAQ5G,EAAR,EAAQA,MAAR,OAAoB4G,EAAM,IAAIlH,GAAMM,EAAML,OAAQK,EAAMJ,UAAUK,GAAG,OAAON,SAC5E,GASJ,MAAO,CACHoH,WAAY,WACZjN,mBAVuBoF,EAAK3G,WAAWd,OAWvCkO,oBACAD,mBACA9L,cACA2L,aACAnB,eAbsC,IAAlByC,EACpB,EACAjN,EAAciN,EAAgB,IAY9B7M,WAVekF,EAAKsG,YAActG,EAAKsG,WAAa5L,KAchEoN,SAAU,CACNC,QAAS,SAAClO,EAAD,GAA2D,IAAhDU,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,KAChBqM,EAAKD,KACXC,EAAGlH,MAAM/I,KAAK,CACViR,WAAY,OACZtN,OAAMC,OACNnB,WAAY,KAGhB+N,GAAaP,IAGjBmB,QAAS,SAACnO,EAAD,GAAsD,IAA3CoO,EAA0C,EAA1CA,UACVpB,EAAKD,KACLsB,EAAsC,GA2B5C,OA1BAD,EAAUE,SAAQ,SAAAC,GAAa,IACT7N,EAAoC6N,EAA9CjC,SAAgBrF,EAA8BsH,EAA9BtH,MAAOxH,EAAuB8O,EAAvB9O,WAAYmH,EAAW2H,EAAX3H,OAGrC4H,EAASxB,EAAGlH,MAAM2I,WAAU,SAAAtI,GAAI,OAAIA,EAAKzF,OAASA,KAGxD,GAAI8N,GAAU,EAAG,CAEb,IAAM5C,EAAY,CACdoC,WAAY,gBACZU,GAAIjQ,EAAa,IACjBoN,SAAUrO,EAAeoJ,GACzBA,OAAQpJ,EAAeoJ,GACvBkF,cAAe,IAAIzN,KACnBoB,WAAYA,EAAa,IAAIpB,KAAKoB,GAAc,KAChDC,WAAY,KACZuH,MAAO,IAAIN,GAAM9I,EAAYoJ,EAAML,QAASK,EAAMJ,WAGtDmG,EAAGlH,MAAM0I,GAAQhP,WAAWzC,KAAK6O,GACjCyC,EAAkBtR,KAAK6O,OAI/B2B,GAAaP,GACNqB,GAEXM,SAAU,SACN3O,EADM,GAGsC,IAD1CgL,EACyC,EADzCA,aAAc4D,EAC2B,EAD3BA,QAEV5B,EAAKD,KAUX,OATAC,EAAGlH,MAAQkH,EAAGlH,MAAMpJ,KAAI,SAAAyJ,GACpB,OAAIA,EAAKzF,OAASsK,EAAqB7E,EAClC,gBACEyI,EADF,CAEDpP,WAAY2G,EAAK3G,gBAIzB+N,GAAaP,GACN4B,GAGXC,aAAc,SAAC7O,EAAD,GAAiE,IAAtD8O,EAAqD,EAArDA,cACf9B,EAAKD,KACPgC,GAAW,EAuCf,OAtCAD,EAAcR,SAAQ,SAAAU,GAAU,IACpBC,EAAwBD,EAAxBC,YAAarI,EAAWoI,EAAXpI,OACf4H,EAASxB,EAAGlH,MAAM2I,WACpB,SAAAtI,GAAI,OAAIA,EAAK3G,WAAWmK,MAAK,SAAAuF,GAAG,OAAIA,EAAIR,KAAOO,QAGnD,GAAIT,EAAS,EACTO,GAAW,MADf,CAIA,IAAMI,EAAiBnC,EAAGlH,MAAM0I,GAC3BhP,WACAiP,WAAU,SAAAS,GAAG,OAAIA,EAAIR,KAAOO,KAIjC,GADkBjC,EAAGlH,MAAM0I,GAAQhP,WAAW2P,GAChCvI,OAASA,EACnBmI,GAAW,MADf,CAMA/B,EAAGlH,MAAM0I,GAAQhP,WAAW2P,GAAgBvI,QAAUA,EACjDoG,EAAGlH,MAAM0I,GAAQhP,WAAW2P,GAAgBzP,aAC7CsN,EAAGlH,MAAM0I,GAAQhP,WAAW2P,GAAgBzP,WAAa,IAAIrB,MAxBtC,MA6BiB2O,EAAGlH,MAAM0I,GAAQhP,WAAW2P,GA7B7C,EA6BpBvI,OA7BoB,EA6BKiF,SACC,MAC7BmB,EAAGlH,MAAM0I,GAAQhP,WAAawN,EAAGlH,MAAM0I,GAAQhP,WAAWwF,QAAO,SAAChF,EAAGrD,GAAJ,OAAUA,IAAMwS,WAIpFJ,GACDxB,GAAaP,GAEV+B,EACHD,EAAcpS,KAAI,qBAAEuS,eAClB,QCpNZG,GAAoE,SAAC,GAEpE,IADH1T,EACE,EADFA,MAAOyP,EACL,EADKA,YAAakE,EAClB,EADkBA,YAAavS,EAC/B,EAD+BA,QAEjC,OACI,yBAAKhB,UAAU,2BACX,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,gCACVJ,GAEL,yBAAKI,UAAU,sCACVqP,IAGT,yBAAKrP,UAAU,gCACX,yBAAKA,UAAU,gCAAgCgB,QAASA,GAClDuS,MAOhBC,GAAkD,CACpD,CACI5T,MAAO,iBACPyP,YAAa,+EACbkE,YAAa,SACbvS,QAAS,WACL2I,OAAOwH,aAAaI,QD3BD,KC2B0BF,KAAKG,UAAUR,KAC5D5C,IAAMtJ,KAAK,2BAA4B,CACnC2J,UAAW,IACXC,QAAS,kBAAM/E,OAAOC,SAAS6J,cAI3C,CACI7T,MAAO,oBACPyP,YAAa,qEACbkE,YAAa,aAmBNrN,MAfgB,WAC3B,OACI,yBAAKlG,UAAU,sBAEPwT,GAAe5S,KAAI,SAAC8S,EAAU7S,GAAX,OACf,kBAAC,GAAD,eACIE,IAAKF,GACD6S,UAQY,CACpC9T,MAAO,a,gZC7DX,IAAM+T,GAAgBtK,aAAH,MAiGJuK,GAjEuC,SAAC,GAEhD,IADHC,EACE,EADFA,eAAgBC,EACd,EADcA,WACd,EAEwCxK,aAASqK,IAA3CpK,EAFN,EAEMA,QAASC,EAFf,EAEeA,MAAOC,EAFtB,EAEsBA,KAAMC,EAF5B,EAE4BA,QAM9B,GAJApE,IAAMe,WAAU,WACZqD,MACD,CAACmK,EAAgBnK,IAEhBH,EACA,OACI,kBAAC,EAAD,CAAc9H,SAAS,YAAY7B,MAAM,yBAE1C,GAAI4J,EAEP,OADAM,MAAMN,EAAMO,SACL,KAGX,IAAMgK,EAActK,EAAKO,MAWnBgK,GAVkBF,EACpBC,EAAY7K,OAAO4K,GACjBC,GAQ+B3P,MAAK,SAAC6P,EAAOC,GAE9C,GAAID,EAAMnP,KAAKK,aAAe+O,EAAMpP,KAAKK,WAAY,OAAQ,EAC7D,IAAK8O,EAAMnP,KAAKK,YAAc+O,EAAMpP,KAAKK,WAAY,OAAO,EAE5D,IAAMgP,EAAgBF,EAAMvQ,WAAWd,OAASsR,EAAMxQ,WAAWd,OACjE,OAAsB,IAAlBuR,EAA4BA,EACzBF,EAAMrP,KAAK2F,cAAcJ,cAAc+J,EAAMtP,KAAK2F,kBAE7D,OACI,yBAAKvK,UAAU,4BACX,kBAAC,EAAD,CACIqI,MAAO2L,EACPvS,SAAS,YAAY7B,MAAM,oBAC3BsI,SAAS,gEAET,kBAACkC,GAAD,CAAY3B,KAAMuL,EACdtL,WACI,SAAC2B,EAAMC,GAAP,OAAgBD,EAAKzF,KAAK2F,cAAcC,SAASF,EAAKC,gBAE1D1B,YAAa,CACTjE,KAAM,kBACNnD,SAAU,SACV2F,YAAa,sBAEjBwB,oBAAqB,EACrBD,WAAY,SAAA0B,GAAI,OACZ,kBAAC,EAAD,iBAAcA,EAAd,CAAoBrJ,QAAS,kBAAM6S,EAAexJ,EAAKzF,gBCxDhEwP,I,MA9BqC,SAAC,GAE9C,IADHC,EACE,EADFA,KAAMC,EACJ,EADIA,WAEAC,EAA8C,SAAC,GAAD,IAAG1T,EAAH,EAAGA,EAAGmD,EAAN,EAAMA,OAAN,OAChD,yBAAKhE,UAAS,kEAA6DgE,IACvE,yBAAKhE,UAAU,uBACf,yBAAKA,UAAU,wBACVa,EAAI,GAET,yBAAKb,UAAU,yBAIjBwU,EAAoB,SAAC3T,GACvB,OAAIA,EAAIwT,EAAa,SACZxT,IAAMwT,EAAa,UAChB,WAEhB,OACI,yBAAKrU,UAAU,2BAEPyU,gBAAMH,GAAY1T,KAAI,SAAAC,GAAC,OACnB,kBAAC0T,EAAD,CAAe1T,EAAGA,EAAGmD,OAAQwQ,EAAkB3T,WCapD6T,GAlCuB,SAAC,GAGhC,IAFHC,EAEE,EAFFA,KAAMC,EAEJ,EAFIA,aAAc3O,EAElB,EAFkBA,SAAU/F,EAE5B,EAF4BA,MAAO2U,EAEnC,EAFmCA,YACrCP,EACE,EADFA,WACE,EACsBhP,IAAMC,SAAS,GADrC,mBACK8O,EADL,KACWS,EADX,KAOF,OAJAxP,IAAMe,WAAU,WACZyO,EAAQ,KACT,CAACH,IAEAA,EAGA,yBAAK3U,UAAU,mBAAmBE,MAAOA,GACrC,yBAAKF,UAAU,iBACX,yBAAKA,UAAU,UACX,6BACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAC8E,SAAU,IAAKhE,QAAS4T,GAAtC,oBAIJ,yBAAK5U,UAAU,yBACT6U,EAAYR,MAI1B,kBAAC,GAAD,CAAeA,KAAMA,EAAMC,WAAYA,IACvC,yBAAKtU,UAAU,kBACTiG,EAASoO,EAAMS,KAlBZ,MC8BNC,I,OAlCmC,SAAC,GAE5C,IADHC,EACE,EADFA,UAAWhO,EACT,EADSA,SAAU8F,EACnB,EADmBA,KAErB,OACI,yBAAK9M,UAAU,0BAEPgV,EAAUpU,KAAI,gBAAGgE,EAAH,EAAGA,KAAMuC,EAAT,EAASA,KAAM8N,EAAf,EAAeA,aAActO,EAA7B,EAA6BA,QAA7B,OACV,yBAAK3G,UAAU,iCAAiCe,IAAK6D,GACjD,yBAAK5E,UAAU,6BAA6BiV,GAE/B,WAAT9N,EACI,kBAAC,EAAD,CACIxF,MAAOmL,EAAKlI,GACZ+B,QAASA,EACTF,SAAU,SAAAuB,GAAG,OAAIhB,EAASpC,EAAMoD,MAGpC,kBAAC,EAAD,CACIb,KAAMA,EACNvC,KAAMA,EACNjD,MAAOmL,EAAKlI,GACZoC,SAAU,SAAAqG,GACNrG,EAASpC,EAAMyI,a,kMClCvD,IAAM6H,GAAY7L,aAAH,MA4DA8L,GAjDiC,SAAC,GAU1C,IAAD,QATFrI,KACIsI,EAQF,EAREA,aACAtK,EAOF,EAPEA,OACAK,EAMF,EANEA,MACAJ,EAKF,EALEA,SACAsK,EAIF,EAJEA,gBACAC,EAGF,EAHEA,UACA3R,EAEF,EAFEA,WAII8F,EAASH,aAAS4L,GAAW,CACjC/G,UAAW,CACP9D,KAAM+K,KAFN3L,KAMF8L,EAA4B,IAAdD,EACVnK,EAAQkK,EACRlK,EACV,OACI,yBAAKnL,UAAU,yBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,uBACToV,EACF,kBAACnV,EAAA,EAAD,gBACA,kCACOoV,IAGX,yBAAKrV,UAAU,wBACVuV,EADL,IACkBxK,IAGtB,yBAAK/K,UAAU,sBACX,yBAAKA,UAAU,0BAAf,UACa8K,EAASuK,EADtB,WACyC5L,QADzC,IACyCA,OADzC,YACyCA,EAAMY,YAD/C,aACyC,EAAYxF,KADrD,IAC4D,KAD5D,IAEMiG,EAFN,WAEerB,QAFf,IAEeA,OAFf,YAEeA,EAAMY,YAFrB,aAEe,EAAYxF,KAF3B,QAEqC,kBAAC5E,EAAA,EAAD,gBAFrC,KAIA,yBAAKD,UAAU,2BACX,kBAACC,EAAA,EAAD,cACC0D,EAAa,IAAIpB,KAAKoB,GAAY6R,eAAiB,UCtClEC,I,MAAmB,SAAC,GAAD,IAAET,EAAF,EAAEA,UAAWU,EAAb,EAAaA,YAAa5I,EAA1B,EAA0BA,KAAM6I,EAAhC,EAAgCA,aAAcb,EAA9C,EAA8CA,QAA9C,OAQrB,oCACI,kBAAC,GAAD,CAAahI,KAAMA,IACnB,kBAAC,GAAD,CACIA,KAAMA,EACNkI,UAAWA,EACXhO,SAAU2O,IAEd,yBAAKzV,MAAO,CAACqN,KAAM,KACnB,yBAAKvN,UAAU,8BACX,kBAAC,GAAD,CAAQJ,MAAM,WAAWC,KAAK,aAAaM,MAAM,GAC7Ca,QAAS,kBAAM8T,EAAQY,EAAc,MAEzC,kBAAC,GAAD,CAAQ9V,MAAM,OAAOC,KAAK,gBAAgBM,MAAM,GAC5Ca,QAAS,kBAAM8T,EAAQY,EAAc,UAuNtCE,GA5MyC,SAAC,GAElD,IADHjB,EACE,EADFA,KAAMC,EACJ,EADIA,aAAc1U,EAClB,EADkBA,MAAO2V,EACzB,EADyBA,iBAGrBC,EAAsC,CACxCV,aAAc,GACdjK,MAAO,EACPJ,SAAU,MACVD,OAAQ,EACRuK,gBAAiB,EACjBC,UAAW,EACX3R,WAAY,MATd,EAYwB2B,IAAMC,SAASuQ,GAZvC,mBAYMhJ,EAZN,KAYYC,EAZZ,KAcI4I,EAAe,SAACI,EAAmBpU,GAApB,OACjBoL,EAAQ,gBAAID,EAAL,gBAAYiJ,EAAYpU,MAOnC,GAJA2D,IAAMe,WAAU,WACZ0G,EAAQ+I,KACT,CAACnB,KAECA,EAAK,OAAO,KAwKjB,OACI,kBAAC,GAAD,CACIA,KAAMA,EACNC,aAAcA,EACdC,YAxKY,SAACR,GACjB,OAAQA,GACJ,KAAK,EACD,MAAO,cACX,KAAK,EACD,MAAO,UACX,QACI,MAAO,iBAkKXC,WAAY,EACZpU,MAAOA,IA/JM,SACjBmU,EACAS,GAsBA,OAAOT,GACH,KAAK,EACD,OACI,kBAAC,GAAD,CACIR,eAAgB,SAAAxJ,GACZsL,EAAa,eAAgBtL,GAC7ByK,EAAQ,MAIxB,KAAK,EACD,OACI,kBAAC,GAAD,CAAkBE,UAAW,CACrB,CACIpQ,KAAM,SAAUuC,KAAM,SACtB8N,aAAc,sBAElB,CACIrQ,KAAM,kBAAmBuC,KAAM,SAC/B8N,aAAc,yBAGtBS,YAAa,EACbZ,QAASA,EACThI,KAAMA,EACN6I,aAAcA,IAG1B,KAAK,EAED,OACI,kBAAC,GAAD,CAAkBX,UAAW,CACrB,CACIpQ,KAAM,QAASuC,KAAM,SACrB8N,aAAc,SAElB,CACIrQ,KAAM,WAAYuC,KAAM,SACxB8N,aAAc,WACdtO,QAAS,CACL,CACIhF,MAAO,MAAO4E,MAAO,UAEzB,CACI5E,MAAO,MAAO4E,MAAO,WAEzB,CACI5E,MAAO,MAAO4E,MAAO,QAEzB,CACI5E,MAAO,MAAO4E,MAAO,UAKjC,CACI3B,KAAM,YAAauC,KAAM,SACzB8N,aAAc,kBACdtO,QAAS,CACL,CACIhF,MAAO,EACP4E,MAAO,gBACP1G,KAAO,QAEX,CACI8B,MAAO,EACP4E,MAAO,iBACP1G,KAAO,kBAMvB6V,YAAa,EACbZ,QAASA,EACThI,KAAMA,EACN6I,aAAcA,IAG1B,KAAK,EACD,OACI,kBAAC,GAAD,CACIX,UAAW,CACP,CACIpQ,KAAM,aAAcuC,KAAM,OAC1B8N,aAAc,gBAGtBS,YAAa,EACbZ,QAASA,EACThI,KAAMA,EACN6I,aAAcA,IAG1B,KAAK,EACD,OACI,oCACI,kBAAC,GAAD,CAAa7I,KAAMA,IACnB,kBAAC,EAAD,CACIrL,SAAS,eACT7B,MAAM,iBACNsI,SAAS,iHAEb,yBAAKlI,UAAU,8BACX,kBAAC,GAAD,CAAQJ,MAAM,WAAWC,KAAK,aAAaM,MAAM,GAC7Ca,QAAS,kBAAM8T,EAAQ,MAE3B,kBAAC,GAAD,CAAQlV,MAAM,UAAUC,KAAK,uBAAuBM,MAAM,GACtDa,QAhIH,WAEjB,IAAMsR,EAAY0D,MAAMlJ,EAAKuI,iBAAiBY,KAAK,CAC/CzF,SAAU1D,EAAKsI,aACfjK,MAAO,IAAIN,GACY,IAAnBiC,EAAKwI,UACCxI,EAAK3B,MACLpJ,EAAY+K,EAAK3B,MAAQ2B,EAAKuI,gBAAiB,GACrDvI,EAAK/B,UACTpH,WAAYmJ,EAAKnJ,WACjBmH,OAAQgC,EAAKhC,SAGjB+K,EAAiBvD,GAEjBvF,EAAQ+I,GAERhB,EAAQ,QAoHR,KAAK,EACD,OACI,oCACI,kBAAC,EAAD,CAAcrT,SAAS,uBAAuB7B,MAAM,uBAChDsI,SAAS,6EAEb,yBAAKlI,UAAU,8BACX,kBAAC,GAAD,CAAQJ,MAAM,QAAQC,KAAK,QAAQM,MAAM,GAAGa,QAAS4T,IACrD,kBAAC,GAAD,CAAQhV,MAAM,YAAYC,KAAK,UAAUM,MAAM,GAAGa,QAAS,kBAAM8T,EAAQ,QAIzF,QACI,OAAO,U,uLC7OvB,IAAMoB,GAAa7M,aAAH,MAmCD8M,GAxB2C,SAAC,GAEpD,IADHjD,EACE,EADFA,MAAUpS,EACR,yBACM0P,EAA4C0C,EAA5C1C,SAAkB4F,EAA0BlD,EAAlCpI,OAAmBnH,EAAeuP,EAAfvP,WADnC,EAG+B2F,aAAS4M,GAAY,CAClD/H,UAAW,CAAEvJ,KAAM4L,KADfjH,EAHN,EAGMA,QAASE,EAHf,EAGeA,KAAMD,EAHrB,EAGqBA,MAIvB,OAAIA,GACAM,MAAMN,EAAMO,SACL,MAERR,EAAgB,KAEf,kBAAC,EAAD,eACIlI,SAAUmP,EACVjP,eAAgBoC,EAAaA,EAAW6D,eAAe,SAAW,iBAClElG,eAAgB,uCAAS8U,EAAT,YAAsB3M,EAAKY,KAAKxF,QAC5C/D,KCGDuV,GAjC+C,SAAC,GAExD,IADHC,EACE,EADFA,OAEA,GAAsB,IAAlBA,EAAO1T,OAAc,OAAO,KAGhC,IAAMmC,EAAcuR,EAAO7J,QAAO,SAAC8J,EAAOrD,GAAR,OAC9B,IAAIrI,GAAMqI,EAAM/H,MAAML,OAAQoI,EAAM/H,MAAMJ,UACrCK,GAAG,OACHoL,IAAID,KACV,IAAI1L,GAAM,EAAG,QAEV4L,EAAoBT,MAAMU,KAC5B,IAAIC,IAAIL,EAAO1V,KAAI,SAAAsS,GAAK,OAAIA,EAAM1C,aAAW1C,UAC/ClL,OACIgU,EAAgBN,EAAO1T,OAE7B,OACI,yBAAK5C,UAAU,sBACX,yBAAKA,UAAU,4BACf,yBAAKA,UAAU,4BACX,6BAAO4W,EAAP,iBACA,6BACEH,EADF,mBAGA,yBAAKzW,UAAU,0BAAf,UACY+E,EAAY+F,OAAO7I,QAAQ,GADvC,W,yMChBhB,IAAM4U,GAAaxN,aAAH,MA2FDyN,GAnFW,WAAO,IAAD,EACmBxR,IAAMC,UAAS,GADlC,mBACpBwR,EADoB,KACHC,EADG,OAEsB1R,IAAMC,SAAS,IAFrC,mBAEpB0R,EAFoB,KAEFC,EAFE,OAGe5R,IAAMC,UAAS,GAH9B,mBAGpB4R,EAHoB,KAGLC,EAHK,KAIpB1R,EAAkBE,IAAlBF,cACRJ,IAAMe,WAAU,WACZX,EAAc,CACV9F,MAAO,gBACPkG,WAAY,CACR,CACIrE,SAAU,MACVT,QAAS,kBAAMgW,GAAmB,UAI/C,IAfyB,MAiBJjJ,aAAY8I,IAA5BQ,EAjBoB,oBAqC5B,OACI,oCACI,kBAAC,GAAD,CACI1C,KAAMoC,EACNnC,aAAc,kBAAMoC,GAAmB,IACvCnB,iBAAkB,SAAAS,GAAM,OAAIY,EAAoB,GAAD,oBAAKD,GAAL,aAA0BX,QAE7E,yBAAKtW,UAAU,gBACX,kBAAC,EAAD,CAAoBqI,MAAO4O,EACvBxV,SAAS,gBACT7B,MAAM,qBACNsI,SAAS,gDACT,oCACI,yBAAKlI,UAAU,iCAEPiX,EAAiBrW,KAAI,SAACsS,EAAOrS,GAAR,OACjB,kBAAC,GAAD,CAAkBqS,MAAOA,EACrB1R,aAAc,CACVC,SAAU,SACVT,QAAS,kBAAMkW,EAEXD,EAAiB/N,QAAO,SAAChF,EAAGoT,GAAJ,OAAUzW,IAAMyW,eAQ3DP,GACG,kBAAC,GAAD,CAAoBT,OAAQW,IAGpC,kBAAC,GAAD,CACI1L,SAAsC,IAA5B0L,EAAiBrU,QAAgBuU,EAC3CvX,MAAM,MAAMO,MAAM,OAAON,KAAK,gBAC9BmB,QArDE,WACtBqW,EAAY,CACRlJ,UAAW,CAAEmI,OAAQW,KAEzB7I,IAAMC,QAAQ,eAAgB,CAC1BI,UAAW,IACX8I,OAAQ,WACJH,GAAiB,IAErB1I,QAAS,WACLsI,GAAmB,GACnBE,EAAoB,IACpBE,GAAiB,cCpD3BI,GAA2B,CAC7B,cAAe,EACf,cAAe,EACf,kBAAmB,EACnB,IAAO,GAQL7J,GAAyB,CAC3B,CAAC,CACG/I,KAAM,SACN2B,MAAO,SACPY,KAAM,SACN1F,SAAU,mBAEd,CAAC,CACGmD,KAAM,qBACN2B,MAAO,yBACPY,KAAM,SACNR,QAAS7C,OAAOC,KAAKyT,IACrB/V,SAAU,aA8DHgW,GApDiC,SAAC,GAE1C,IADH3M,EACE,EADFA,OAAQiF,EACN,EADMA,SAAU2H,EAChB,EADgBA,eAAgB7S,EAChC,EADgCA,KAE5BiR,EAAkC,CACpChL,OAAQ,EAER6M,mBAAoB7T,OAAOC,KAAKyT,IAA0B,IAJ5D,EAMsBlS,IAAMC,SAASuQ,GANrC,mBAMKhJ,EANL,KAMWC,EANX,KASI6K,EAAa,WAEf,OADaJ,GAAyB1K,EAAK6K,qBAEvC,KAAK,EACD,OAAO7K,EAAKhC,OAChB,KAAK,EACD,OAAOiF,EAAWjD,EAAKhC,OAC3B,KAAK,EACD,OAAOjJ,YAAYiJ,EAASiF,GAAYjD,EAAKhC,OAAS,MAAM7I,QAAQ,IACxE,QACI,OAAO6I,GAVA,GAcb+M,GAAe/M,EAAS8M,GAAa7H,EAAW,IAOtD,OAJAzK,IAAMe,WAAU,WACZqR,EAAeE,KAChB,CAACA,EAAWF,IAGX,yBAAK1X,UAAU,yBACX,kBAACiO,GAAD,CACItC,aAAcmK,EACdjK,OAAQ8B,GACR1B,kBAAkB,EAClBH,eAAe,QACfC,iBAAiB,UACjBI,aAAc,SAAAW,GAAI,OAAIC,EAAQD,MAElC,yBAAK9M,UAAU,uBAAf,cACgB,KACZ,yBAAKA,UAAU,4BACT8K,EAAS8M,GAAW3V,QAAQ,GADlC,IACuC4C,EADvC,KAC+CgT,EAAY5V,QAAQ,GADnE,U,upBCpEhB,IAAM6V,GAAkBzO,aAAH,MA+JN0O,GArGyC,SAAC,GAElD,IADGvH,EACJ,EADFnG,KAAgB2N,EACd,EADcA,kBAAmBC,EACjC,EADiCA,iBACjC,EAEwC3O,aAASwO,GAAiB,CAChE3J,UAAW,CACP9D,KAAMmG,KAFNjH,EAFN,EAEMA,QAASC,EAFf,EAEeA,MAAOC,EAFtB,EAEsBA,KAAMC,EAF5B,EAE4BA,QAF5B,EAQsCpE,IAAMC,SAAS,GARrD,mBAQK2S,EARL,KAQmBC,EARnB,OASkC7S,IAAMC,SAAS,GATjD,mBASK6S,EATL,KASiBC,EATjB,KAoBF,GATA/S,IAAMe,WAAU,WACRmK,GACA9G,EAAQ,CACJW,KAAMmG,IAGd2H,EAAgB,KACjB,CAAC3H,IAEAjH,EACA,OAAO,KAGX,GAAIC,EAEA,OADAM,MAAMN,EAAMO,SACL,KAGX,IAAMM,EAAOZ,EAAKY,KAGdzF,EACAyF,EADAzF,KAAMC,EACNwF,EADMxF,KAAMnB,EACZ2G,EADY3G,WAAYoB,EACxBuF,EADwBvF,KAGtBwT,EAAoB5U,EAAWwU,GAWrC,OACI,yBAAKlY,UAAU,6BACX,kBAAC,KAAD,CAAWuY,WAAY,GACnB,yBAAKrY,MAAO,CAACsY,WAAY,IAAzB,4BAEI,kBAAC,EAAD,CACI5T,KAAMA,EAAMC,KAAMA,EAClBnB,WAAYA,EACZoB,KAAMA,MAPtB,cAUgBoT,EAAe,EAV/B,OAUsCxU,EAAWd,OAC7C,yBAAK1C,MAAO,CAACuY,YAAa,GAAIC,aAAc,KACxC,kBAAC,KAAD,CAAQC,MAAI,EAACC,UAAU,EACnBC,YAAa,SAAAC,GAAW,OAAIX,EAAgBW,KAExCzO,EAAK3G,WAAW9C,KACZ,SAACkP,EAAWjP,GAAZ,OAAmB,kBAAC,GAAD,CACfE,IAAKF,EACLiP,UAAWA,EACXjL,KAAMwF,EAAKxF,YAM/B,yBAAK7E,UAAU,wCAEPsY,GACI,kBAAC,GAAD,CACIzT,KAAMwF,EAAKxF,KACXiG,OAAQwN,EAAkBxN,OAC1BiF,SAAUuI,EAAkBvI,SAC5B2H,eAAgB,SAAA5M,GAAM,OAAIuN,EAAcvN,OAKxD,yBAAK9K,UAAU,6BACX,kBAAC,GAAD,CAAQJ,MAAM,WAAWC,KAAK,UAAUM,MAAM,YAC1Ca,QAASiX,IAEb,kBAAC,GAAD,CAAQrY,MAAM,UAAWC,KAAK,QAC1BM,MAAM,OACNoL,aAhDR+M,GACGF,EAAa,GAAKA,GAAcE,EAAkBxN,QAgD7C9J,QAtDM,WAClBgX,EAAkBM,EAAmBF,SCb9BxC,GA7EyC,SAAC,GAElD,IADHjB,EACE,EADFA,KAAMC,EACJ,EADIA,aAAcmE,EAClB,EADkBA,oBAClB,EACsCzT,IAAMC,SAAS,MADrD,mBACK6P,EADL,KACmB4D,EADnB,KAgEF,OACI,kBAAC,GAAD,CACIrE,KAAMA,EACNC,aAAcA,EACdN,WAAY,EACZO,YAlEY,SAACR,GACjB,OAAOA,GACH,KAAK,EACD,MAAO,cACX,KAAK,EACD,MAAO,mBACX,KAAK,EACD,MAAO,UACX,QACI,MAAO,OAYE,SACjBA,EACAS,GAEA,OAAOT,GACH,KAAK,EACD,OACI,kBAAC,GAAD,CACIP,WAAY,SAAAzJ,GAAI,OAAIA,EAAK3G,WAAWd,OAAS,GAC7CiR,eAAgB,SAAAxJ,GAAS2O,EAAgB3O,GAAOyK,EAAQ,MAGpE,KAAK,EACD,OACI,kBAAC,GAAD,CACIzK,KAAM+K,EACN6C,iBAAkB,kBAAMnD,EAAQ,IAChCkD,kBAAmB,SAAClI,EAAWhF,IAzBxB,SAACgF,EAA0BhF,GAClDiO,EAAoB,CAChB1O,KAAM+K,EACNtF,YACAhF,WAsBgBmO,CAAmBnJ,EAAWhF,GAC9BgK,EAAQ,MAIxB,KAAK,EACD,OACI,oCACI,kBAAC,EAAD,CAAcrT,SAAS,uBAAuB7B,MAAM,eAChDsI,SAAS,qGAEb,yBAAKlI,UAAU,8BACX,kBAAC,GAAD,CAAQJ,MAAM,QAAQC,KAAK,QAAQM,MAAM,GAAGa,QAAS4T,IACrD,kBAAC,GAAD,CAAQhV,MAAM,cAAcC,KAAK,UAAUM,MAAM,GAAGa,QAAS,kBAAM8T,EAAQ,QAI3F,QACI,OAAO,U,uLC1EvB,IAAMoE,GAAa7P,aAAH,MA2ED8P,GAhEuD,SAAC,GAEhE,IADH9O,EACE,EADFA,KAAMyF,EACJ,EADIA,UAAWhF,EACf,EADeA,OAAQsO,EACvB,EADuBA,SACvB,EACwC9P,aAAS4P,IAA3C3P,EADN,EACMA,QAASC,EADf,EACeA,MAAOC,EADtB,EACsBA,KAAMC,EAD5B,EAC4BA,QAM9B,GAJApE,IAAMe,WAAU,WACZqD,EAAQ,CAAEW,WACX,CAACA,IAEAd,EACA,OAAO,KAGX,GAAIC,EAEA,OADAM,MAAMN,EAAMO,SACL,KAbT,IAgBMlF,EAA4B4E,EAAKY,KAAjCxF,KACFwU,EACF,yBAAKrZ,UAAU,gCAAf,IACO8K,EADP,IACkBjG,GAGhByU,EAAqBzX,YACrBiO,EAAUhF,OAASgF,EAAUC,SAAY,KAAK9N,QAAQ,IAGtDsX,EAAqB1X,YACtBiJ,EAASgF,EAAUC,SAAW,KAAK9N,QAAQ,IAE1CuX,EACF,yBAAKxZ,UAAU,yCACX,6BACKsZ,EADL,KAC0B,kBAACrZ,EAAA,EAAD,oBAD1B,IACoDqZ,EAAqBC,EADzE,KAGA,kBAAC,GAAD,CACIpZ,MAAM,SACNoP,eAAgB+J,EAChB9J,qBAAsB+J,IAGrBD,EAAqBC,EAAsB,GACxC,yBAAKvZ,UAAU,uCAAf,mBAQhB,OACI,kBAAC,EAAD,CACIqB,SAAUgJ,EACV/I,eAAgB+X,EAChB9X,eAAgBiY,EAChBhY,aAAc,CACVC,SAAU,gBACVT,QAASoY,M,iOCnEzB,IAAMK,GAAiBpQ,aAAH,MA4FLqQ,GApFe,WAAO,IAAD,EACgBpU,IAAMC,UAAS,GAD/B,mBACxBwR,EADwB,KACPC,EADO,OAEAjJ,aAAY0L,IAApCE,EAFwB,sBAM5BrU,IAAMC,SAAS,IANa,mBAI5BqU,EAJ4B,KAK5BC,EAL4B,OAQcvU,IAAMC,UAAS,GAR7B,mBAQzBuU,EARyB,KAQRC,EARQ,KAUxBrU,EAAkBE,IAAlBF,cAWR,OATAJ,IAAMe,WAAU,WACZX,EAAc,CACV9F,MAAO,eACPkG,WAAY,CAAC,CACTrE,SAAU,MACVT,QAAS,kBAAMgW,GAAmB,UAG3C,IAEC,oCACI,kBAAC,GAAD,CACIrC,KAAMoC,EACNnC,aAAc,kBAAMoC,GAAmB,IACvC+B,oBAAqB,SAAC7F,GAAD,OAAW2G,EAAwB,GAAD,oBAChDD,GADgD,CAEnD1G,QAGR,kBAAC,EAAD,CACI7K,MAAOuR,EACPnY,SAAS,WACT7B,MAAM,iBACNsI,SAAS,0DAET,oCACI,yBAAKlI,UAAU,gCAEP4Z,EAAqBhZ,KACjB,SAACsS,EAAOrS,GAAR,OACI,kBAAC,GAAD,iBACQqS,EADR,CAEIkG,SAAU,kBAAMS,EACZD,EAAqB1Q,QAAO,SAAChF,EAAGoT,GAAJ,OAAUzW,IAAMyW,cAOpE,kBAAC,GAAD,CAAQnX,MAAM,OACVa,QAAS,WACL2Y,EAAoB,CAChBxL,UAAW,CACPmI,OAAQsD,EAAqBhZ,KAAI,SAAAsS,GAAK,MAAK,CACvChB,WAAY,eACZiB,YAAaD,EAAMpD,UAAU8C,GAC7B9H,OAAQoI,EAAMpI,cAI1BsD,IAAMC,QAAQ,mBAAoB,CAC9BI,UAAW,IACX8I,OAAQ,WACJwC,GAAmB,IAEvBrL,QAAS,WAELmL,EAAwB,IACxBE,GAAmB,OAI/BxO,SAA0C,IAAhCqO,EAAqBhX,QAAgBkX,EAC/Cla,MAAM,UAAUC,KAAK,iB,SClEvCma,GAAsB,CACxBhQ,MAAO,IAiDIiQ,iBA9C8B,WAAkD,IAAjD5N,EAAgD,uDAAjC2N,GAAcE,EAAmB,uCAC1F,OAAOA,EAAO/S,MACV,IAAK,WACD,IAAMgT,EAAUD,EAAOzQ,KACvB,OAAO,gBAAI4C,EAAX,CAAkBrC,MAAM,GAAD,oBAAMqC,EAAMrC,OAAZ,CAAmBmQ,MAG9C,IAAK,WAAa,IAAD,EACmCD,EAAOzQ,KAA/C2Q,EADK,EACLA,OAAQC,EADH,EACGA,SAAUlP,EADb,EACaA,MAAOxH,EADpB,EACoBA,WAC3B2W,EAAQ,gBAAOjO,GACfhC,EAAOiQ,EAAStQ,MAAM6D,MAAK,SAAAxD,GAAI,OAAIA,EAAKuI,KAAOwH,KAErD,OAAI/P,GACJA,EAAKkQ,IAAIF,EAAUlP,EAAOxH,GAEnB2W,GAHUjO,EAKrB,IAAK,YAAc,IAAD,EACW6N,EAAOzQ,KAAxB2Q,EADM,EACNA,OAAQ/P,EADF,EACEA,KACViQ,EAAQ,gBACPjO,EADO,CAIVrC,MAAOqC,EAAMrC,MAAMpJ,KACf,SAAA4Z,GACI,OAAIJ,IAAWI,EAAE5H,GAAW4H,GAExBA,EAAEC,WACEpQ,EAAKzF,KACLyF,EAAKxF,KACLwF,EAAKqQ,mCAEFF,QAKvB,OAAOF,EAGX,IAAK,eACL,QACI,OAAOjO,MCjEJsO,GALA,I,MAAIC,GAAa,CAC5BC,S5B0EiB,gkD4BzEjBlJ,e,SCwBEmJ,I,OAAwB,WAG5B,OAFc,IAAIpa,gBAAgBF,cAAcD,QAEnCY,IAAI,SACf,KAAKvC,EACH,OAAO,kBAACkT,GAAD,MACT,KAAKlT,EACH,OAAO,kBAACmc,GAAD,MACT,KAAKnc,EACH,OAAO,kBAACoc,GAAD,MACT,KAAKpc,EACH,OAAO,kBAACqc,GAAD,MACT,KAAKrc,EACH,OAAO,kBAACsc,GAAD,MACT,KAAKtc,EACH,OAAO,kBAACuc,GAAD,MACT,KAAKvc,EACH,OAAO,kBAACwc,GAAD,MACT,KAAKxc,EACH,OAAO,kBAACyc,GAAD,MACT,QACE,OAAO,QA+BEC,GA5BO,WAOpB,OAJAhW,IAAMe,WAAU,YlBpBa,WAC3B,IAAM6K,EAAKD,KACNC,EAAGlH,QACJkH,EAAGlH,MAAQ,IAGfkH,EAAGlH,MAAMwI,SAAQ,SAACnI,EAAMxJ,EAAG0a,GAClBlR,EAAK3G,aACN6X,EAAS1a,GAAG6C,WAAa,IAExB2G,EAAKsG,aACNtG,EAAKsG,WAAa,MAG1Bc,GAAaP,GkBOXsK,KACD,IAGD,kBAAC,KAAD,CAAgBb,OAAQA,IACtB,yBAAK3a,UAAU,OACb,kBAAC,KAAD,CAAUyb,MAAOA,IACb,kBAAC,IAAD,CAAQlc,QAASA,GACb,kBAAC,EAAD,KACE,yBAAKS,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOD,KAAMlB,EAAOS,KAAMoc,UAAWZ,QAI3C,kBAAC,IAAD,MACA,kBAAC,EAAD,WC/DVa,GAAcC,QACW,cAA7BjS,OAAOC,SAASiS,UAEe,UAA7BlS,OAAOC,SAASiS,UAEhBlS,OAAOC,SAASiS,SAASC,MACvB,2DA8CN,SAASC,GAAgBC,EAAejL,GACtCkL,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlQ,QACf4P,UAAUC,cAAcQ,YAI1B/M,QAAQC,IACN,iHAKEmB,GAAUA,EAAO4L,UACnB5L,EAAO4L,SAASN,KAMlB1M,QAAQC,IAAI,sCAGRmB,GAAUA,EAAO6L,WACnB7L,EAAO6L,UAAUP,WAO5BQ,OAAM,SAAArT,GACLmG,QAAQnG,MAAM,4CAA6CA,MClGjEsT,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDqB1C,SAAkBlM,GACvB,GAA6C,kBAAmBkL,UAAW,CAMzE,GAJkB,IAAIiB,IACpBC,gBACAxT,OAAOC,SAASwT,MAEJC,SAAW1T,OAAOC,SAASyT,OAIvC,OAGF1T,OAAO2T,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMmB,gBAAN,sBAEPxB,KAgEV,SAAiCK,EAAejL,GAE9CwM,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASD,QAAQrc,IAAI,gBAEnB,MAApBsc,EAASzZ,QACO,MAAf0Z,IAA8D,IAAvCA,EAAYxc,QAAQ,cAG5C+a,UAAUC,cAAcyB,MAAMvB,MAAK,SAAAC,GACjCA,EAAauB,aAAaxB,MAAK,WAC7BzS,OAAOC,SAAS6J,eAKpBsI,GAAgBC,EAAOjL,MAG1B8L,OAAM,WACLlN,QAAQC,IACN,oEAvFAiO,CAAwB7B,EAAOjL,GAI/BkL,UAAUC,cAAcyB,MAAMvB,MAAK,WACjCzM,QAAQC,IACN,iHAMJmM,GAAgBC,EAAOjL,OC/C/BmL,I","file":"static/js/main.4b859caa.chunk.js","sourcesContent":["export const BaseName = \"/Inventory-v2\";\n\nexport const PageNames = {\n    FOOD_LIST: \"food\",\n    FOOD_ADD: \"food_new\",\n    FOOD_DETAILS: \"food_details\",\n    FOOD_EDIT: \"food_edit\",\n    BUY_FOOD: \"buy\",\n    CONTAINERS_LIST: \"containers\",\n    SETTINGS: \"settings\",\n    CONSUME: \"consume\",\n    HOME: \"\"\n};\n\nconst Routes = {\n    FOOD_LIST: \"/app?page=food\",\n    FOOD_ADD: \"/app?page=food_new\",\n    FOOD_DETAILS: \"/app?page=food_details\",\n    FOOD_EDIT: \"/app?page=food_edit\",\n\n    BUY_FOOD: \"/app?page=buy\",\n    CONTAINERS_LIST: \"/app?page=containers\",\n\n    SETTINGS: \"/app?page=settings\",\n\n    CONSUME: \"/app?page=consume\",\n    HOME: \"/app\"\n}\n\nexport default Routes","import { BaseName } from './routes';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory({\n    basename: BaseName, forceRefresh: false\n});\n\nexport default history;","import React from 'react';\nimport { Icon } from '@material-ui/core';\n\nexport type NavIconProps = {\n    title: string,\n    icon: string,\n    path: string,\n    active?: Boolean\n};\n\nconst NavIcon: React.FC<NavIconProps> = ({\n    title, icon, path, active\n}) => {\n    return (\n        <div className=\"NavIcon-Container\">\n            <div className={`NavIcon ${active?\"NavIcon-Active\":\"\"}`}>\n                <Icon style={{color: active?\"primary\":\"text\"}}>{icon}</Icon>\n                {' '}\n            </div>\n        </div>\n    )\n};\n\nexport default NavIcon;","import React from \"react\";\nimport NavIcon, { NavIconProps } from \"./NavIcon\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Routes, {PageNames} from '../../routes';\nimport \"./style.scss\";\n\nconst navItems: Array<NavIconProps & {tag: string[]}> = [\n    {\n        title: \"Assets\",\n        icon: \"work-outline\",\n        path: Routes.CONTAINERS_LIST,\n        tag: [PageNames.CONTAINERS_LIST]\n    },\n    {\n        title: \"Consume\",\n        icon: \"whatshot\",\n        path: Routes.CONSUME,\n        tag: [PageNames.CONSUME]\n    },\n    {\n        title: \"Food\",\n        icon: \"fastfood\",\n        path: Routes.FOOD_LIST,\n        tag: [\n            PageNames.FOOD_LIST, \n            PageNames.FOOD_ADD, \n            PageNames.FOOD_DETAILS\n        ]\n    },\n    {\n        title: \"Buy\",\n        icon: \"shopping-cart\",\n        path: Routes.BUY_FOOD,\n        tag: [PageNames.BUY_FOOD]\n    }, \n    {\n        title: \"Settings\",\n        icon: \"settings\",\n        path: Routes.SETTINGS,\n        tag: [PageNames.SETTINGS]\n    }\n];\n\n\nconst NavBar: React.FC = () => {\n    const { search } = useLocation();\n    const query = new URLSearchParams(search);\n    const history  = useHistory();\n    return (\n        <div className=\"NavBarContainer\">\n            {\n                navItems.map(({tag, ...props}, i) => (\n                    <div key={i} onClick={() => history.push(props.path as string)}>\n                        <NavIcon {...props} active={tag.indexOf(query.get('page') || \"\") > -1} />\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type GenericCardExtraProps = {\n    actionButton?: {\n        iconName: string,\n        onClick: () => void\n    }\n};\n\nexport type GenericCardProps = GenericCardExtraProps & {\n    mainText: string,\n    rightComponent: React.ReactNode,\n    smallComponent?: React.ReactNode,\n    onClick?: () => void,\n    style?: object\n};\n\nconst GenericCard: React.FC<GenericCardProps> = ({\n    mainText, rightComponent, smallComponent, onClick,\n    actionButton,\n    style\n}) => {\n    return (\n        <div className=\"GenericCard\" onClick={onClick} style={style}>\n            {\n                actionButton && (\n                    <div className=\"GenericCard-ActionButton\">\n                        <div onClick={actionButton.onClick}>\n                            <Icon >{actionButton.iconName}</Icon>\n                        </div>\n                    </div>\n                )\n            }\n            <div className=\"GenericCard-Left\">\n                <div className=\"GenericCard-MainText\">{mainText}</div>\n                <div className=\"GenericCard-containers\">\n                    { smallComponent }\n                </div>\n            </div>\n            \n            <div className=\"GenericCard-Right\">\n                { rightComponent }\n            </div>\n        </div>\n    );\n}\n\nexport default GenericCard;","export const dayToMs = (day: number | null) => {\n    return day? day * 24 * 3600 * 1000 : null;\n}\n\nexport const msToDay = (ms: number | null) => {\n    return ms? ms / 24 / 3600 / 1000 : null;\n}\n\nexport const convertToFloat = (value: string | number) => {\n    return Number.parseFloat(value.toString());\n}\n\nexport const roundNumber = (value: number, roundTo = 2) => parseFloat(value.toFixed(roundTo)) || 0;\n\nexport const getDifferenceInDaysFromNow = (date: Date) => {\n    return Math.ceil(Math.abs(\n            (new Date().getTime() - new Date(date).getTime()) / (1000 * 3600 * 24)\n        ));\n}\n\nexport const isTimeInPast = (time: Date) => {\n    return new Date(time).getTime() < new Date().getTime();\n}\n\nexport const randomString = (length: number) => {\n    let result           = '';\n    const characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for ( let i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n }","import React from 'react';\nimport { FoodContainer } from '../../data/typedefs';\nimport { Icon } from '@material-ui/core';\nimport { isTimeInPast } from '../../utils';\nimport _ from 'lodash';\n\nconst STATUS_COLOR = {\n    UNOPENED: {\n        color: 'white',\n        icon: \"kitchen\"\n    },\n    UNOPENED_EXPIRED: {\n        color: 'white',\n        icon: \"delete_forever\"\n    },\n    OPENED: {\n        color: 'orange',\n        icon: \"kitchen\"\n    },\n    OPENED_EXPIRED: {\n        color: 'orange',\n        icon: \"delete_forever\"\n    }\n}\n\ntype StatusTypes = keyof typeof STATUS_COLOR;\n\ntype ContainerOverviewProps = {\n    containers: FoodContainer[]\n};\nconst ContainerOverview: React.FC<ContainerOverviewProps> = ({\n    containers\n}) => {\n    const statusList : { status : keyof typeof STATUS_COLOR}[] = containers.map(({\n        expiryDate,\n        dateOpened,\n    }, i) => {\n\n        let status = Object.keys(STATUS_COLOR)[0] as StatusTypes;\n        const expired = !!expiryDate && isTimeInPast(expiryDate);\n        const opened  = !!dateOpened;\n\n        if (expired) {\n            status = opened ? \"OPENED_EXPIRED\" : \"UNOPENED_EXPIRED\";\n        } else {\n            status = opened ? \"OPENED\" : \"UNOPENED\";\n        }\n\n        return { status }\n    });\n\n    const counts = _.groupBy(statusList, \"status\");\n\n    return (\n        <>\n            {\n                (\n                    Object.keys(counts).sort((a, b) => counts[a].length - counts[b].length) as (keyof typeof STATUS_COLOR)[]\n                ).map(status => (\n                    <div style={{\n                        color: STATUS_COLOR[status].color, \n                        display: 'flex', \n                        alignItems: 'center', \n                        marginRight: 4 \n                    }}>\n                        <Icon style={{color: STATUS_COLOR[status].color }}>\n                            {STATUS_COLOR[status].icon} \n                        </Icon>\n                        {counts[status].length > 1 && `x ${counts[status].length}`}\n                    </div>\n                ))\n            }\n        </>\n    );\n};\n\nexport default ContainerOverview;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport GenericCard, { GenericCardExtraProps } from '../GenericCard';\nimport ContainerOverview from './ContainerOverview';\nimport { FoodContainer } from '../../data/typedefs';\n\ntype FoodCardProps = GenericCardExtraProps & {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number,\n        understock?: boolean\n    },\n    onClick?: () => void\n};\n\nconst SmallInfo = ({ \n    icon, value, style \n}: { icon?: string, value: number | string, style?: any}) => (\n    <div className=\"FoodCard-SmallInfo\" style={style}>\n        { icon && <Icon>{icon}</Icon> }\n        { value }\n    </div>\n);\n\nconst FoodCard: React.FC<FoodCardProps & RouteComponentProps<any>> = ({\n    name, unit, info, onClick, containers, ...props\n}) => {\n    const rightComponent = <SmallInfo value={`${info.totalAmount} ${unit}`} style={{fontSize: 18}} />;\n    const smallComponent = !info.numberOfContainers ?\n         \"No containers\" :\n         <ContainerOverview containers={containers} />;\n\n    const cardStyle = info.understock ? {backgroundColor: 'rgba(255, 0, 0, 0.3)'} : {};\n    return (\n        <GenericCard \n            mainText={name} \n            rightComponent={rightComponent} \n            smallComponent={smallComponent} \n            onClick={onClick} \n            style={cardStyle}\n            {...props}\n        />\n    );\n}\n\nexport default withRouter(FoodCard);","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport { useHistory } from 'react-router';\nimport constate from 'constate';\nimport './style.scss';\n\ntype NavButtonProps = {\n    iconName: string,\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\ntype HeaderProps = {\n    title: string,\n    withBackButton?: boolean,\n    navButtons?: Array<NavButtonProps>\n};\n\nexport type WithHeaderProps = {\n    setNavOptions: (opt: HeaderProps) => void;\n    navOptions: HeaderProps;\n    setHeaderTitle: (newTitle: string) => void;\n}\n\n// custom hooks\nexport function useHeaderHook() {\n    const [ navOptions, setNavOptions] = React.useState({\n        title: \"\",\n        withBackButton: false\n    } as HeaderProps);\n\n    return { navOptions, setNavOptions } ;\n};\n\nexport const [HeaderContextProvider, useHeader] = constate(useHeaderHook);\n\nconst Header: React.FC = () => {\n    const { \n        navOptions: {\n            title, navButtons, withBackButton\n        }\n    } = useHeader();\n\n    const history = useHistory();\n    return (\n        <div className=\"Header\">\n            <div>\n                {\n                    withBackButton && (\n                            <Icon style={{fontSize: 32}} onClick={() => history.goBack()}>navigate_before</Icon>\n                    )\n                }\n                {title}\n            </div>\n            \n            <div className=\"Header-NavButtonGroup\">\n                {\n                    navButtons && navButtons.map(({iconName, onClick}) => (\n                        <div className=\"Header-NavButton\" onClick={onClick}>\n                            <Icon>{iconName}</Icon>\n                        </div>\n                    ))                    \n                }\n            </div>\n        </div>\n    )\n}\n\nexport const HeaderContainer: React.FC = ({ children }) => {\n    return (\n        <HeaderContextProvider>\n            <Header/>\n            {children}\n        </HeaderContextProvider>\n    )\n};\n\nexport const withHeader = (WrappedComponent : React.FC<any>, newNavOptions : HeaderProps) => {\n    const Component: React.FC = props => {\n        const {setNavOptions} = useHeader();\n        React.useEffect(() => {\n            setNavOptions(newNavOptions);\n        }, []);\n\n        return <WrappedComponent {...props} />\n    }\n\n    return Component;\n}\nexport default Header;","import React from 'react';\nimport { ValueTypes } from '../index';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type Option = {\n    icon?: string,\n    value: ValueTypes,\n    label: string\n};\ntype ChipProps = Option & {\n    selected: boolean,\n    onSelect: () => void\n} ;\nconst Chip: React.FC<ChipProps> = ({\n    icon, label, \n    // value,\n    selected, onSelect\n}) => {\n    return (\n        <div \n            className={selected ? \"Chip-Selected\" : \"Chip\"} \n            onClick={onSelect}>\n            { icon && <Icon>{icon}</Icon>}\n            {label}\n        </div>\n    )\n}\ntype ChipSelectProps = {\n    value: ValueTypes,\n    options: Option[],\n    onSelect: (value: ValueTypes) => void\n}\nexport const ChipSelect: React.FC<ChipSelectProps> = ({\n    options, onSelect, value\n}) => {\n    // const [selectedOption, setSelectedOption] \n    //     = React.useState(null as ValueTypes | null);\n\n    // console.log(\"chip selected option in chipSelect: \" + selectedOption);\n\n    const onChipClicked = (value: ValueTypes) => {\n        // console.log('on chip clicked value: ' + value);\n        // setSelectedOption(value);\n        onSelect(value);\n    }\n\n    return (\n        <div className=\"ChipSelect-Container\">\n            {\n                options.map(option => (\n                    <Chip {...option} \n                        key={option.label}\n                        selected={value === option.value}\n                        onSelect={() => onChipClicked(option.value)}\n                    />\n                ))\n            }\n        </div>\n    )\n};\n\n","import React from 'react';\nimport {Icon} from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type InputTypes = \"text\" | \"textarea\" | \"number\" | \"date\" | \"select\";\nexport type ValueTypes = string | number | Date | null;\n\nexport type InputConfigProps = {\n    name: string;\n    label?: string;\n    type?: InputTypes;\n    iconName?: string;\n    placeholder?: string;\n    required?: boolean;\n    validate?: (value: ValueTypes) => boolean;\n    className?: string;\n}\n\nexport type SelectConfigProps = {\n    options: ValueTypes[];\n    multiple?: boolean;\n}\n\nexport type InputProps = InputConfigProps & {\n    value: ValueTypes,\n    onChange: (value: ValueTypes) => void,\n    disabled?: boolean\n}\n\nconst Input: React.FC<InputProps | InputProps & SelectConfigProps> = ({\n    onChange: rawOnChange, value,\n    // validation props\n    required = false, validate = () => true,\n    name,\n    label,\n    type = \"text\",\n    placeholder,\n    className,\n    iconName,\n    ...props\n}) => {\n    \n    // TODO: Isolate validation component\n    const [ isValid, setIsValid ] = React.useState(validate(value));\n    // on change armed with validation\n    const onChange = (value: ValueTypes) => {\n        if((required && !value) || !validate(value)) {\n            setIsValid(false);\n        } else { \n            setIsValid(true);\n        }\n        rawOnChange(value);\n    }\n\n    const valueToDisplay: (value: ValueTypes, type: InputTypes) => string | number = value => {\n        if (value instanceof Date) {\n            return value.toLocaleString('en-US');\n        } \n        return value || \"\";\n    }\n\n    const finalClassNameOuter = `Input  ${!isValid ? \"Invalid\" : \"\"}`;\n    const finalClassName = `Input-Inner ${className || \"\"}`;\n    switch(type) {\n        /**\n         * \n         *  The Select Field\n         * \n         */\n        case \"select\":\n            if(!(props as SelectConfigProps)) {\n                throw new Error(\"Input field is `select` but not options provided.\");\n            }\n            const { options, multiple = false, ...otherProps } = props as SelectConfigProps;\n            return (\n                <div>\n                    {label && <p>{label}</p>}\n                    <div className={finalClassNameOuter}>\n                        { iconName && <Icon>{iconName} </Icon>}\n                        <select\n                            multiple={multiple}\n                            name={name}\n                            {...otherProps}\n                            className={finalClassName}\n                            onChange={e => onChange(e.target.value)}\n                            value={valueToDisplay(value, type)}\n                        >\n                            {placeholder && \n                                <option value=\"\" selected={value === \"\"}>{placeholder}</option>\n                            }\n                            {\n                                options.map(opt => (\n                                    <option\n                                        selected={opt === value}>\n                                        {opt}\n                                    </option>\n                                ))\n                            }\n                        </select>\n                        <Icon>expand_more</Icon>\n                    </div>\n                </div>\n            )\n        /**\n         * \n         *  The General Input Field\n         * \n         */\n        default:\n            return (\n                <>\n                    {label && <p>{label}</p>}\n                    <div className={finalClassNameOuter}>\n                        { iconName && <Icon>{iconName} </Icon>}\n                        <input\n                            name={name}\n                            {...props}\n                            className={finalClassName}\n                            placeholder={placeholder}\n                            onChange={e => {\n                                switch(type) {\n                                    case \"number\":\n                                        onChange(parseFloat(e.target.value));\n                                        break;\n                                    default:\n                                        onChange(e.target.value);\n                                }\n                            }}\n                            type={type}\n                            value={valueToDisplay(value, type)}\n                        />\n                        {\n                            type === 'number' && (\n                                <div className=\"Input-NumberPicker\">\n                                    <Icon onClick={() => onChange((value as number || 0) + 1)}>expand_less</Icon>\n                                    <Icon onClick={() => onChange((value as number || 0) - 1)}>expand_more</Icon>\n                                </div>\n                            )\n                        }\n                    </div>\n                </>\n            )\n    }\n}\n\nexport default Input;\nexport * from \"./ChipSelect\";","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport './style.scss';\n\nexport type CenterNoticeProps = {\n    iconName: string,\n    title?: string, \n    subtitle?: string\n};\n\ntype CenterNoticeSwitchProps = CenterNoticeProps & {\n    watch: Array<any> | boolean,\n    children: any\n}\nconst CenterNotice: React.FC<CenterNoticeProps> = ({\n    iconName, title, subtitle\n}) => {\n    return (\n        <div className=\"CenterNotice\">\n            <Icon style={{fontSize: 72}}>{iconName}</Icon>\n            <div style={{textAlign: 'center'}}>\n                {\n                    title && <h3>{title}</h3>\n                }\n                {\n                    subtitle && <h6>{subtitle}</h6>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport const CenterNoticeSwitch: React.FC<CenterNoticeSwitchProps> = ({\n    watch, children, ...centerNoticeProps\n}) => {\n    if((watch as Array<any>).length === 0 || !(watch as boolean)) {\n        return (<CenterNotice {...centerNoticeProps} />);\n    } else {\n        return children;\n    }\n}\n\nexport default CenterNotice;","import React from 'react';\nimport Input, {InputConfigProps} from '../Input';\nimport { \n    CenterNoticeProps, \n    CenterNoticeSwitch \n} from '../CenterNotice';\nimport \"./style.scss\";\n\ntype SearchGroupProps<T> = {\n        list: Array<T>,\n        filterFunc: (item: T, searchTerm: string) => boolean\n        \n        minimumSearchLength?: number,\n        renderItem: (item: T) => React.ReactNode,\n        inputConfig: InputConfigProps,\n        emptyResultConfig?: CenterNoticeProps,\n}\n\nconst defaultEmptyResultConfig: CenterNoticeProps = {\n    iconName: \"search\",\n    title: \"No results found\"\n}\n\nconst SearchGroup: React.FC<SearchGroupProps<any>> = ({\n    list, filterFunc, renderItem,\n    minimumSearchLength = 1,\n    inputConfig,\n    emptyResultConfig = defaultEmptyResultConfig\n}) => {\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n    const searchResults = (searchTerm.length >= minimumSearchLength)?\n        list.filter(item => filterFunc(item, searchTerm)):list;\n\n    return (\n        <div className=\"SearchGroup\">\n            <div className=\"SearchGroup-Input\">\n                <Input\n                    \n                    {...inputConfig} \n                    value={searchTerm} \n                    onChange={e => setSearchTerm(e as string)}\n                />\n            </div>\n            <div className=\"SearchGroup-List\">\n                <CenterNoticeSwitch \n                    watch={searchResults} \n                    {...emptyResultConfig}\n                >\n                    { \n                           searchResults.map(item => renderItem(item))\n                    }\n                </CenterNoticeSwitch>\n            </div>\n        </div>\n    )\n    return null;\n}\n\nexport default SearchGroup;","import React from 'react';\nimport FoodCard from '../../components/FoodCard';\nimport { withHeader } from '../Header';\nimport { useLocation } from 'react-router-dom';\nimport history from '../../history';\nimport { Food } from '../../data/typedefs';\nimport SearchList from '../../components/SearchList';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport Routes from '../../routes';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from '@apollo/client';\n\ntype FoodPageProps = {\n    foods: Array<Food>\n}\n\nconst QUERY = gql`\n    {\n        foods @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                numberOfContainers\n                totalAmount\n                understock\n            }\n        }\n    }\n`;\n\n\nconst FoodPage: React.FC<FoodPageProps> = () => {\n    const { loading, error, data, refetch } = useQuery(QUERY);\n\n    React.useEffect(() => {\n        refetch()\n    }, [window.location.pathname]);\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n    if(loading) {\n        return <div> loading...</div>\n    }\n\n    \n    const foods = data.foods.sort((fa: Food, fb: Food) => fa.name.localeCompare(fb.name)) as Food[];\n\n\n    return (\n        <CenterNoticeSwitch watch={foods}\n            iconName=\"fastfood\"\n            title=\"No food is added\"\n            subtitle=\"click the '+' button to add a new type of food\"\n        >\n            <SearchList\n                list={foods}\n                filterFunc={\n                    (food, text) => (food as Food).name.toLowerCase().includes(text.toLowerCase())\n                }\n                inputConfig={{\n                    name: \"FoodSearchInput\",\n                    iconName: \"search\",\n                    placeholder: \"Search for food...\"\n                }}\n                minimumSearchLength={2}\n                renderItem={food => (\n                    <FoodCard {...food} \n                        onClick={() => history.replace(\n                            Routes.FOOD_DETAILS + `&food=${food.name}`\n                        )}\n                    />\n                )}\n            >\n\n            </SearchList>\n        </CenterNoticeSwitch>\n    );\n}\n\n\nexport default withHeader(FoodPage, {\n    title: \"Your Food\",\n    navButtons: [\n        {iconName: \"add\", onClick: () => history.push(Routes.FOOD_ADD)}\n    ]\n});\n\n","export const RawUnit = {\n    unit: \"unit\",\n    g: \"g\",\n    mL: \"mL\"\n}\n\nexport const RawCurrency = {\n    EUR: \"EUR\",\n    USD: \"USD\",\n    PLN: \"PLN\",\n    HKD: \"HKD\",\n}\n\nexport type Currency = keyof typeof RawCurrency;\nexport type Unit     = keyof typeof RawUnit;\n\n\nexport class Price {\n    static toHKDRate = (currency: Currency) => {\n        switch(currency) {\n            case \"EUR\": return 8.6;\n            case \"USD\": return 7.6;\n            case \"PLN\": return 2;\n            case \"HKD\": return 1;\n        }\n    };\n\n    static DEFAULT_ZERO = new Price(0, \"HKD\");\n\n    constructor(\n        readonly amount: number,\n        readonly currency: Currency\n    ) {}\n\n    public as(currency: Currency): Price {\n        const amountInHKD = this.amount * Price.toHKDRate(this.currency);\n        return new Price(amountInHKD / Price.toHKDRate(currency), currency);\n    }\n\n    public add(price: Price): Price {\n        const otherPriceInThisCurrency = price.as(this.currency);\n        return new Price(otherPriceInThisCurrency.amount + this.amount, this.currency);\n    }\n}\n\nexport interface FoodContainer {\n    id: string,\n    capacity: number,\n    amount: number,\n    datePurchased: Date\n    expiryDate?: Date,\n    dateOpened?: Date,\n    price: Price,\n\n}\n\nexport interface FoodInfo {\n    totalAmount: number,\n    percentageLeft: number\n}\n\nexport interface Food {\n    stockLevel?: number,\n    unit: Unit,\n    name: string,\n    containers: FoodContainer[],\n}\n\nexport interface BuyOrder {\n    foodName: string,\n    price: Price,\n    expiryDate?: Date,\n    amount: number\n};\n\nexport interface ConsumeOrder {\n    containerID: string,\n    amount: number\n}\n\nexport const typeDefs = `\n    enum Currency {\n        HKD\n        USD\n        EUR\n        PLN\n    }\n\n    enum Unit {\n        mL\n        g\n        unit\n    }\n\n\n    type Price {\n        currency: Currency!\n        amount: Number!\n    }\n\n    type FoodContainerInfo {\n        expired: Boolean!\n    }\n\n    type FoodContainer {\n        id: ID!\n        capacity: Number!\n        amount: Number!\n        datePurchased: Date!\n        expiryDate: Date\n        dateOpened: Date\n        price: Price!\n\n        opened: Boolean!\n        expired: Boolean!\n        percentageLeft: Number!\n    }\n\n    type FoodInfo {\n        numberOfContainers: Number!\n        expiredContainers: Number!\n        openedContainers: Number!\n        \n        totalAmount: Number!\n        totalWorth: Number!\n\n        percentageLeft: Number!\n\n        understock: Boolean!\n    }\n\n    type Food {\n        stockLevel: Number,\n        name: String!\n        unit: Unit!,\n        containers: [FoodContainer!]!\n        info: FoodInfo\n    }\n    \n    type BuyOrder {\n        foodName: String!\n        price: Price!\n        expiryDate: Date\n        amount: Number!\n    }\n\n    type ConsumeOrder {\n        containerID: ID!\n        amount: Number!\n    }\n\n    type Query {\n        food(name: String!): Food\n        foods: [Food]!\n    }\n\n    type Mutation {\n        addFood(name: String!, unit: Unit!): Food\n        buyFood(buyOrders: [BuyOrder]!): [FoodContainer]\n        editFood(originalName: String!, newData: Food!): Food\n        consumeFoods(consumeOrders: [ConsumeOrder]!): [ID!]\n    }\n`;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\ntype ButtonProps = {\n    title: string,\n    icon?: string,\n    color?: string,\n    onClick?: () => void,\n    disabled?: boolean,\n\n    className?: string\n};\n\nconst Button: React.FC<ButtonProps> = ({\n    title, icon, \n    color = \"primary\",\n    onClick,\n    disabled = false,\n    className\n}) => {\n    return (\n        <div\n            className={`${className} Button Button-${color} ${disabled? \"Button-Disabled\":\"\"}`} \n            onClick={!disabled ? onClick: undefined}>\n            {\n                icon && (\n                    <Icon>{icon}</Icon>\n                )\n            }\n            {title}\n        </div>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useHistory , useLocation } from 'react-router';\nimport { History, Location } from 'history';\nimport {Icon} from '@material-ui/core';\nimport { State } from '../../reducers';\nimport Button from '../Button';\nimport Input, { InputConfigProps, SelectConfigProps, ValueTypes, InputTypes } from '../Input';\nimport './style.scss';\n\n// The representation of the form value as JSON\nexport type FormValueType = {[key: string]: ValueTypes};\n\n// the config object shape\ntype BasicLayoutConfig = InputConfigProps & {\n    label?: string,\n    flex?: number,\n    inputStyle?: \"default\" | \"outlined\"\n};\n\n\n// the combined type\ntype SelectInputConfig = BasicLayoutConfig & SelectConfigProps;\ntype FormLayoutConfig = BasicLayoutConfig | SelectInputConfig;\n\n// the entire layout. The first array stores rows. Each row stores columns.\nexport type FormLayout = FormLayoutConfig[][] \n    | ((\n        store:          State, \n        history:        History<any>, \n        location:       Location<any>,\n        initialValues?: FormValueType) => FormLayoutConfig[][]);\n\n//  Type of the props passed to the <Form> Component\ntype FormProps = {\n    // connect\n    initialValue?: FormValueType,\n    layout: FormLayout,\n    submitIconName?: string,\n    submitButtonText?: string,\n    onSubmit?: (form: FormValueType) => void,\n    withSubmitButton?: boolean,\n    disabledFields?: (form: FormValueType) => string[],\n    setFormValue?: (form: FormValueType) => void,\n    disableSubmitButton?: boolean\n}\n\nconst FormComponent: React.FC<FormProps> = ({\n    initialValue: customInitialValue,\n    layout : layoutOrLayoutFunc, \n    submitIconName, submitButtonText,\n    onSubmit,\n    withSubmitButton = true,\n    disabledFields,\n    setFormValue,\n\n    disableSubmitButton\n}) => {\n\n    // see if the incoming layout is a function\n    // if it is then pass it to the store ( for validation). Otherwise use it as-is\n    const state  = useSelector(state => state, shallowEqual) as State;\n    const history = useHistory();\n    const location = useLocation();\n    \n    const layout = (typeof layoutOrLayoutFunc === 'function') \n        ? layoutOrLayoutFunc(state, history, location, customInitialValue) \n        : layoutOrLayoutFunc;\n    \n    // flatten all fields for easier manipulations\n    const allFields = [...layout.reduce((layouts, row) => [...layouts, ...row], [])];\n    // the initial values of the form\n    // if the type is number, then the value would be 0. otherwise empty string\n    const initialValues = customInitialValue || Object.assign({}, \n        ...allFields.map(({name, type, required}) => {\n            if (!required) return null;\n            switch(type) {\n                case \"number\":\n                    return { [name]: 0 }\n                case \"date\":\n                    return { [name]: new Date() }\n                default:\n                    return { [name]: \"\" }\n            }\n        })\n    );\n    \n    // the form state \n    const [form, setForm] = React.useState(initialValues);\n    \n    React.useEffect(() => {\n        setFormValue && setFormValue(form);\n    }, [form, setFormValue]);\n\n\n    const isAllFieldsValid = !allFields.some(({name, required, validate}) => (\n        (required && !form[name]) || (validate && !validate(form[name]))\n    ));\n\n    // functions for manipulating form states\n    const setField = (field: string, value: ValueTypes) => {\n        const type = typeof(initialValues[field]);\n        // resolve the problem of number fields when empty string is sent to the form\n        if (type === 'number') {\n            setForm({...form, [field]: parseFloat(value as string) || 0});\n        } else {\n            setForm({...form, [field]: value});\n        }\n    };\n    \n    const allDisabledFieldNames = disabledFields ? disabledFields(form) : [];\n    const inputFieldProps = (field: string) => ({\n        value: form[field],\n        onChange: (v: ValueTypes) => setField(field, v),\n        disabled: allDisabledFieldNames.includes(field)\n    });\n\n    return (\n        <div className=\"Form\">\n            {\n                // create all the rows\n                layout.map(row => (\n                    <div className=\"Form-Row\">\n                        {\n                            // create all the columns\n                            row.map(({\n                                // here is each of the form config\n                                name, \n                                flex = 1, \n                                ...inputConfigProps\n                            }) => (\n                                <div className=\"Form-Col\" style={{flex}}>\n                                    <Input\n                                        name={name} \n                                        {...inputConfigProps} \n                                        {...inputFieldProps(name)}\n                                    />\n                                </div>\n                            ))\n                        }\n                    </div>\n                ))\n            }\n            <div style={{flex: 1}} />\n            {\n                withSubmitButton && (\n                    <Button color=\"info\"\n                        title={submitButtonText || \"Submit\"}\n                        icon={submitIconName}\n                        onClick={onSubmit && (() => onSubmit(form))}\n                        disabled={!isAllFieldsValid || disableSubmitButton}\n                        className=\"Form-Submit\"\n                    />\n                )\n            }\n        </div>\n    )\n\n};\n\nexport default FormComponent;","import React from 'react';\nimport { History, Location } from 'history';\nimport { RawUnit } from '../../data/typedefs';\nimport { toast } from 'react-toastify';\nimport Routes from '../../routes';\nimport { withHeader } from '../Header';\nimport Form, { FormLayout, FormValueType } from '../../components/Form';\nimport { State } from '../../reducers';\nimport { gql } from '@apollo/client';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router';\n\nconst ADD_FOOD_QUERY = gql`\n    mutation addFood($name: String!, $unit: Unit!) {\n        addFood(name: $name, unit: $unit) @client {\n            id\n            name\n        }\n    }\n`;\n\nconst GET_FOOD_NAMES_QUERY = gql`\n    query {\n        foods @client {\n            name\n        }\n    }\n`;\n\nexport const formLayout: FormLayout = (\n    { foods }:  State, \n    history:    History<any>, \n    location:   Location<any>,\n    initialValue?: FormValueType) => [\n\n    [{  label: 'Food Name',\n        name: \"name\", placeholder: \"Name\", iconName: \"edit\", required: true,\n        // check if a food with same name exists\n        validate: newName => !foods.find(\n            ({name}) => {\n                return true;\n            }\n        )\n    }],\n    [{\n        label: \"Unit\",\n        name: \"unit\", placeholder: \"Unit\", required: true,\n        flex: 4, type: \"select\",\n        options: Object.values(RawUnit)\n    }],\n    [{\n        label: \"Expected Stock Level\", type: \"number\",\n        name: \"stockLevel\", placeholder: \"Stock level\",\n        validate: v => v === null || v >= 0\n    }]\n];\n\nconst CreateFoodPage: React.FC = () => {\n    const history = useHistory();\n    const { loading: loadingFoodList, error, data } = useQuery(GET_FOOD_NAMES_QUERY);\n    \n    const  [updateFoodFunc] = useMutation(ADD_FOOD_QUERY);\n\n\n    const onAddFood = async (form: FormValueType) => {\n        await updateFoodFunc({\n            variables: {\n                name: form.name,\n                unit: form.unit\n            }\n        })\n        \n        toast.success(\"Food Added.\", {\n            position: toast.POSITION.TOP_CENTER,\n            autoClose: 1000,\n            onClose: () => history.goBack()\n        });\n    }\n\n    return (\n        <Form\n            submitButtonText=\"Add Food\"\n            submitIconName=\"add\"\n            onSubmit={onAddFood}\n            layout={formLayout} \n        />\n    )\n};\n\nexport default withHeader(CreateFoodPage, {\n    title: \"Add Food\",\n    withBackButton: true\n});","import React from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { gql } from '@apollo/client';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { formLayout } from '../CreateFood';\nimport Form, { FormValueType } from '../../components/Form';\nimport { withHeader } from '../Header';\nimport { toast } from 'react-toastify';\nimport Routes from '../../routes';\n\nconst FOOD_LIST = gql`\n    query getFoodName($editingFood: String!) {\n        foods @client {\n            name\n        }\n        food(name: $editingFood) @client {\n            name\n            unit\n            stockLevel\n        }\n    }\n`;\n\nconst EDIT_FOOD = gql`\n    mutation editFood($originalName: String!, $food: Food!) {\n        editFood(originalName: $originalName, newData: $food) @client {\n            name\n        }\n    }\n`;\n\nconst EditFoodPage: React.FC = () => {\n    const [ showToast, setShowToast ] = React.useState(false);\n\n    const history  = useHistory();\n    const location = useLocation();\n    const originalFoodName = new URLSearchParams(location.search).get('food');\n    const { data: foodListData, loading } = useQuery(FOOD_LIST, {\n        variables: {\n            editingFood: originalFoodName\n        }\n    });\n\n    const [ editFoodMutation ]  = useMutation(EDIT_FOOD);\n    const onEditFood = async (form: FormValueType) => {\n        await editFoodMutation({\n            variables: {\n                originalName: originalFoodName,\n                food: form\n            }\n        });\n\n        toast.success(\"Info updated\", {\n            autoClose: 1000,\n            onClose: () => {\n                setShowToast(false);\n                history.push(Routes.FOOD_LIST);\n            }\n        });\n    }\n\n    if(loading) return null;\n    return (\n        <Form \n            layout={formLayout}\n            initialValue={foodListData?.food}\n            onSubmit={onEditFood}\n            disableSubmitButton={showToast}\n        />\n    );\n};\n\nexport default withHeader(EditFoodPage, {\n    title: \"Edit Food Info\",\n    withBackButton: true\n});","import React from 'react';\nimport { ValueTypes } from '../../components/Input';\nimport { Icon } from '@material-ui/core';\n\nexport type AuxInfoProps = {\n    title: string,\n    iconName?: string,\n    value: ValueTypes\n}\nconst AuxInfo: React.FC<AuxInfoProps> = ({title, iconName, value}) => {\n    return (\n        <div className=\"AuxInfo\">\n            {value}\n            <div className=\"AuxInfo-Title\">\n                {title}\n            </div>\n        </div>\n    )\n}\n\nexport default AuxInfo;","import React from 'react';\nimport { Icon } from '@material-ui/core';\n\nexport type ListInfoItemProps = {\n    iconName: string,\n    description: string,\n    value: string,\n    color: string,\n};\nconst ListInfoItem: React.FC<ListInfoItemProps> = ({\n    iconName, description, value, color\n}) => (\n    <div className=\"ListInfoItem-Container\">\n        <div className=\"ListInfoItem-Left\">\n            <Icon style={{color, fontSize: 32}}>{iconName} </Icon>\n        </div>\n        <div className=\"ListInfoItem-Right\" style={{color}}>\n            <div style={{color, fontSize: 18}}>{value}</div>\n            <div style={{color}}>{description}</div>\n        </div>\n    </div>\n);\n\nexport default ListInfoItem;\n","import React from 'react';\nimport \"./style.scss\";\n\n\nconst backgroundColor = 'rgba(255, 255, 255, 0.3)';\ntype PercentageBarProps = {\n    percentageLeft: number,\n    percentageDifference?: number,\n    color: string\n};\nconst PercentageBar: React.FC<PercentageBarProps> = ({\n    color, percentageLeft, percentageDifference = 0\n}) => (\n    <div className=\"PercentageBar\" style={{ \n        gridTemplateColumns: (() => {\n            const s = `${percentageLeft - percentageDifference}% ${percentageDifference}% ${100 - percentageLeft}%`;\n            console.log(s);\n            return s;\n        })()\n    }}>\n        <div />\n        <div />\n        <div />\n    </div>\n);\n\nexport default PercentageBar;","import React from 'react';\nimport { Price } from '../../data/typedefs';\nimport { Icon } from '@material-ui/core';\nimport PercentageBar from '../../components/PercentageBar';\nimport { getDifferenceInDaysFromNow, roundNumber } from '../../utils';\nimport \"./style.scss\";\n\ntype ContainerCardProps = {\n    container: {\n        capacity: number;\n        amount: number;\n        datePurchased: Date;\n        expiryDate?: Date;\n        dateOpened?: Date;\n        price: Price;\n\n        opened: boolean;\n        expired: boolean;\n        percentageLeft: number;\n    },\n    unit: string,\n    onClick?: () => void;\n};\nconst ContainerCard : React.FC<ContainerCardProps> = ({\n    container: {\n        capacity, amount, datePurchased, expiryDate,\n        dateOpened, price, opened, expired, percentageLeft\n    },\n    unit, onClick\n}) => {\n    \n    const color = expired ? \"red\" : (opened ? \"info\" : \"text\");\n    const containerIcon = expired ? \"delete_forever\" : \"kitchen\";\n\n    const expireDateString = () => {\n        if(!expiryDate) return \"\";\n        const daysDiff = getDifferenceInDaysFromNow(expiryDate);\n        if (expired) return `| Expired ${daysDiff} day(s) ago`;\n        else return `| Expire in ${daysDiff} days`;\n    };\n\n    return (\n        <div onClick={onClick} className={`ContainerCard-Container ContainerCard-Container-${color}`}>\n            <div className=\"ContainerCard-ContainerLeft\">\n                {getDifferenceInDaysFromNow(datePurchased)} days old\n                <Icon style={{color, fontSize: 32}}>{containerIcon}</Icon>\n                {roundNumber(price.amount)} {price.currency}\n            </div>\n            <div className=\"ContainerCard-ContainerRight\">\n                <div className=\"ContainerCard-ContainerRightUp\">\n                    {percentageLeft.toFixed(2)}%\n                    <PercentageBar color={color} percentageLeft={percentageLeft} />\n                </div>\n                <div className=\"ContainerCard-ContainerRightBottom\">\n                    {\n                        dateOpened ? (\n                            <>\n                                <Icon>broken_image</Icon> \n                                <h6>{new Date(dateOpened).toLocaleDateString()}</h6>\n                            </>\n                        ) : (\n                            <>\n                                <Icon>check</Icon> \n                                <h6>Unopened</h6>\n                            </>\n                        )\n                    }\n                    <h6 style={{color}}>\n                        { expireDateString() }\n                    </h6>\n                    { /* Small buffer here */}\n                    <div className=\"ContainerCard-Amount\">\n                        {amount} {unit}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ContainerCard;","import React from 'react';\nimport AuxInfo, { AuxInfoProps } from './auxInfo';\nimport ListInfoItem, { ListInfoItemProps} from './listInfoItem';\nimport { Price } from '../../data/types';\nimport { useHeader } from '../Header';\nimport Routes from '../../routes';\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport ContainerCard from '../../components/ContainerCard';\n\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport { roundNumber } from '../../utils';\n\nimport \"./style.scss\";\n\nconst FOOD_DETAIL_QUERY = gql`\n    query foodDetails($food: String!) {\n        food(name: $food) @client {\n            name\n            unit\n            stockLevel\n            containers {\n                capacity\n                amount\n                datePurchased\n                expiryDate\n                dateOpened\n                price\n\n                expired\n                opened\n                percentageLeft\n            }\n            info {\n                numberOfContainers\n                expiredContainers\n                openedContainers\n                totalAmount\n                totalWorth\n                percentageLeft\n                understock\n            }\n        }\n    }\n`;\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    stockLevel: number,\n    containers: [{\n        capacity: number,\n        amount: number,\n        datePurchased: Date,\n        expiryDate?: Date,\n        dateOpened?: Date,\n        price: Price,\n\n        expired: boolean,\n        opened: boolean,\n        percentageLeft: number\n    }],\n    info: {\n        numberOfContainers: number,\n        expiredContainers: number,\n        openedContainers: number,\n        totalAmount: number,\n        totalWorth: number,\n        percentageLeft: number,\n        understock: boolean\n    }\n}\nconst FoodDetailsPage: React.FC = () => {\n    const history  = useHistory();\n    const location = useLocation();\n    const { navOptions, setNavOptions } = useHeader();\n\n    const foodName = new URLSearchParams(location.search).get('food');\n    const { loading, error, data } = useQuery(FOOD_DETAIL_QUERY, {\n        variables: {\n            food: foodName\n        }\n    });\n\n    if(!foodName) history.goBack();\n\n    React.useEffect(() => {\n        setNavOptions({\n            ...navOptions,\n            title: foodName as string,\n            withBackButton: true,\n            navButtons: [{ \n                iconName: \"edit\", \n                onClick: () => history.push(`${Routes.FOOD_EDIT}&food=${foodName as string}`)\n            }]\n        });\n    }, []);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const food = data.food as QueryResultType;\n    // things to render under the main trendbar\n    const auxConfigs: AuxInfoProps[] = [\n        {\n            title: 'Total Amount',\n            iconName: 'kitchen',\n            value: `${roundNumber(food.info.totalAmount)} ${food.unit}`\n        },\n        {\n            title: 'Worth',\n            iconName: 'money',\n            value: `${roundNumber(food.info.totalWorth)} €`\n        },\n        {\n            title: \"Percentage Left\",\n            iconName: \"percentage\",\n            value: `${roundNumber(food.info.percentageLeft)} %`\n        },\n        {\n            title: \"Target Stock Amount\",\n            iconName: \"\",\n            value: `${food.stockLevel} ${food.unit}`\n        },\n    ];\n\n    const listInfoConfigs: ListInfoItemProps[] = [\n        {\n            color: 'white',\n            iconName: \"kitchen\",\n            description: \"Unopened Containers\",\n            value: (food.info.numberOfContainers - food.info.openedContainers).toString()\n        },\n        {\n            color: 'orange',\n            iconName:\"kitchen\",\n            description: \"Opened Containers\",\n            value: (food.info.openedContainers).toString()\n        },\n        {\n            color: 'red',\n            iconName:\"delete_forever\",\n            description: \"Expired Containers\",\n            value: (food.info.expiredContainers).toString()\n        }\n    ];\n\n    return (\n        <div className=\"FoodDetails-Container\">\n            {/*\n                Top section\n            */}\n             <div className=\"FoodDetails-TopSection\">\n                 <div className=\"FoodDetails-TopSection-AuxInfoRow\">\n                     {\n                         auxConfigs.map(config => (\n                             <AuxInfo key={config.title} {...config} />\n                         ))\n                     }\n                 </div>\n                 {\n                     food.info.numberOfContainers > 0 && (\n                        <div className=\"FoodDetails-TopSection-LIstInfoRow\">\n                            {\n                                listInfoConfigs.map((config, i) => (\n                                    <ListInfoItem {...config} key={i} />\n                                ))\n                            }\n                        </div>\n                     )\n                 }\n             </div>\n\n             <div className=\"FoodDetails-BottomSection\">\n                <CenterNoticeSwitch \n                    watch={food.containers}\n                    iconName=\"kitchen\"\n                    title=\"No Containers\"\n                    subtitle=\"Use the buy food function to add containers of this food\"\n                >\n                    <>\n                        <h6>{food.info.numberOfContainers} Container(s) </h6>\n                        {\n                            food.containers.map(\n                                (container) => <ContainerCard container={container} unit={food.unit} />\n                            )\n                        }\n                    </>\n                </CenterNoticeSwitch>\n             </div>\n        </div>\n    )\n}\n\nexport default FoodDetailsPage;","import React from 'react';\nimport CenterNotice from '../../components/CenterNotice';\nimport { withHeader } from '../Header';\n\nconst ContainerPage: React.FC = () => {\n    return <div>Hello world</div>;\n};\n\nexport default withHeader(ContainerPage,{\n    title: \"Assets\",\n    navButtons: [\n        {\n            iconName: \"add\",\n            onClick: () => {}\n        }\n    ]\n});","import { \n    Food, FoodContainer, \n    Unit, Price,\n    BuyOrder,\n    ConsumeOrder \n} from './typedefs';\nimport { \n    convertToFloat, \n    randomString, \n    roundNumber, \n    isTimeInPast \n} from '../utils';\n\nexport const localStorageKey = 'db';\n\ninterface DataBaseType {\n    foods: Array<Food & {[key: string]: any}>\n};\n\nexport const initialDatabase : DataBaseType = {\n    foods: []\n};\n\nconst loadDatabase = () => {\n    const db = localStorage.getItem(localStorageKey);\n    if (!db) {\n        localStorage.setItem(localStorageKey, \n            JSON.stringify(initialDatabase));\n            return initialDatabase;\n        } else {\n        return JSON.parse(db) as DataBaseType;\n    }\n};\n\nconst saveDatabase = (newDb: DataBaseType) => {\n    return localStorage.setItem(localStorageKey, JSON.stringify(newDb));\n};\n\nexport const correctDatabase = () => {\n    const db = loadDatabase();\n    if (!db.foods) {\n        db.foods = [];\n    }\n\n    db.foods.forEach((food, i, foodList) => {\n        if (!food.containers) {\n            foodList[i].containers = [];\n        }\n        if (!food.stockLevel) {\n            food.stockLevel = 0;\n        }\n    });\n    saveDatabase(db);\n}\n\nconst resolvers = {\n    Query: {\n        food: (_: any, { name }: { name: string }) => {\n            const db = loadDatabase();\n            const food = db.foods.find(food => food.name === name);\n            return food;\n        },\n        foods: () => {\n            const db = loadDatabase();\n            return db.foods;\n        },\n    },\n    FoodContainer: {\n        datePurchased: (container: FoodContainer) => {\n            return new Date(container.datePurchased);\n        },\n        opened: (container: FoodContainer) => {\n           return !!container.dateOpened;\n        },\n        expired: (container: FoodContainer) => {\n            return (!!container.expiryDate) && isTimeInPast(container.expiryDate);\n        },\n        percentageLeft: (container: FoodContainer) => {\n            return container.amount / container.capacity * 100;\n        }\n    },\n    Food: {\n        info: (food: Food) => {\n            const totalAmount = food.containers.reduce(\n                (sum, container) => sum + container.amount, 0\n            );\n            const totalCapacity = food.containers.reduce(\n                (sum, container) => sum + container.capacity, 0\n            );\n            \n            const expiredContainers = food.containers.filter(\n                container => container.expiryDate && new Date(container.expiryDate).getDate() < (new Date()).getDate()\n            ).length;\n\n            const openedContainers = food.containers.filter(\n                container => !!container.dateOpened\n            ).length;\n\n            const totalWorth = food.containers.reduce(\n                (sum, { price }) => sum + new Price(price.amount, price.currency).as(\"EUR\").amount, \n                0);\n            const numberOfContainers = food.containers.length;\n\n            const percentageLeft = (totalCapacity === 0) ? \n                0 : \n                totalAmount / totalCapacity * 100;\n            \n            const understock = food.stockLevel && food.stockLevel > totalAmount;\n\n            return {\n                __typename: \"FoodInfo\",\n                numberOfContainers,\n                expiredContainers,\n                openedContainers,\n                totalAmount,\n                totalWorth,\n                percentageLeft,\n                understock\n            };\n        }\n    },\n    Mutation: {\n        addFood: (_: any, { name, unit } : { name: string, unit: Unit}) => {\n            const db = loadDatabase();\n            db.foods.push({\n                __typename: \"Food\",\n                name, unit,\n                containers: [],\n            });\n\n            saveDatabase(db);\n        },\n\n        buyFood: (_: any, { buyOrders } : {buyOrders: BuyOrder[]}) => {\n            const db = loadDatabase();\n            const newFoodContainers : FoodContainer[] = [];\n            buyOrders.forEach(buyOrder => {\n                const { foodName: name, price, expiryDate, amount } = buyOrder;\n                \n                // locate the food this order is referring to\n                const foodId = db.foods.findIndex(food => food.name === name);\n                \n                // add food to the db if it is found\n                if (foodId > -1) {\n                    //@ts-ignore\n                    const container = {\n                        __typename: \"FoodContainer\",\n                        id: randomString(24),\n                        capacity: convertToFloat(amount),\n                        amount: convertToFloat(amount),\n                        datePurchased: new Date(),\n                        expiryDate: expiryDate ? new Date(expiryDate) : null, \n                        dateOpened: null,\n                        price: new Price(roundNumber(price.amount), price.currency)\n                    } as FoodContainer;\n\n                    db.foods[foodId].containers.push(container);\n                    newFoodContainers.push(container);\n                }\n            });\n\n            saveDatabase(db);\n            return newFoodContainers;\n        },\n        editFood: (\n            _: any, \n            { originalName, newData } : \n            { originalName: string, newData: Food}) => {\n            const db = loadDatabase();\n            db.foods = db.foods.map(food => {\n                if (food.name !== originalName) return food;\n                else return {\n                    ...newData,\n                    containers: food.containers // retain the containers as they should not be modified\n                };\n            });\n\n            saveDatabase(db);\n            return newData;\n        },\n\n        consumeFoods: (_: any, { consumeOrders }: {consumeOrders: ConsumeOrder[]}) => {\n            const db = loadDatabase();\n            let hasError = false;\n            consumeOrders.forEach(order => {\n                const { containerID, amount } = order;\n                const foodId = db.foods.findIndex(\n                    food => food.containers.find(con => con.id === containerID)\n                );\n\n                if (foodId < 0) {\n                    hasError = true;\n                    return;\n                };\n                const containerIndex = db.foods[foodId]\n                    .containers\n                    .findIndex(con => con.id === containerID);\n                \n                // check if container is okay to deduct\n                const container = db.foods[foodId].containers[containerIndex] as FoodContainer;\n                if (container.amount < amount) {\n                    hasError = true;\n                    return;\n                }\n\n                // apply the deduction\n                db.foods[foodId].containers[containerIndex].amount -= amount;\n                if (!db.foods[foodId].containers[containerIndex].dateOpened) {\n                    db.foods[foodId].containers[containerIndex].dateOpened = new Date();\n                }\n\n                // check if the container needs to be disposed\n                // you dispose a container if it is empty, or it has really really few food left.\n                const {amount: remainingAmount, capacity} = db.foods[foodId].containers[containerIndex];\n                if (remainingAmount / capacity < 0.01) {\n                    db.foods[foodId].containers = db.foods[foodId].containers.filter((_, i) => i !== containerIndex);\n                }\n            });\n\n            if (!hasError) {\n                saveDatabase(db);\n            }\n            return hasError ? \n                consumeOrders.map(({containerID}) => containerID) \n                : null;\n        }\n    }\n}\nexport default resolvers;\n","import React from 'react';\nimport { withHeader } from '../Header';\nimport \"./style.scss\";\nimport { toast } from 'react-toastify';\nimport { localStorageKey, initialDatabase } from '../../data/resolvers';\n\ntype ButtonWithDescriptionRowProps = {\n    title: string,\n    description: string,\n    buttonTitle: string,\n    onClick?: () => void\n}\nconst ButtonWithDescriptionRow: React.FC<ButtonWithDescriptionRowProps> = ({\n    title, description, buttonTitle, onClick \n}) => {\n    return (\n        <div className=\"Settings-DescriptionRow\">\n            <div className=\"Settings-DescriptionRowLeft\">\n                <div className=\"Settings-DescriptionRowTitle\">\n                    {title}\n                </div>\n                <div className=\"Settings-DescriptionRowDescription\">\n                    {description}\n                </div>\n            </div>\n            <div className=\"Settings-DescriptionRowRight\">\n                <div className=\"Settings-DescriptionRowButton\" onClick={onClick}>\n                    { buttonTitle }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst settingsConfig: ButtonWithDescriptionRowProps[] = [\n    {\n        title: \"Reset Database\",\n        description: \"Remove all data you have saved in the local storage. This can not be undone.\",\n        buttonTitle: \"Remove\",\n        onClick: () => {\n            window.localStorage.setItem(localStorageKey, JSON.stringify(initialDatabase));\n            toast.info(\"Database has been reset.\", {\n                autoClose: 3000,\n                onClose: () => window.location.reload()\n            });\n        }\n    },\n    {\n        title: \"Validate Database\",\n        description: \"Validate the values in the current database and try to correct it.\",\n        buttonTitle: \"Validate\"\n    },\n];\n\nconst SettingsPage: React.FC = () => {\n    return (\n        <div className=\"Settings-Container\">\n            {\n                settingsConfig.map((settings, i) => (\n                    <ButtonWithDescriptionRow \n                        key={i}\n                        {...settings}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default withHeader(SettingsPage, {\n    title: \"Settings\"\n});","import React from 'react';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport CenterNotice, { CenterNoticeSwitch} from '../CenterNotice';\nimport FoodCard from '../FoodCard';\nimport { FoodContainer } from '../../data/typedefs';\nimport SearchList from \"../../components/SearchList\";\nimport \"./style.scss\";\n\nconst GET_FOOD_LIST = gql`\n    query {\n        foods @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                totalAmount\n                numberOfContainers\n                understock   \n            }\n        }\n    }\n`;\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number,\n        understock: boolean\n    }\n};\n\ntype FoodTypePickerProps = {\n    onFoodSelected: (food: string) => void\n    filterFood?: (food: QueryResultType) => boolean\n};\nconst FoodTypePicker: React.FC<FoodTypePickerProps> = ({\n    onFoodSelected, filterFood\n}) => {\n\n    const { loading, error, data, refetch } = useQuery(GET_FOOD_LIST);\n    \n    React.useEffect(() => {\n        refetch();\n    }, [onFoodSelected, refetch]);\n    \n    if (loading) {\n        return (\n            <CenterNotice iconName=\"hamburger\" title=\"Loading Food List...\" />\n        )\n    } else if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const foodOptions = data.foods as QueryResultType[];\n    const filteredOptions = filterFood ? \n        foodOptions.filter(filterFood) \n        : foodOptions;\n    \n    /*\n        sort results according to....\n        if a food is understock, put it to priority\n        if both food are understock / not understock, sort by the number of containers\n        if they have the same number of containers, sort by their name\n    */\n    const finalOptions = filteredOptions.sort((foodA, foodB) => {\n        \n        if (foodA.info.understock && !foodB.info.understock) return -1;\n        if (!foodA.info.understock && foodB.info.understock) return 1;\n\n        const containerDiff = foodA.containers.length - foodB.containers.length;\n        if (containerDiff !== 0) return containerDiff;\n        return foodA.name.toLowerCase().localeCompare(foodB.name.toLowerCase());\n    })\n    return (\n        <div className=\"FoodTypePicker-Container\">\n            <CenterNoticeSwitch \n                watch={finalOptions} \n                iconName=\"hamburger\" title=\"No food available\"\n                subtitle=\"Add some food or buy some containers for them and try again.\"\n            >\n                <SearchList list={finalOptions}\n                    filterFunc={\n                        (food, text) => food.name.toLowerCase().includes(text.toLowerCase())\n                    }\n                    inputConfig={{\n                        name: \"FoodSearchInput\",\n                        iconName: \"search\",\n                        placeholder: \"Search for food...\"\n                    }}\n                    minimumSearchLength={1}\n                    renderItem={food => (\n                        <FoodCard {...food} onClick={() => onFoodSelected(food.name)} />\n                    )}\n                />\n            </CenterNoticeSwitch>\n        </div>\n    )\n};\n\nexport default FoodTypePicker;","import React from 'react'\nimport { range } from 'lodash';\nimport \"./style.scss\";\n\ntype StepIndicatorProps = {\n    step: number,\n    totalSteps: number\n};\ntype StepComponentProps = {\n    i: number,\n    status: \"passed\" | \"ongoing\" | \"pending\"\n};\nconst StepIndicator: React.FC<StepIndicatorProps> = ({\n    step, totalSteps\n}) => { \n    const StepComponent: React.FC<StepComponentProps> = ({ i, status }) => (\n        <div className={`StepIndicator-StepComponent StepIndicator-StepComponent-${status}`}>\n            <div className=\"StepIndicator-Line\" />\n            <div className=\"StepIndicator-Center\">\n                {i + 1}\n            </div>\n            <div className=\"StepIndicator-Line\" />\n        </div>\n    );\n\n    const getStatusFromStep = (i: number) => {\n        if (i < step) return \"passed\";\n        else if (i === step) return \"ongoing\";\n        else return \"pending\";\n    }\n    return (\n        <div className=\"StepIndicator-Container\">\n            {\n                range(totalSteps).map(i => (\n                    <StepComponent i={i} status={getStatusFromStep(i)} />\n                ))\n            }\n        </div>\n\n    )\n};\n\nexport default StepIndicator;","import React from 'react';\nimport StepIndicator from './StepIndicator';\nimport { Icon } from \"@material-ui/core\";\nimport \"./style.scss\";\n\ntype WizardProps = {\n    open: boolean;\n    totalSteps: number;\n    requestClose: () => void;\n    style?: object;\n    children: (step: number, toStep: (step: number) => void) => React.ReactNode;\n    headerTitle: (step: number) => string;\n}\nconst Wizard: React.FC<WizardProps> = ({\n    open, requestClose, children, style, headerTitle,\n    totalSteps\n}) => {\n    const [step, setStep] = React.useState(0);\n    \n    React.useEffect(() => {\n        setStep(0);\n    }, [open]);\n\n    if(!open) return null;\n    \n    return (\n        <div className=\"Wizard-Container\" style={style}>\n            <div className=\"Wizard-Header\">\n                <div className=\"Header\">\n                    <div>\n                        <Icon style={{fontSize: 32}} onClick={requestClose}>\n                            navigate_before\n                        </Icon>\n                    </div>\n                    <div className=\"Header-NavButtonGroup\">\n                        { headerTitle(step) }\n                    </div>\n                </div>\n            </div>\n            <StepIndicator step={step} totalSteps={totalSteps} />\n            <div className=\"Wizard-Content\">\n                { children(step, setStep) }\n            </div>\n        </div>\n    );\n};\n\nexport default Wizard;","import React from 'react';\nimport Input, { InputTypes, ValueTypes, ChipSelect, Option } from \"../../../components/Input\";\nimport \"./style.scss\";\n\n/**\n * Component containing forms for a small subset of questions to be filled out in a wizard.\n */\nexport type Question = {\n    name: string,\n    type: InputTypes,\n    questionText: string,\n    // for select fields only\n    options?: Option[]\n}\ntype QuestionStepProps = {\n    form: {[key: string]: ValueTypes},\n    questions: Question[],\n    onChange: (name: string, value: ValueTypes) => void\n}\nconst QuestionStep: React.FC<QuestionStepProps> = ({\n    questions, onChange, form\n}) => {\n    return (\n        <div className=\"QuestionStep-Container\">\n            {\n                questions.map(({ name, type, questionText, options}) => (\n                    <div className=\"QuestionStep-QuestionContainer\" key={name}>\n                        <div className=\"QuestionStep-QuestionText\">{questionText}</div>\n                        {\n                            type === 'select' ? (\n                                <ChipSelect \n                                    value={form[name]}\n                                    options={options as Option[]}\n                                    onSelect={opt => onChange(name, opt)}\n                                />\n                            ) : (\n                                <Input \n                                    type={type}\n                                    name={name}\n                                    value={form[name]} \n                                    onChange={v => {\n                                        onChange(name, v); \n                                    }}\n                                />\n                            )\n                        }\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default QuestionStep;","import React from 'react';\nimport { BuyOrderFormType } from \"../SelectFoodPopup\";\nimport { Icon } from '@material-ui/core';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport \"./style.scss\";\n\nconst FOOD_UNIT = gql`\n    query getFoodUnit($food: String!) {\n        food(name: $food) @client {\n            unit\n        }\n    }\n`;\n\ntype FormPreviewProps = {\n    form: BuyOrderFormType, \n}\nconst FormPreview: React.FC<FormPreviewProps> = ({\n    form: {\n        selectedFood,\n        amount,\n        price,\n        currency,\n        containersCount,\n        priceType,\n        expiryDate\n    }\n}) => {\n\n    const { data } = useQuery(FOOD_UNIT, {\n        variables: {\n            food: selectedFood\n        }\n    });\n\n    const totalPrice = (priceType === 0) \n            ? price * containersCount \n            : price;\n    return (\n        <div className=\"FormPreview-Container\">\n            <div className=\"FormPreview-Top\">\n                <div className=\"FormPreview-TopLeft\">\n                    { selectedFood}\n                    <Icon>kitchen</Icon>\n                    <div>\n                        x {containersCount}\n                    </div>\n                </div>\n                <div className=\"FormPreview-TopRight\">\n                    {totalPrice} {currency}\n                </div>\n            </div>\n            <div className=\"FormPreview-Bottom\">\n                <div className=\"FormPreview-BottomLeft\">\n                    Total: { amount * containersCount } {data?.food?.unit} {'  '}\n                    ({amount} {data?.food?.unit} per <Icon>kitchen</Icon>)\n                </div>\n                <div className=\"FormPreview-BottomRight\">\n                    <Icon>today</Icon>\n                    {expiryDate ? new Date(expiryDate).toDateString() : \"N/A\"}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FormPreview;","import React from 'react';\nimport { BuyOrder, Currency, Price } from '../../data/typedefs';\nimport { roundNumber } from \"../../utils\";\nimport FoodTypePicker from \"../../components/FoodTypePicker\";\nimport FoodQuantityInfo from \"./FoodQuantityInfo\";\nimport Button from '../../components/Button';\nimport CenterNotice from '../../components/CenterNotice';\nimport Wizard from '../../components/Wizard';\nimport QuestionStep, { Question } from './QuestionStep';\nimport FormPreview from './FormPreview';\n\nimport \"./style.scss\";\n\nexport type BuyOrderFormType = {\n    selectedFood: string,\n    price: number,\n    currency: Currency,\n    amount: number,\n    containersCount: number,\n    priceType: 0 | 1,\n    expiryDate: Date | null\n};\nconst QuestionStepPage = ({questions, currentPage, form, setFormField, setStep} : {\n    questions: Question[],\n    currentPage: number,\n    form: BuyOrderFormType,\n    setFormField: (name: string, value: any) => void,\n    setStep: (step: number) => void\n\n}) => (\n    <>\n        <FormPreview form={form} />\n        <QuestionStep \n            form={form}\n            questions={questions}\n            onChange={setFormField}\n        />\n        <div style={{flex: 1}} />\n        <div className=\"FoodQuantityInfo-ButtonRow\">\n            <Button title=\"Previous\" icon=\"arrow_back\" color=\"\" \n                onClick={() => setStep(currentPage - 1)} \n            />\n            <Button title=\"Next\" icon=\"arrow_forward\" color=\"\" \n                onClick={() => setStep(currentPage + 1)} \n            />\n        </div>\n    </>\n);\ntype SelectFoodPopupProps = {\n    open: boolean;\n    requestClose: () => void;\n    onBuyOrdersAdded: (orders: BuyOrder[]) => void;\n    style?: object;\n};\nconst SelectFoodPopup: React.FC<SelectFoodPopupProps> = ({\n    open, requestClose, style, onBuyOrdersAdded\n}) => {\n\n    const initialFormValue : BuyOrderFormType = {\n        selectedFood: \"\",\n        price: 0,\n        currency: \"EUR\",\n        amount: 0,\n        containersCount: 0, \n        priceType: 0,\n        expiryDate: null\n    };\n    \n    const [ form, setForm ] = React.useState(initialFormValue);\n\n    const setFormField = (fieldName: string, value: any) => (\n        setForm({...form, [fieldName]: value})\n    );\n    \n    React.useEffect(() => {\n        setForm(initialFormValue);\n    }, [open]);\n\n    if (!open)return null;\n\n    \n    \n    const headerTitle = (step: number) => {\n        switch (step) {\n            case 0:\n                return \"Select Food\";\n            case 5:\n                return \"Success\";\n            default:\n                return \"Fill in Info\";\n        }\n    };\n\n    const popupContent = (\n        step: number, \n        setStep: (step: number) => void\n    ) => {\n        const onSubmitForm = () => {\n            // convert the form to BuyOrder[]\n            const buyOrders = Array(form.containersCount).fill({\n                foodName: form.selectedFood,\n                price: new Price(\n                    form.priceType === 0 \n                        ? form.price \n                        : roundNumber(form.price / form.containersCount, 2),\n                    form.currency),\n                expiryDate: form.expiryDate,\n                amount: form.amount\n            } as BuyOrder);\n            // notify parent for buy orders \n            onBuyOrdersAdded(buyOrders);\n            // reset the form here\n            setForm(initialFormValue);\n            // proceed to next step (show the success message)\n            setStep(5);\n        };\n\n        switch(step) {\n            case 0:\n                return (\n                    <FoodTypePicker \n                        onFoodSelected={food => {\n                            setFormField(\"selectedFood\", food); \n                            setStep(1);\n                        }} \n                    />\n                );\n            case 1:\n                return (\n                    <QuestionStepPage questions={[\n                            { \n                                name: \"amount\", type: \"number\", \n                                questionText: \"Container Capacity\"\n                            },\n                            { \n                                name: \"containersCount\", type: \"number\",\n                                questionText: \"Number of containers\"\n                            }\n                        ]}\n                        currentPage={1}\n                        setStep={setStep}\n                        form={form}\n                        setFormField={setFormField}\n                    />\n                );\n            case 2:\n        \n                return (\n                    <QuestionStepPage questions={[\n                            { \n                                name: \"price\", type: \"number\", \n                                questionText: \"Price\"\n                            },\n                            { \n                                name: \"currency\", type: \"select\",\n                                questionText: \"Currency\",\n                                options: [\n                                    {\n                                        value: \"EUR\", label: \"€\"\n                                    },\n                                    {\n                                        value: \"PLN\", label: \"zł\"\n                                    },\n                                    {\n                                        value: \"HKD\", label: \"HK $\"\n                                    },\n                                    {\n                                        value: \"USD\", label: \"US $\"\n\n                                    },\n                                ]\n                            },\n                            {\n                                name: \"priceType\", type: \"select\",\n                                questionText: \"Price is for...\",\n                                options: [\n                                    {\n                                        value: 0,\n                                        label: \"One Container\",\n                                        icon:  \"stop\"\n                                    },\n                                    {\n                                        value: 1,\n                                        label: \"All Containers\",\n                                        icon:  \"view_module\"\n                                    },\n                                ]\n                                \n                            }\n                        ]}\n                        currentPage={2}\n                        setStep={setStep}\n                        form={form}\n                        setFormField={setFormField}\n                    />\n                );\n            case 3:\n                return (\n                    <QuestionStepPage \n                        questions={[\n                            {\n                                name: \"expiryDate\", type: \"date\",\n                                questionText: \"Expiry Date\"\n                            }\n                        ]} \n                        currentPage={3} \n                        setStep={setStep}\n                        form={form}\n                        setFormField={setFormField}\n                    />\n                );\n            case 4:\n                return (\n                    <>\n                        <FormPreview form={form} />\n                        <CenterNotice \n                            iconName=\"help_outline\"\n                            title=\"Is it correct?\"\n                            subtitle=\"Double check the info you provided above. If you would like to make corrections, click 'Previous' to correct\"\n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Previous\" icon=\"arrow_back\" color=\"\" \n                                onClick={() => setStep(3)} \n                            />\n                            <Button title=\"Confirm\" icon=\"check_circle_outline\" color=\"\" \n                                onClick={onSubmitForm} \n                            />\n                        </div>\n                    </>\n                );\n            case 5:\n                return (\n                    <>\n                        <CenterNotice iconName=\"check_circle_outline\" title=\"Food added to basket\"\n                            subtitle=\"You can choose 'Buy again' to add more, or 'Close' to review your basket\" \n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Close\" icon=\"close\" color=\"\" onClick={requestClose} />\n                            <Button title=\"Buy Again\" icon=\"refresh\" color=\"\" onClick={() => setStep(0)} />\n                        </div>\n                    </>\n                )\n            default:\n                return null;\n        }\n    }\n    return (\n        <Wizard \n            open={open} \n            requestClose={requestClose}\n            headerTitle={headerTitle} \n            totalSteps={6}\n            style={style}>\n            { popupContent }\n        </Wizard>\n    );\n};\n\nexport default SelectFoodPopup;","import React from 'react';\nimport GenericCard, { GenericCardExtraProps } from '../../components/GenericCard';\nimport { BuyOrder } from '../../data/typedefs';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst FOOD_QUERY = gql`\n    query GetFood($name: String!) {\n        food(name: $name) @client {\n            unit\n        }\n    }\n`;\ntype PendingOrderCardProps = GenericCardExtraProps & {\n    order: BuyOrder\n};\n\nconst PendingOrderCard: React.FC<PendingOrderCardProps> = ({\n    order, ...props\n}) => {\n    const { foodName, amount: addAmount, expiryDate } = order;\n\n    const { loading, data, error } = useQuery(FOOD_QUERY, {\n        variables: { name: foodName }\n    });\n    \n    if (error) {\n        alert(error.message);\n        return null;\n    }   \n    if(loading) return null;\n    return (\n        <GenericCard \n            mainText={foodName}\n            smallComponent={expiryDate ? expiryDate.toLocaleString(\"en-US\") : \"No expiry date\"}\n            rightComponent={<div>{`${addAmount} ${data.food.unit}`}</div>}\n            {...props}\n        />\n    )   \n};\n\nexport default PendingOrderCard;","import React from 'react';\nimport { BuyOrder, Price } from '../../data/typedefs';\n\ntype PendingInfoSummaryProps = {\n    orders: BuyOrder[]\n}\nconst PendingInfoSummary: React.FC<PendingInfoSummaryProps> = ({\n    orders\n}) => {\n    if (orders.length === 0) return null;\n\n    // compute info\n    const totalAmount = orders.reduce((total, order) => (\n        new Price(order.price.amount, order.price.currency)\n            .as(\"EUR\")\n            .add(total)\n    ), new Price(0, \"EUR\"));\n\n    const numDifferentFoods = Array.from(\n        new Set(orders.map(order => order.foodName)).values()\n    ).length;\n    const numContainers = orders.length;\n\n    return (\n        <div className=\"BuyPage-SummaryRow\">\n            <div className=\"BuyPage-SummaryRow-Left\"/>\n            <div className=\"BuyPage-SummaryRow-Total\">\n                <div>{ numContainers } Container(s)</div>\n                <div>\n                { numDifferentFoods } Different food\n                </div>\n                <div className=\"BuyPage-SummaryRow-Sum\">\n                    Total: {totalAmount.amount.toFixed(2)} EUR\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PendingInfoSummary;","import React from 'react';\nimport SelectFoodPopup from './SelectFoodPopup';\n\nimport Button from '../../components/Button';\nimport { BuyOrder } from '../../data/typedefs';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport PendingOrderCard from './PendingOrderCard';\nimport PendingInfoSummary from './PendingInfoSummary';\nimport { useHeader } from '../Header';\n\nimport { gql } from '@apollo/client';\nimport { useMutation } from '@apollo/react-hooks';\nimport { toast } from 'react-toastify';\nimport \"./style.scss\";\n\nconst ADD_ORDERS = gql`\n    mutation buyFoods($orders: [BuyOrder]!) {\n        buyFood(buyOrders: $orders) @client {\n            id\n        }\n    }\n`;\n\nconst BuyPage: React.FC = () => {\n    const [ openSelectPopup, setOpenSelectPopup] = React.useState(false);\n    const [ pendingBuyOrders, setPendingBuyOrders ] = React.useState([] as BuyOrder[]);\n    const [ hasJustBought, setHasJustBought] = React.useState(false);\n    const { setNavOptions } = useHeader();\n    React.useEffect(() => {\n        setNavOptions({\n            title: \"Purchase Food\",\n            navButtons: [\n                {\n                    iconName: \"add\",\n                    onClick: () => setOpenSelectPopup(true)\n                }\n            ]\n        });\n    }, []);\n\n    const [ buyFoodFunc ] = useMutation(ADD_ORDERS);\n\n    // handler of the final buy button\n    const onSubmitBuyOrders = () => {\n        buyFoodFunc({\n            variables: { orders: pendingBuyOrders}\n        });\n        toast.success(\"Items bought\", {\n            autoClose: 1000,\n            onOpen: () => {\n                setHasJustBought(true);\n            },\n            onClose: () => {\n                setOpenSelectPopup(false);\n                setPendingBuyOrders([]);\n                setHasJustBought(false);\n            }\n        });\n    };\n\n    return (\n        <>\n            <SelectFoodPopup \n                open={openSelectPopup} \n                requestClose={() => setOpenSelectPopup(false)}\n                onBuyOrdersAdded={orders => setPendingBuyOrders([...pendingBuyOrders, ...orders])}\n            />\n            <div className=\"BuyPage-Main\">\n                <CenterNoticeSwitch watch={pendingBuyOrders} \n                    iconName=\"shopping_cart\" \n                    title=\"Nothing to buy yet\"\n                    subtitle=\"Click the '+' button above to add a new item\">\n                    <>\n                        <div className=\"BuyPage-PendingItemContainers\">\n                            {\n                                pendingBuyOrders.map((order, i) => (\n                                    <PendingOrderCard order={order} \n                                        actionButton={{\n                                            iconName: 'cancel',\n                                            onClick: () => setPendingBuyOrders(\n                                                // remove this order from the list of pending orders\n                                                pendingBuyOrders.filter((_, j) => i !== j)\n                                            )\n                                        }}\n                                    />\n                                ))\n                            }\n                        </div>\n                        {\n                            !openSelectPopup && (\n                                <PendingInfoSummary orders={pendingBuyOrders} />\n                            )\n                        }\n                        <Button \n                            disabled={pendingBuyOrders.length === 0 || hasJustBought} \n                            title=\"Buy\" color=\"info\" icon=\"shopping_cart\" \n                            onClick={onSubmitBuyOrders} \n                        />\n                    </>\n                </CenterNoticeSwitch>\n            </div>\n            \n        </>\n    );\n}\n\nexport default BuyPage;","import React from 'react';\nimport Form, { FormLayout } from '../../components/Form';\n\nconst AmountInterpretationType = {\n    \"Amount Used\": 0,\n    \"Amount Left\": 1,\n    \"Percentage Left\": 2,\n    \"All\": 3\n};\n\ntype FormValueType = {\n    amount: number;\n    interpretationType: keyof typeof AmountInterpretationType;\n};\n\nconst formLayout: FormLayout = [\n    [{\n        name: \"amount\",\n        label: \"Amount\",\n        type: \"number\",\n        iconName: \"fitness_center\"\n    }],\n    [{\n        name: \"interpretationType\",\n        label: \"Interpret amount as...\",\n        type: \"select\",\n        options: Object.keys(AmountInterpretationType),\n        iconName: \"comment\"\n    }]\n];\n\ntype AmountInputProps = {\n    unit: string;\n    amount: number;\n    capacity: number;\n    onAmountChosen: (amount: number) => void\n}\nconst AmountInput: React.FC<AmountInputProps> = ({\n    amount, capacity, onAmountChosen, unit\n}) => {\n    const initialFormValue: FormValueType = {\n        amount: 0,\n        //@ts-ignore\n        interpretationType: Object.keys(AmountInterpretationType)[0]\n    }\n    const [form, setForm] = React.useState(initialFormValue);\n\n    // derived properties\n    const realValue = (() => {\n        const type = AmountInterpretationType[form.interpretationType];\n        switch(type) {\n            case 0:\n                return form.amount;\n            case 1:\n                return capacity - form.amount;\n            case 2:\n                return parseFloat((amount - capacity * (form.amount / 100)).toFixed(2));\n            default:\n                return amount;\n        }\n    })();\n\n    const percentLeft = (amount - realValue) / capacity * 100;\n\n    // report new amount when values changed\n    React.useEffect(() => {\n        onAmountChosen(realValue);\n    }, [realValue, onAmountChosen]);\n\n    return (\n        <div className=\"AmountInput-Container\">\n            <Form \n                initialValue={initialFormValue}\n                layout={formLayout}\n                withSubmitButton={false}\n                submitIconName=\"check\"\n                submitButtonText=\"Consume\"\n                setFormValue={form => setForm(form as FormValueType)}\n            />\n            <div className=\"AmountInput-Summary\">\n                Remaining: {'  '}\n                <div className=\"AmountInput-SummaryText\">\n                    {(amount - realValue).toFixed(2)} {unit} ({percentLeft.toFixed(1)} %)\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AmountInput;","import React from 'react';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport { FoodContainer, Price } from '../../data/typedefs';\nimport ContainerCard from '../../components/ContainerCard';\nimport FoodCard from '../../components/FoodCard';\nimport Button from '../../components/Button';\nimport AmountInput from './AmountInput';\nimport StickyBox from 'react-sticky-box';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nconst CONTAINER_QUERY = gql`\n    query getContainersForFood($food: String!) {\n        food(name: $food) @client {\n            name\n            unit\n            info {\n                totalAmount\n                numberOfContainers\n            }\n\n            containers {\n                id\n                capacity\n                amount\n                datePurchased\n                expiryDate\n                dateOpened\n                price\n\n                opened\n                expired\n                percentageLeft\n            }\n        }\n    }\n`;\n\ntype QueryResultType = {\n    // FoodCard props\n    name: string,\n    unit: string,\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n\n    // Containers list props\n    containers: [{\n        id: string;\n        capacity: number;\n        amount: number;\n        datePurchased: Date;\n        expiryDate?: Date;\n        dateOpened?: Date;\n        price: Price;\n\n        opened: boolean;\n        expired: boolean;\n        percentageLeft: number;\n    }]\n};\n\ntype ContainerPickerProps = {\n    food: string | null;\n    onToPreviousPage: () => void;\n    onSelectContainer: (container: FoodContainer, amount: number) => void;\n};\n\nconst ContainerPicker: React.FC<ContainerPickerProps> = ({\n    food: foodName, onSelectContainer, onToPreviousPage\n}) => {\n    \n    const { loading, error, data, refetch } = useQuery(CONTAINER_QUERY, {\n        variables: {\n            food: foodName\n        }\n    });\n\n    const [containerInd, setContainerInd] = React.useState(0);\n    const [amountUsed, setAmountUsed] = React.useState(0);\n\n    React.useEffect(() => {\n        if (foodName) {\n            refetch({\n                food: foodName\n            });\n        }\n        setContainerInd(0);\n    }, [foodName]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const food = data.food as QueryResultType;\n\n    const {\n        name, unit, containers, info\n    } = food;\n\n    const selectedContainer = containers[containerInd];\n\n    const onConfirmInfo = () => {\n        onSelectContainer(selectedContainer, amountUsed);\n    };\n\n    const isAmountValid = () => {\n        if(!selectedContainer) return false;\n        return amountUsed > 0 && amountUsed <= selectedContainer.amount;\n    }\n\n    return (\n        <div className=\"ContainerPicker-Container\">\n            <StickyBox offsetTop={-8}>\n                <div style={{paddingTop: 8}}>\n                    Selecting containers for:\n                    <FoodCard \n                        name={name} unit={unit} \n                        containers={containers as unknown as FoodContainer[]} \n                        info={info} />\n                </div>\n            </StickyBox>\n            Container #{containerInd + 1} of {containers.length}\n            <div style={{paddingLeft: 24, paddingRight: 24}}>\n                <Slider dots infinite={false} \n                    afterChange={containerId => setContainerInd(containerId)}>\n                    {\n                        food.containers.map(\n                            (container, i) => (<ContainerCard\n                                key={i} \n                                container={container} \n                                unit={food.unit} \n                            />)\n                        )\n                    }\n                </Slider>\n            </div> \n            <div className=\"ContainerPicker-AmountInputContainer\">\n                {\n                    selectedContainer && (\n                        <AmountInput\n                            unit={food.unit}\n                            amount={selectedContainer.amount} \n                            capacity={selectedContainer.capacity}\n                            onAmountChosen={amount => setAmountUsed(amount)}\n                        />\n                    )\n                }\n            </div>\n            <div className=\"ContainerPicker-ButtonRow\">\n                <Button title=\"Previous\" icon=\"refresh\" color=\"secondary\"\n                    onClick={onToPreviousPage} \n                />\n                <Button title=\"Confirm\"  icon=\"check\" \n                    color=\"info\"\n                    disabled={!isAmountValid()}\n                    onClick={onConfirmInfo}\n                />\n            </div>\n        </div>\n    );\n    \n}\n\nexport default ContainerPicker;\n","import React from 'react';\nimport Wizard from '../../components/Wizard';\nimport FoodTypePicker from '../../components/FoodTypePicker';\nimport Button from '../../components/Button';\nimport ContainerPicker from './ContainerPicker';\nimport CenterNotice from '../../components/CenterNotice';\n\nimport { FoodContainer } from '../../data/typedefs';\n\nexport type PendingConsumeOrder = {\n    food: string,\n    container: FoodContainer,\n    amount: number\n}\n\ntype SelectFoodPopupProps = {\n    open: boolean;\n    requestClose: () => void;\n    onConsumeOrderAdded: (order: PendingConsumeOrder) => void;\n}\n\nconst SelectFoodPopup: React.FC<SelectFoodPopupProps> = ({\n    open, requestClose, onConsumeOrderAdded\n}) => {\n    const [selectedFood, setSelectedFood] = React.useState(null as string | null);\n    \n    const headerTitle = (step: number) => {\n        switch(step) {\n            case 0:\n                return \"Select Food\";\n            case 1:\n                return \"Select Container\";\n            case 2:\n                return \"Success\";\n            default:\n                return \"\";\n        }\n    };\n\n    const reportConsumeOrder = (container: FoodContainer, amount: number) => {\n        onConsumeOrderAdded({\n            food: selectedFood as string,\n            container,\n            amount\n        });\n    };\n\n    const popupContent = (\n        step: number,\n        setStep: (step: number) => void\n    ) => {\n        switch(step) {\n            case 0:\n                return (\n                    <FoodTypePicker\n                        filterFood={food => food.containers.length > 0} \n                        onFoodSelected={food => {setSelectedFood(food); setStep(1)}} \n                    />\n                );\n            case 1:\n                return (\n                    <ContainerPicker \n                        food={selectedFood}\n                        onToPreviousPage={() => setStep(0)}\n                        onSelectContainer={(container, amount) => {\n                            reportConsumeOrder(container, amount); \n                            setStep(2);\n                        }}\n                    />\n                );\n            case 2:\n                return (\n                    <>\n                        <CenterNotice iconName=\"check_circle_outline\" title=\"Record added\"\n                            subtitle=\"You can choose 'Add Another' to add another record, or 'Close' to review your consumption order.\" \n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Close\" icon=\"close\" color=\"\" onClick={requestClose} />\n                            <Button title=\"Add Another\" icon=\"refresh\" color=\"\" onClick={() => setStep(0)} />\n                        </div>\n                    </>\n                )\n            default: \n                return null;\n        }\n    }\n\n    return (\n        <Wizard\n            open={open} \n            requestClose={requestClose}\n            totalSteps={3}\n            headerTitle={headerTitle}>\n            {popupContent}\n        </Wizard>\n    );\n};\n\nexport default SelectFoodPopup;\n","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport GenericCard from '../../components/GenericCard';\nimport PercentageBar from '../../components/PercentageBar';\nimport { Food, FoodContainer } from '../../data/typedefs';\nimport { PendingConsumeOrder } from './SelectFoodPopup';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst UNIT_QUERY = gql`\n    query getUnit($food: String!) {\n        food(name: $food) @client {\n            unit\n        }\n    }\n`;\ntype PendingConsumptionCardProps = PendingConsumeOrder & {\n    onRemove: () => void\n};\n\nconst PendingConsumptionCard: React.FC<PendingConsumptionCardProps> = ({\n    food, container, amount, onRemove\n}) => {\n    const { loading, error, data, refetch } = useQuery(UNIT_QUERY);\n    \n    React.useEffect(() => {\n        refetch({ food });\n    }, [food]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const { unit } : { unit: string } = data.food;\n    const RightComponent = (\n        <div className=\"PendingConsumptionCard-Right\">\n            -{ amount } { unit }\n        </div>\n    );\n    const originalPercentage = parseFloat(\n        ((container.amount / container.capacity) * 100).toFixed(2)\n    );\n\n    const consumedPercentage = parseFloat(\n        (amount / container.capacity * 100).toFixed(2)\n    );\n    const AuxComponent = (\n        <div className=\"PendingConsumptionCard-SmallComponent\">\n            <div>\n                {originalPercentage}% <Icon>arrow_right</Icon> {originalPercentage - consumedPercentage}%\n            </div>\n            <PercentageBar \n                color=\"orange\"\n                percentageLeft={originalPercentage}\n                percentageDifference={consumedPercentage} \n            />\n            {\n                (originalPercentage - consumedPercentage) < 1 && (\n                    <div className=\"PendingConsumptionCard-DisposeLabel\">\n                        To be disposed\n                    </div>\n                )\n            }\n        </div>\n    );\n\n    return (\n        <GenericCard \n            mainText={food}\n            rightComponent={RightComponent}\n            smallComponent={AuxComponent}\n            actionButton={{\n                iconName: \"highlight_off\",\n                onClick: onRemove\n            }}\n        />\n    );\n};\n\nexport default PendingConsumptionCard;","import React from 'react';\nimport { useHeader } from '../Header';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport Button from '../../components/Button';\nimport SelectFoodPopup, { PendingConsumeOrder } from './SelectFoodPopup';\nimport PendingConsumptionCard from './PendingConsumptionCard';\nimport { gql } from '@apollo/client';\nimport { useMutation } from '@apollo/react-hooks';\nimport { toast } from 'react-toastify';\nimport \"./style.scss\";\n\nconst CONSUME_ORDERS = gql`\n    mutation consumeFoods($orders: [ConsumeOrder]!) {\n        consumeFoods(consumeOrders: $orders) @client {\n            id\n        }\n    }\n`;\n\nconst ConsumePage: React.FC = () => {\n    const [ openSelectPopup, setOpenSelectPopup ] = React.useState(false);\n    const [ submitConsumeOrders ] = useMutation(CONSUME_ORDERS);\n    const [ \n        pendingConsumeOrders, \n        setPendingConsumeOrders \n    ] = React.useState([] as PendingConsumeOrder[]);\n\n    const [hasJustConsumed, setHasJustConsumed] = React.useState(false);\n\n    const { setNavOptions } = useHeader();\n\n    React.useEffect(() => {\n        setNavOptions({\n            title: \"Consume Food\",\n            navButtons: [{\n                iconName: \"add\",\n                onClick: () => setOpenSelectPopup(true)\n            }]\n        });\n    }, []);\n    return (\n        <>\n            <SelectFoodPopup \n                open={openSelectPopup}\n                requestClose={() => setOpenSelectPopup(false)}\n                onConsumeOrderAdded={(order) => setPendingConsumeOrders([\n                    ...pendingConsumeOrders,\n                    order\n                ])}\n            />\n            <CenterNoticeSwitch \n                watch={pendingConsumeOrders}\n                iconName=\"whatshot\"\n                title=\"No Items added\"\n                subtitle=\"Use the '+' button above to add containers to consume.\"\n            >\n                <>\n                    <div className=\"PendingConsumption-Container\">\n                        {\n                            pendingConsumeOrders.map(\n                                (order, i) => (\n                                    <PendingConsumptionCard \n                                        {...order}\n                                        onRemove={() => setPendingConsumeOrders(\n                                            pendingConsumeOrders.filter((_, j) => i !== j)\n                                        )}\n                                    />\n                                )\n                            )\n                        }\n                    </div>\n                    <Button color=\"info\"\n                        onClick={() => {\n                            submitConsumeOrders({\n                                variables: {\n                                    orders: pendingConsumeOrders.map(order => ({\n                                        __typename: \"ConsumeOrder\",\n                                        containerID: order.container.id,\n                                        amount: order.amount\n                                    }))\n                                }\n                            });\n                            toast.success(\"Records saved...\", {\n                                autoClose: 1000,\n                                onOpen: () => {\n                                    setHasJustConsumed(true);\n                                },\n                                onClose: () => {\n                                    // reset the form\n                                    setPendingConsumeOrders([]);\n                                    setHasJustConsumed(false);\n                                }\n                            });\n                        }}\n                        disabled={pendingConsumeOrders.length === 0 || hasJustConsumed}\n                        title=\"Consume\" icon=\"whatshot\" \n                    />\n                </>\n            </CenterNoticeSwitch>\n        </>\n    );\n}\n\nexport default ConsumePage;","import { createStore, Reducer } from 'redux';\nimport { Food, FoodContainer, Price } from '../data/types';\n\nexport type State = {\n    foods: Array<Food>,\n};\n\nexport type ActionTypes = \"ADD_FOOD\"\n    | \"EDIT_FOOD\"\n    | \"BUY_FOOD\"\n    | \"CONSUME_FOOD\";\n\n\nexport type Action = {\n    type: ActionTypes,\n    data: Food | BuyFoodOrder | EditFoodOption\n}\n\nexport type EditFoodOption = {\n    foodID: string,\n    food: Food\n}\nexport type BuyFoodOrder = {\n    foodID: string,\n    quantity: number,\n    price: Price,\n    expiryDate?: Date\n}\n\nconst initialState: State = { \n    foods: [] \n};\n\nconst rootReducers: Reducer<State, Action> = (state: State = initialState, action: Action) => {\n    switch(action.type) {\n        case \"ADD_FOOD\": {\n            const newFood = action.data as Food;\n            return {...state, foods: [...state.foods, newFood]};\n        }\n\n        case \"BUY_FOOD\": {\n            const { foodID, quantity, price, expiryDate } = action.data as BuyFoodOrder;\n            const newState = {...state};\n            const food = newState.foods.find(food => food.id === foodID);\n\n            if(!food) return state;\n            food.buy(quantity, price, expiryDate);\n\n            return newState;\n        }\n        case \"EDIT_FOOD\": {\n            const { foodID, food } = action.data as EditFoodOption;\n            const newState = {\n                ...state,\n                // get all food and map them as-is,\n                // except fot the one with the same ID, update the info\n                foods: state.foods.map(\n                    f => {\n                        if (foodID !== f.id) return f;\n                        else {\n                            f.updateInfo(\n                                food.name,\n                                food.unit,\n                                food.latestTimeToConsumeAfterFirstOpen\n                            );\n                            return f;\n                        }\n                    } \n                )\n            };\n            return newState;\n        }\n\n        case \"CONSUME_FOOD\":\n        default: \n            return state;\n    }\n}\n\nexport default createStore(rootReducers);","import { typeDefs } from \"./typedefs\";\nimport resolvers from './resolvers';\n\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n    typeDefs,\n    resolvers\n});\n\nexport default client;\n","import React from 'react';\nimport Playground from './components/playground';\nimport {\n  Router, Switch, Route, useLocation, BrowserRouter\n} from 'react-router-dom';\nimport history from './history';\nimport NavBar from './pages/Navbar';\nimport  { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// pages\nimport FoodPage from './pages/Food';\nimport CreateFoodPage from './pages/CreateFood';\nimport EditFoodPage from './pages/EditFood';\nimport FoodDetailsPage from './pages/FoodDetails';\nimport ContainerPage from './pages/Container';\nimport SettingsPage from './pages/Settings';\nimport BuyPage from './pages/Buy';\nimport ConsumePage from './pages/Consume';\n\nimport store from './reducers';\nimport  {Provider} from 'react-redux';\nimport Routes, { PageNames } from './routes';\nimport { HeaderContainer } from './pages/Header';\n\nimport client from './data/graphql';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { correctDatabase } from './data/resolvers';\n\n\nimport './App.scss';\n\nconst RouteSwitch: React.FC = () => {\n  const query = new URLSearchParams(useLocation().search);\n\n  switch(query.get('page')) {\n    case PageNames.FOOD_LIST:\n      return <FoodPage />\n    case PageNames.FOOD_ADD:\n      return <CreateFoodPage />\n    case PageNames.FOOD_EDIT:\n      return <EditFoodPage />\n    case PageNames.CONTAINERS_LIST:\n      return <ContainerPage />\n    case PageNames.FOOD_DETAILS:\n      return <FoodDetailsPage />\n    case PageNames.BUY_FOOD:\n      return <BuyPage />\n    case PageNames.CONSUME:\n      return <ConsumePage />\n    case PageNames.SETTINGS:\n      return <SettingsPage />\n    default:\n      return null;\n  }\n}\nconst App: React.FC = () => {\n\n  // correct database when the App just loads\n  React.useEffect(() => {\n      correctDatabase();\n  }, []);\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Provider store={store}>\n            <Router history={history}>\n                <HeaderContainer>\n                  <div className=\"Page\">\n                    <Switch>\n                      <Route path={Routes.HOME} component={RouteSwitch} />\n                    </Switch>\n                  </div>\n                </HeaderContainer>\n                <ToastContainer />\n                <NavBar />\n            </Router>\n        </Provider>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}