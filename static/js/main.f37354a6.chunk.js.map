{"version":3,"sources":["routes.ts","history.ts","pages/Navbar/NavIcon.tsx","pages/Navbar/index.tsx","components/GenericCard/index.tsx","utils.ts","components/FoodCard/ContainerOverview.tsx","components/FoodCard/index.tsx","pages/Header/index.tsx","components/Input/index.tsx","components/CenterNotice/index.tsx","components/SearchList/index.tsx","pages/Food/index.tsx","data/typedefs.ts","components/Button/index.tsx","components/Form/index.tsx","pages/CreateFood/index.tsx","pages/FoodDetails/auxInfo.tsx","pages/FoodDetails/listInfoItem.tsx","components/PercentageBar/index.tsx","components/ContainerCard/index.tsx","pages/FoodDetails/index.tsx","pages/Container/index.tsx","data/resolvers.ts","pages/Settings/index.tsx","components/FoodTypePicker/index.tsx","pages/Buy/FoodQuantityInfo.tsx","components/Wizard/StepIndicator.tsx","components/Wizard/index.tsx","pages/Buy/SelectFoodPopup.tsx","pages/Buy/PendingOrderCard.tsx","pages/Buy/PendingInfoSummary.tsx","pages/Buy/index.tsx","pages/Consume/AmountInput.tsx","pages/Consume/ContainerPicker.tsx","pages/Consume/SelectFoodPopup.tsx","pages/Consume/PendingConsumptionCard.tsx","pages/Consume/index.tsx","reducers/index.ts","data/graphql.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PageNames","Routes","FOOD_LIST","FOOD_ADD","FOOD_DETAILS","FOOD_EDIT","BUY_FOOD","CONTAINERS_LIST","SETTINGS","CONSUME","HOME","history","createBrowserHistory","basename","forceRefresh","NavIcon","title","icon","active","path","className","Icon","style","color","navItems","tag","NavBar","search","useLocation","query","URLSearchParams","useHistory","map","i","props","key","onClick","push","indexOf","get","GenericCard","mainText","rightComponent","smallComponent","actionButton","iconName","convertToFloat","value","Number","parseFloat","toString","roundNumber","roundTo","toFixed","getDifferenceInDaysFromNow","date","Math","ceil","abs","Date","getTime","isTimeInPast","time","randomString","length","result","characters","charactersLength","charAt","floor","random","STATUS_COLOR","UNOPENED","UNOPENED_EXPIRED","OPENED","OPENED_EXPIRED","ContainerOverview","statusList","containers","expiryDate","dateOpened","opened","Object","keys","status","counts","_","groupBy","sort","a","b","display","alignItems","marginRight","SmallInfo","withRouter","name","unit","info","totalAmount","fontSize","numberOfContainers","constate","React","useState","withBackButton","navOptions","setNavOptions","HeaderContextProvider","useHeader","Header","navButtons","goBack","HeaderContainer","children","withHeader","WrappedComponent","newNavOptions","useEffect","Input","rawOnChange","onChange","required","validate","label","type","placeholder","isValid","setIsValid","valueToDisplay","toLocaleString","finalClassNameOuter","finalClassName","Error","options","multiple","otherProps","e","target","selected","opt","CenterNotice","subtitle","textAlign","CenterNoticeSwitch","watch","centerNoticeProps","defaultEmptyResultConfig","SearchGroup","list","filterFunc","renderItem","minimumSearchLength","inputConfig","emptyResultConfig","searchTerm","setSearchTerm","searchResults","filter","item","QUERY","gql","useQuery","loading","error","data","refetch","window","location","pathname","alert","message","foods","SearchList","food","text","toLowerCase","includes","replace","RawUnit","g","mL","Price","amount","currency","amountInHKD","this","toHKDRate","price","as","DEFAULT_ZERO","Button","disabled","undefined","FormComponent","customInitialValue","initialValue","layoutOrLayoutFunc","layout","submitIconName","submitButtonText","onSubmit","withSubmitButton","disabledFields","setFormValue","state","useSelector","shallowEqual","allFields","reduce","layouts","row","initialValues","assign","form","setForm","isAllFieldsValid","some","allDisabledFieldNames","inputFieldProps","field","v","setField","flex","inputConfigProps","ADD_FOOD_QUERY","GET_FOOD_NAMES_QUERY","formLayout","newName","find","values","useMutation","updateFoodFunc","Form","async","variables","toast","success","position","POSITION","TOP_CENTER","autoClose","onClose","AuxInfo","ListInfoItem","description","PercentageBar","percentageLeft","percentageDifference","flexGrow","backgroundColor","height","background","backgroundSize","ContainerCard","container","capacity","datePurchased","expired","containerIcon","toLocaleDateString","daysDiff","expireDateString","FOOD_DETAIL_QUERY","FoodDetailsPage","foodName","auxConfigs","totalWorth","listInfoConfigs","openedContainers","expiredContainers","config","initialDatabase","loadDatabase","db","localStorage","getItem","JSON","parse","setItem","stringify","saveDatabase","newDb","resolvers","Query","FoodContainer","Food","sum","totalCapacity","getDate","__typename","Mutation","addFood","buyFood","buyOrders","newFoodContainers","forEach","buyOrder","foodId","findIndex","id","consumeFoods","consumeOrders","hasError","order","containerID","con","console","log","containerIndex","ButtonWithDescriptionRow","buttonTitle","settingsConfig","reload","settings","GET_FOOD_LIST","FoodTypePicker","onFoodSelected","filterFood","foodOptions","finalOptions","FOOD_INFO_QUERY","FoodInfoSummaryComponent","EUR","USD","PLN","HKD","computeDisabledFields","containerCount","priceType","FoodQuantityInfoComponent","onPreviousStepRequested","onInfoProvided","isFormValid","offsetTop","Array","fill","StepIndicator","step","totalSteps","StepComponent","getStatusFromStep","range","Wizard","open","requestClose","headerTitle","setStep","SelectFoodPopup","onBuyOrdersAdded","initialFormValue","selectedFood","containersCount","fieldName","FoodQuantityInfo","FOOD_QUERY","PendingOrderCard","addAmount","PendingInfoSummary","orders","total","add","numDifferentFoods","from","Set","numContainers","ADD_ORDERS","BuyPage","openSelectPopup","setOpenSelectPopup","pendingBuyOrders","setPendingBuyOrders","hasJustBought","setHasJustBought","buyFoodFunc","j","onOpen","AmountInterpretationType","AmountInput","onAmountChosen","interpretationType","realValue","percentLeft","CONTAINER_QUERY","ContainerPicker","onSelectContainer","onToPreviousPage","containerInd","setContainerInd","amountUsed","setAmountUsed","selectedContainer","paddingTop","paddingLeft","paddingRight","dots","infinite","afterChange","containerId","onConsumeOrderAdded","setSelectedFood","reportConsumeOrder","UNIT_QUERY","PendingConsumptionCard","onRemove","RightComponent","originalPercentage","consumedPercentage","AuxComponent","CONSUME_ORDERS","ConsumePage","submitConsumeOrders","pendingConsumeOrders","setPendingConsumeOrders","hasJustConsumed","setHasJustConsumed","initialState","createStore","action","newFood","foodID","quantity","newState","buy","f","updateInfo","latestTimeToConsumeAfterFirstOpen","client","ApolloClient","typeDefs","RouteSwitch","CreateFood","Container","FoodDetails","Buy","Consume","Settings","App","store","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f37354a6.chunk.js","sourcesContent":["export const BaseName = \"/Inventory-v2\";\n\nexport const PageNames = {\n    FOOD_LIST: \"food\",\n    FOOD_ADD: \"food_new\",\n    FOOD_DETAILS: \"food_details\",\n    FOOD_EDIT: \"food_edit\",\n    BUY_FOOD: \"buy\",\n    CONTAINERS_LIST: \"containers\",\n    SETTINGS: \"settings\",\n    CONSUME: \"consume\",\n    HOME: \"\"\n};\n\nconst Routes = {\n    FOOD_LIST: \"/app?page=food\",\n    FOOD_ADD: \"/app?page=food_new\",\n    FOOD_DETAILS: \"/app?page=food_details\",\n    FOOD_EDIT: \"/app?page=food_edit\",\n\n    BUY_FOOD: \"/app?page=buy\",\n    CONTAINERS_LIST: \"/app?page=containers\",\n\n    SETTINGS: \"/app?page=settings\",\n\n    CONSUME: \"/app?page=consume\",\n    HOME: \"/app\"\n}\n\nexport default Routes","import { BaseName } from './routes';\nimport { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory({\n    basename: BaseName, forceRefresh: false\n});\n\nexport default history;","import React from 'react';\nimport { Icon } from '@material-ui/core';\n\nexport type NavIconProps = {\n    title: string,\n    icon: string,\n    path: string,\n    active?: Boolean\n};\n\nconst NavIcon: React.FC<NavIconProps> = ({\n    title, icon, path, active\n}) => {\n    return (\n        <div className=\"NavIcon-Container\">\n            <div className={`NavIcon ${active?\"NavIcon-Active\":\"\"}`}>\n                <Icon style={{color: active?\"primary\":\"text\"}}>{icon}</Icon>\n                {' '}\n            </div>\n        </div>\n    )\n};\n\nexport default NavIcon;","import React from \"react\";\nimport NavIcon, { NavIconProps } from \"./NavIcon\";\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport Routes, {PageNames} from '../../routes';\nimport \"./style.scss\";\n\nconst navItems: Array<NavIconProps & {tag: string[]}> = [\n    {\n        title: \"Assets\",\n        icon: \"work-outline\",\n        path: Routes.CONTAINERS_LIST,\n        tag: [PageNames.CONTAINERS_LIST]\n    },\n    {\n        title: \"Consume\",\n        icon: \"whatshot\",\n        path: Routes.CONSUME,\n        tag: [PageNames.CONSUME]\n    },\n    {\n        title: \"Food\",\n        icon: \"fastfood\",\n        path: Routes.FOOD_LIST,\n        tag: [\n            PageNames.FOOD_LIST, \n            PageNames.FOOD_ADD, \n            PageNames.FOOD_DETAILS\n        ]\n    },\n    {\n        title: \"Buy\",\n        icon: \"shopping-cart\",\n        path: Routes.BUY_FOOD,\n        tag: [PageNames.BUY_FOOD]\n    }, \n    {\n        title: \"Settings\",\n        icon: \"settings\",\n        path: Routes.SETTINGS,\n        tag: [PageNames.SETTINGS]\n    }\n];\n\n\nconst NavBar: React.FC = () => {\n    const { search } = useLocation();\n    const query = new URLSearchParams(search);\n    const history  = useHistory();\n    return (\n        <div className=\"NavBarContainer\">\n            {\n                navItems.map(({tag, ...props}, i) => (\n                    <div key={i} onClick={() => history.push(props.path as string)}>\n                        <NavIcon {...props} active={tag.indexOf(query.get('page') || \"\") > -1} />\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default NavBar;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type GenericCardExtraProps = {\n    actionButton?: {\n        iconName: string,\n        onClick: () => void\n    }\n};\n\nexport type GenericCardProps = GenericCardExtraProps & {\n    mainText: string,\n    rightComponent: React.ReactNode,\n    smallComponent?: React.ReactNode,\n    onClick?: () => void\n};\n\nconst GenericCard: React.FC<GenericCardProps> = ({\n    mainText, rightComponent, smallComponent, onClick,\n    actionButton\n}) => {\n    return (\n        <div className=\"GenericCard\" onClick={onClick}>\n            {\n                actionButton && (\n                    <div className=\"GenericCard-ActionButton\">\n                        <div onClick={actionButton.onClick}>\n                            <Icon >{actionButton.iconName}</Icon>\n                        </div>\n                    </div>\n                )\n            }\n            <div className=\"GenericCard-Left\">\n                <div className=\"GenericCard-MainText\">{mainText}</div>\n                <div className=\"GenericCard-containers\">\n                    { smallComponent }\n                </div>\n            </div>\n            \n            <div className=\"GenericCard-Right\">\n                { rightComponent }\n            </div>\n        </div>\n    );\n}\n\nexport default GenericCard;","export const dayToMs = (day: number | null) => {\n    return day? day * 24 * 3600 * 1000 : null;\n}\n\nexport const msToDay = (ms: number | null) => {\n    return ms? ms / 24 / 3600 / 1000 : null;\n}\n\nexport const convertToFloat = (value: string | number) => {\n    return Number.parseFloat(value.toString());\n}\n\nexport const roundNumber = (value: number, roundTo = 2) => parseFloat(value.toFixed(roundTo)) || 0;\n\nexport const getDifferenceInDaysFromNow = (date: Date) => {\n    return Math.ceil(Math.abs(\n            (new Date().getTime() - new Date(date).getTime()) / (1000 * 3600 * 24)\n        ));\n}\n\nexport const isTimeInPast = (time: Date) => {\n    return new Date(time).getTime() < new Date().getTime();\n}\n\nexport const randomString = (length: number) => {\n    let result           = '';\n    const characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    const charactersLength = characters.length;\n    for ( let i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n }","import React from 'react';\nimport { FoodContainer } from '../../data/typedefs';\nimport { Icon } from '@material-ui/core';\nimport { isTimeInPast } from '../../utils';\nimport _ from 'lodash';\n\nconst STATUS_COLOR = {\n    UNOPENED: {\n        color: 'white',\n        icon: \"kitchen\"\n    },\n    UNOPENED_EXPIRED: {\n        color: 'white',\n        icon: \"delete_forever\"\n    },\n    OPENED: {\n        color: 'orange',\n        icon: \"kitchen\"\n    },\n    OPENED_EXPIRED: {\n        color: 'orange',\n        icon: \"delete_forever\"\n    }\n}\n\ntype StatusTypes = keyof typeof STATUS_COLOR;\n\ntype ContainerOverviewProps = {\n    containers: FoodContainer[]\n};\nconst ContainerOverview: React.FC<ContainerOverviewProps> = ({\n    containers\n}) => {\n    const statusList : { status : keyof typeof STATUS_COLOR}[] = containers.map(({\n        expiryDate,\n        dateOpened,\n    }, i) => {\n\n        let status = Object.keys(STATUS_COLOR)[0] as StatusTypes;\n        const expired = !!expiryDate && isTimeInPast(expiryDate);\n        const opened  = !!dateOpened;\n\n        if (expired) {\n            status = opened ? \"OPENED_EXPIRED\" : \"UNOPENED_EXPIRED\";\n        } else {\n            status = opened ? \"OPENED\" : \"UNOPENED\";\n        }\n\n        return { status }\n    });\n\n    const counts = _.groupBy(statusList, \"status\");\n\n    return (\n        <>\n            {\n                (\n                    Object.keys(counts).sort((a, b) => counts[a].length - counts[b].length) as (keyof typeof STATUS_COLOR)[]\n                ).map(status => (\n                    <div style={{\n                        color: STATUS_COLOR[status].color, \n                        display: 'flex', \n                        alignItems: 'center', \n                        marginRight: 4 \n                    }}>\n                        <Icon style={{color: STATUS_COLOR[status].color }}>\n                            {STATUS_COLOR[status].icon} \n                        </Icon>\n                        {counts[status].length > 1 && `x ${counts[status].length}`}\n                    </div>\n                ))\n            }\n        </>\n    );\n};\n\nexport default ContainerOverview;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport GenericCard, { GenericCardExtraProps } from '../GenericCard';\nimport ContainerOverview from './ContainerOverview';\nimport { FoodContainer } from '../../data/typedefs';\n\ntype FoodCardProps = GenericCardExtraProps & {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n    onClick?: () => void\n};\n\nconst SmallInfo = ({ \n    icon, value, style \n}: { icon?: string, value: number | string, style?: any}) => (\n    <div className=\"FoodCard-SmallInfo\" style={style}>\n        { icon && <Icon>{icon}</Icon> }\n        { value }\n    </div>\n);\n\nconst FoodCard: React.FC<FoodCardProps & RouteComponentProps<any>> = ({\n    name, unit, info, onClick, containers, ...props\n}) => {\n    const rightComponent = <SmallInfo value={`${info.totalAmount} ${unit}`} style={{fontSize: 18}} />;\n    const smallComponent = !info.numberOfContainers ?\n         \"No containers\" :\n         <ContainerOverview containers={containers} />;\n\n    return (\n        <GenericCard \n            mainText={name} \n            rightComponent={rightComponent} \n            smallComponent={smallComponent} \n            onClick={onClick} \n            {...props}\n        />\n    );\n}\n\nexport default withRouter(FoodCard);","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport { useHistory } from 'react-router';\nimport constate from 'constate';\nimport './style.scss';\n\ntype NavButtonProps = {\n    iconName: string,\n    onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n};\n\ntype HeaderProps = {\n    title: string,\n    withBackButton?: boolean,\n    navButtons?: Array<NavButtonProps>\n};\n\nexport type WithHeaderProps = {\n    setNavOptions: (opt: HeaderProps) => void;\n    navOptions: HeaderProps;\n    setHeaderTitle: (newTitle: string) => void;\n}\n\n// custom hooks\nexport function useHeaderHook() {\n    const [ navOptions, setNavOptions] = React.useState({\n        title: \"\",\n        withBackButton: false\n    } as HeaderProps);\n\n    return { navOptions, setNavOptions } ;\n};\n\nexport const [HeaderContextProvider, useHeader] = constate(useHeaderHook);\n\nconst Header: React.FC = () => {\n    const { \n        navOptions: {\n            title, navButtons, withBackButton\n        }\n    } = useHeader();\n\n    const history = useHistory();\n    return (\n        <div className=\"Header\">\n            <div>\n                {\n                    withBackButton && (\n                            <Icon style={{fontSize: 32}} onClick={() => history.goBack()}>navigate_before</Icon>\n                    )\n                }\n                {title}\n            </div>\n            \n            <div className=\"Header-NavButtonGroup\">\n                {\n                    navButtons && navButtons.map(({iconName, onClick}) => (\n                        <div className=\"Header-NavButton\" onClick={onClick}>\n                            <Icon>{iconName}</Icon>\n                        </div>\n                    ))                    \n                }\n            </div>\n        </div>\n    )\n}\n\nexport const HeaderContainer: React.FC = ({ children }) => {\n    return (\n        <HeaderContextProvider>\n            <Header/>\n            {children}\n        </HeaderContextProvider>\n    )\n};\n\nexport const withHeader = (WrappedComponent : React.FC<any>, newNavOptions : HeaderProps) => {\n    const Component: React.FC = props => {\n        const {setNavOptions} = useHeader();\n        React.useEffect(() => {\n            setNavOptions(newNavOptions);\n        }, []);\n\n        return <WrappedComponent {...props} />\n    }\n\n    return Component;\n}\nexport default Header;","import React from 'react';\nimport {Icon} from '@material-ui/core';\nimport \"./style.scss\";\n\nexport type InputTypes = \"text\" | \"textarea\" | \"number\" | \"date\" | \"select\";\nexport type ValueTypes = string | number | Date | null;\n\nexport type InputConfigProps = {\n    name: string;\n    label?: string;\n    type?: InputTypes;\n    iconName?: string;\n    placeholder?: string;\n    required?: boolean;\n    validate?: (value: ValueTypes) => boolean;\n    className?: string;\n}\n\nexport type SelectConfigProps = {\n    options: ValueTypes[];\n    multiple?: boolean;\n}\n\nexport type InputProps = InputConfigProps & {\n    value: ValueTypes,\n    onChange: (value: ValueTypes) => void,\n    disabled?: boolean\n}\n\nconst Input: React.FC<InputProps> = ({\n    onChange: rawOnChange, value,\n    // validation props\n    required = false, validate = () => true,\n    name,\n    label,\n    type = \"text\",\n    placeholder,\n    className,\n    iconName,\n    ...props\n}) => {\n    \n    // TODO: Isolate validation component\n    const [ isValid, setIsValid ] = React.useState(validate(value));\n    // on change armed with validation\n    const onChange = (value: ValueTypes) => {\n        if((required && !value) || !validate(value)) {\n            setIsValid(false);\n        } else { \n            setIsValid(true);\n        }\n        rawOnChange(value);\n    }\n\n    const valueToDisplay: (value: ValueTypes, type: InputTypes) => string | number = value => {\n        if (value instanceof Date) {\n            return value.toLocaleString('en-US');\n        } \n        return value || \"\";\n    }\n\n    const finalClassNameOuter = `Input  ${!isValid ? \"Invalid\" : \"\"}`;\n    const finalClassName = `Input-Inner ${className || \"\"}`;\n    switch(type) {\n        /**\n         * \n         *  The Select Field\n         * \n         */\n        case \"select\":\n            if(!(props as SelectConfigProps)) {\n                throw new Error(\"Input field is `select` but not options provided.\");\n            }\n            const { options, multiple = false, ...otherProps } = props as SelectConfigProps;\n            return (\n                <div>\n                    {label && <p>{label}</p>}\n                    <div className={finalClassNameOuter}>\n                        { iconName && <Icon>{iconName} </Icon>}\n                        <select\n                            multiple={multiple}\n                            name={name}\n                            {...otherProps}\n                            className={finalClassName}\n                            onChange={e => onChange(e.target.value)}\n                            value={valueToDisplay(value, type)}\n                        >\n                            {placeholder && \n                                <option value=\"\" selected={value === \"\"}>{placeholder}</option>\n                            }\n                            {\n                                options.map(opt => (\n                                    <option\n                                        selected={opt === value}>\n                                        {opt}\n                                    </option>\n                                ))\n                            }\n                        </select>\n                        <Icon>expand_more</Icon>\n                    </div>\n                </div>\n            )\n        /**\n         * \n         *  The General Input Field\n         * \n         */\n        default:\n            return (\n                <>\n                    {label && <p>{label}</p>}\n                    <div className={finalClassNameOuter}>\n                        { iconName && <Icon>{iconName} </Icon>}\n                        <input\n                            name={name}\n                            {...props}\n                            className={finalClassName}\n                            placeholder={placeholder}\n                            onChange={e => onChange(e.target.value)}\n                            type={type}\n                            value={valueToDisplay(value, type)}\n                        />\n                        {\n                            type === 'number' && (\n                                <div className=\"Input-NumberPicker\">\n                                    <Icon onClick={() => onChange((value as number || 0) + 1)}>expand_less</Icon>\n                                    <Icon onClick={() => onChange((value as number || 0) - 1)}>expand_more</Icon>\n                                </div>\n                            )\n                        }\n                    </div>\n                </>\n            )\n    }\n}\n\nexport default Input;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport './style.scss';\n\nexport type CenterNoticeProps = {\n    iconName: string,\n    title?: string, \n    subtitle?: string\n};\n\ntype CenterNoticeSwitchProps = CenterNoticeProps & {\n    watch: Array<any> | boolean,\n    children: any\n}\nconst CenterNotice: React.FC<CenterNoticeProps> = ({\n    iconName, title, subtitle\n}) => {\n    return (\n        <div className=\"CenterNotice\">\n            <Icon style={{fontSize: 72}}>{iconName}</Icon>\n            <div style={{textAlign: 'center'}}>\n                {\n                    title && <h3>{title}</h3>\n                }\n                {\n                    subtitle && <h6>{subtitle}</h6>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport const CenterNoticeSwitch: React.FC<CenterNoticeSwitchProps> = ({\n    watch, children, ...centerNoticeProps\n}) => {\n    if((watch as Array<any>).length === 0 || !(watch as boolean)) {\n        return (<CenterNotice {...centerNoticeProps} />);\n    } else {\n        return children;\n    }\n}\n\nexport default CenterNotice;","import React from 'react';\nimport Input, {InputConfigProps} from '../Input';\nimport { \n    CenterNoticeProps, \n    CenterNoticeSwitch \n} from '../CenterNotice';\nimport \"./style.scss\";\n\ntype SearchGroupProps<T> = {\n        list: Array<T>,\n        filterFunc: (item: T, searchTerm: string) => boolean\n        \n        minimumSearchLength?: number,\n        renderItem: (item: T) => React.ReactNode,\n        inputConfig: InputConfigProps,\n        emptyResultConfig?: CenterNoticeProps,\n}\n\nconst defaultEmptyResultConfig: CenterNoticeProps = {\n    iconName: \"search\",\n    title: \"No results found\"\n}\n\nconst SearchGroup: React.FC<SearchGroupProps<any>> = ({\n    list, filterFunc, renderItem,\n    minimumSearchLength = 1,\n    inputConfig,\n    emptyResultConfig = defaultEmptyResultConfig\n}) => {\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\n\n    const searchResults = (searchTerm.length >= minimumSearchLength)?\n        list.filter(item => filterFunc(item, searchTerm)):list;\n\n    return (\n        <div className=\"SearchGroup\">\n            <div className=\"SearchGroup-Input\">\n                <Input\n                    \n                    {...inputConfig} \n                    value={searchTerm} \n                    onChange={e => setSearchTerm(e as string)}\n                />\n            </div>\n            <div className=\"SearchGroup-List\">\n                <CenterNoticeSwitch \n                    watch={searchResults} \n                    {...emptyResultConfig}\n                >\n                    { \n                           searchResults.map(item => renderItem(item))\n                    }\n                </CenterNoticeSwitch>\n            </div>\n        </div>\n    )\n    return null;\n}\n\nexport default SearchGroup;","import React from 'react';\nimport FoodCard from '../../components/FoodCard';\nimport { withHeader } from '../Header';\nimport { useLocation } from 'react-router-dom';\nimport history from '../../history';\nimport { Food } from '../../data/typedefs';\nimport SearchList from '../../components/SearchList';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport Routes from '../../routes';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from '@apollo/client';\n\ntype FoodPageProps = {\n    foods: Array<Food>\n}\n\nconst QUERY = gql`\n    {\n        foods @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                numberOfContainers\n                totalAmount\n            }\n        }\n    }\n`;\n\n\nconst FoodPage: React.FC<FoodPageProps> = () => {\n    const { loading, error, data, refetch } = useQuery(QUERY);\n    // the current query, mostly is ?page=...\n    const currentQuery = useLocation().search;\n\n    React.useEffect(() => {\n        refetch()\n    }, [window.location.pathname]);\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n    if(loading) {\n        return <div> loading...</div>\n    }\n\n    \n    const foods = data.foods as Food[];\n\n\n    return (\n        <CenterNoticeSwitch watch={foods}\n            iconName=\"fastfood\"\n            title=\"No food is added\"\n            subtitle=\"click the '+' button to add a new type of food\"\n        >\n            <SearchList\n                list={foods}\n                filterFunc={\n                    (food, text) => (food as Food).name.toLowerCase().includes(text.toLowerCase())\n                }\n                inputConfig={{\n                    name: \"FoodSearchInput\",\n                    iconName: \"search\",\n                    placeholder: \"Search for food...\"\n                }}\n                minimumSearchLength={2}\n                renderItem={food => (\n                    <FoodCard {...food} \n                        onClick={() => history.replace(\n                            Routes.FOOD_DETAILS + `&food=${food.name}`\n                        )}\n                    />\n                )}\n            >\n\n            </SearchList>\n        </CenterNoticeSwitch>\n    );\n}\n\n\nexport default withHeader(FoodPage, {\n    title: \"Your Food\",\n    navButtons: [\n        {iconName: \"add\", onClick: () => history.push(Routes.FOOD_ADD)}\n    ]\n});\n\n","export const RawUnit = {\n    unit: \"unit\",\n    g: \"g\",\n    mL: \"mL\"\n}\n\nexport const RawCurrency = {\n    EUR: \"EUR\",\n    USD: \"USD\",\n    PLN: \"PLN\",\n    HKD: \"HKD\",\n}\n\nexport type Currency = keyof typeof RawCurrency;\nexport type Unit     = keyof typeof RawUnit;\n\n\nexport class Price {\n    static toHKDRate = (currency: Currency) => {\n        switch(currency) {\n            case \"EUR\": return 8.6;\n            case \"USD\": return 7.6;\n            case \"PLN\": return 2;\n            case \"HKD\": return 1;\n        }\n    };\n\n    static DEFAULT_ZERO = new Price(0, \"HKD\");\n\n    constructor(\n        readonly amount: number,\n        readonly currency: Currency\n    ) {}\n\n    public as(currency: Currency): Price {\n        const amountInHKD = this.amount * Price.toHKDRate(this.currency);\n        return new Price(amountInHKD / Price.toHKDRate(currency), currency);\n    }\n\n    public add(price: Price): Price {\n        const otherPriceInThisCurrency = price.as(this.currency);\n        return new Price(otherPriceInThisCurrency.amount + this.amount, this.currency);\n    }\n}\n\nexport interface FoodContainer {\n    id: string,\n    capacity: number,\n    amount: number,\n    datePurchased: Date\n    expiryDate?: Date,\n    dateOpened?: Date,\n    price: Price,\n\n}\n\nexport interface FoodInfo {\n    totalAmount: number,\n    percentageLeft: number\n}\n\nexport interface Food {\n    unit: Unit,\n    name: string,\n    containers: FoodContainer[],\n}\n\nexport interface BuyOrder {\n    foodName: string,\n    price: Price,\n    expiryDate?: Date,\n    amount: number\n};\n\nexport interface ConsumeOrder {\n    containerID: string,\n    amount: number\n}\n\nexport const typeDefs = `\n    enum Currency {\n        HKD\n        USD\n        EUR\n        PLN\n    }\n\n    enum Unit {\n        mL\n        g\n        unit\n    }\n\n\n    type Price {\n        currency: Currency!\n        amount: Number!\n    }\n\n    type FoodContainerInfo {\n        expired: Boolean!\n    }\n\n    type FoodContainer {\n        id: ID!\n        capacity: Number!\n        amount: Number!\n        datePurchased: Date!\n        expiryDate: Date\n        dateOpened: Date\n        price: Price!\n\n        opened: Boolean!\n        expired: Boolean!\n        percentageLeft: Number!\n    }\n\n    type FoodInfo {\n        numberOfContainers: Number!\n        expiredContainers: Number!\n        openedContainers: Number!\n        \n        totalAmount: Number!\n        totalWorth: Number!\n\n        percentageLeft: Number!\n    }\n\n    type Food {\n        name: String!\n        unit: Unit!,\n        containers: [FoodContainer!]!\n        info: FoodInfo\n    }\n    \n    type BuyOrder {\n        foodName: String!\n        price: Price!\n        expiryDate: Date\n        amount: Number!\n    }\n\n    type ConsumeOrder {\n        containerID: ID!\n        amount: Number!\n    }\n\n    type Query {\n        food(name: String!): Food\n        foods: [Food]!\n    }\n\n    type Mutation {\n        addFood(name: String!, unit: Unit!): Food\n        buyFood(buyOrders: [BuyOrder]!): [FoodContainer]\n        consumeFoods(consumeOrders: [ConsumeOrder]!): [ID!]\n    }\n`;","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport \"./style.scss\";\n\ntype ButtonProps = {\n    title: string,\n    icon?: string,\n    color?: string,\n    onClick?: () => void,\n    disabled?: boolean,\n\n    className?: string\n};\n\nconst Button: React.FC<ButtonProps> = ({\n    title, icon, \n    color = \"primary\",\n    onClick,\n    disabled = false,\n    className\n}) => {\n    return (\n        <div\n            className={`${className} Button Button-${color} ${disabled? \"Button-Disabled\":\"\"}`} \n            onClick={!disabled ? onClick: undefined}>\n            {\n                icon && (\n                    <Icon>{icon}</Icon>\n                )\n            }\n            {title}\n        </div>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useHistory , useLocation } from 'react-router';\nimport { History, Location } from 'history';\nimport {Icon} from '@material-ui/core';\nimport { State } from '../../reducers';\nimport Button from '../Button';\nimport Input, { InputConfigProps, SelectConfigProps, ValueTypes, InputTypes } from '../Input';\nimport './style.scss';\n\n// The representation of the form value as JSON\nexport type FormValueType = {[key: string]: ValueTypes};\n\n// the config object shape\ntype BasicLayoutConfig = InputConfigProps & {\n    label?: string,\n    flex?: number,\n    inputStyle?: \"default\" | \"outlined\"\n};\n\n\n// the combined type\ntype SelectInputConfig = BasicLayoutConfig & SelectConfigProps;\ntype FormLayoutConfig = BasicLayoutConfig | SelectInputConfig;\n\n// the entire layout. The first array stores rows. Each row stores columns.\nexport type FormLayout = FormLayoutConfig[][] \n    | ((\n        store:          State, \n        history:        History<any>, \n        location:       Location<any>,\n        initialValues?: FormValueType) => FormLayoutConfig[][]);\n\n//  Type of the props passed to the <Form> Component\ntype FormProps = {\n    // connect\n    initialValue?: FormValueType,\n    layout: FormLayout,\n    submitIconName?: string,\n    submitButtonText?: string,\n    onSubmit?: (form: FormValueType) => void,\n    withSubmitButton?: boolean,\n    disabledFields?: (form: FormValueType) => string[],\n    setFormValue?: (form: FormValueType) => void\n}\n\nconst FormComponent: React.FC<FormProps> = ({\n    initialValue: customInitialValue,\n    layout : layoutOrLayoutFunc, \n    submitIconName, submitButtonText,\n    onSubmit,\n    withSubmitButton = true,\n    disabledFields,\n    setFormValue\n}) => {\n\n    // see if the incoming layout is a function\n    // if it is then pass it to the store ( for validation). Otherwise use it as-is\n    const state  = useSelector(state => state, shallowEqual) as State;\n    const history = useHistory();\n    const location = useLocation();\n    \n    const layout = (typeof layoutOrLayoutFunc === 'function') \n        ? layoutOrLayoutFunc(state, history, location, customInitialValue) \n        : layoutOrLayoutFunc;\n    \n    // flatten all fields for easier manipulations\n    const allFields = [...layout.reduce((layouts, row) => [...layouts, ...row], [])];\n    // the initial values of the form\n    // if the type is number, then the value would be 0. otherwise empty string\n    const initialValues = customInitialValue || Object.assign({}, \n        ...allFields.map(({name, type, required}) => {\n            if (!required) return null;\n            switch(type) {\n                case \"number\":\n                    return { [name]: 0 }\n                case \"date\":\n                    return { [name]: new Date() }\n                default:\n                    return { [name]: \"\" }\n            }\n        })\n    );\n    \n    // the form state \n    const [form, setForm] = React.useState(initialValues);\n    \n    React.useEffect(() => {\n        setFormValue && setFormValue(form);\n    }, [form, setFormValue]);\n\n\n    const isAllFieldsValid = !allFields.some(({name, required, validate}) => (\n        (required && !form[name]) || (validate && !validate(form[name]))\n    ));\n\n    // functions for manipulating form states\n    const setField = (field: string, value: ValueTypes) => {\n        const type = typeof(initialValues[field]);\n        // resolve the problem of number fields when empty string is sent to the form\n        if (type === 'number') {\n            setForm({...form, [field]: parseFloat(value as string) || 0});\n        } else {\n            setForm({...form, [field]: value});\n        }\n    };\n    \n    const allDisabledFieldNames = disabledFields ? disabledFields(form) : [];\n    const inputFieldProps = (field: string) => ({\n        value: form[field],\n        onChange: (v: ValueTypes) => setField(field, v),\n        disabled: allDisabledFieldNames.includes(field)\n    });\n\n    return (\n        <div className=\"Form\">\n            {\n                // create all the rows\n                layout.map(row => (\n                    <div className=\"Form-Row\">\n                        {\n                            // create all the columns\n                            row.map(({\n                                // here is each of the form config\n                                name, \n                                flex = 1, \n                                ...inputConfigProps\n                            }) => (\n                                <div className=\"Form-Col\" style={{flex}}>\n                                    <Input\n                                        name={name} \n                                        {...inputConfigProps} \n                                        {...inputFieldProps(name)}\n                                    />\n                                </div>\n                            ))\n                        }\n                    </div>\n                ))\n            }\n            <div style={{flex: 1}} />\n            {\n                withSubmitButton && (\n                    <Button color=\"info\"\n                        title={submitButtonText || \"Submit\"}\n                        icon={submitIconName}\n                        onClick={onSubmit && (() => onSubmit(form))}\n                        disabled={!isAllFieldsValid}\n                        className=\"Form-Submit\"\n                    />\n                )\n            }\n        </div>\n    )\n\n};\n\nexport default FormComponent;","import React from 'react';\nimport { History, Location } from 'history';\nimport { RawUnit } from '../../data/typedefs';\nimport { toast } from 'react-toastify';\nimport Routes from '../../routes';\nimport { withHeader } from '../Header';\nimport Form, { FormLayout, FormValueType } from '../../components/Form';\nimport { State } from '../../reducers';\nimport { gql } from '@apollo/client';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useHistory } from 'react-router';\n\nconst ADD_FOOD_QUERY = gql`\n    mutation addFood($name: String!, $unit: Unit!) {\n        addFood(name: $name, unit: $unit) @client {\n            id\n            name\n        }\n    }\n`;\n\nconst GET_FOOD_NAMES_QUERY = gql`\n    query {\n        foods @client {\n            name\n        }\n    }\n`;\n\nexport const formLayout: FormLayout = (\n    { foods }:  State, \n    history:    History<any>, \n    location:   Location<any>,\n    initialValue?: FormValueType) => [\n\n    [{  label: 'Food Name',\n        name: \"name\", placeholder: \"Name\", iconName: \"edit\", required: true,\n        // check if a food with same name exists\n        validate: newName => !foods.find(\n            ({name}) => {\n                return true;\n            }\n        )\n    }],\n    [{\n        label: \"Unit\",\n        name: \"unit\", placeholder: \"Unit\", required: true,\n        flex: 4, type: \"select\",\n        options: Object.values(RawUnit)\n    }]\n];\n\nconst CreateFoodPage: React.FC = () => {\n    const history = useHistory();\n    const { loading: loadingFoodList, error, data } = useQuery(GET_FOOD_NAMES_QUERY);\n    \n    const  [updateFoodFunc] = useMutation(ADD_FOOD_QUERY);\n\n\n    const onAddFood = async (form: FormValueType) => {\n        await updateFoodFunc({\n            variables: {\n                name: form.name,\n                unit: form.unit\n            }\n        })\n        \n        toast.success(\"Food Added.\", {\n            position: toast.POSITION.TOP_CENTER,\n            autoClose: 1000,\n            onClose: () => history.goBack()\n        });\n    }\n\n    return (\n        <Form\n            submitButtonText=\"Add Food\"\n            submitIconName=\"add\"\n            onSubmit={onAddFood}\n            layout={formLayout} \n        />\n    )\n};\n\nexport default withHeader(CreateFoodPage, {\n    title: \"Add Food\",\n    withBackButton: true\n});","import React from 'react';\nimport { ValueTypes } from '../../components/Input';\nimport { Icon } from '@material-ui/core';\n\nexport type AuxInfoProps = {\n    title: string,\n    iconName?: string,\n    value: ValueTypes\n}\nconst AuxInfo: React.FC<AuxInfoProps> = ({title, iconName, value}) => {\n    return (\n        <div className=\"AuxInfo\">\n            {value}\n            <div className=\"AuxInfo-Title\">\n                {title}\n            </div>\n        </div>\n    )\n}\n\nexport default AuxInfo;","import React from 'react';\nimport { Icon } from '@material-ui/core';\n\nexport type ListInfoItemProps = {\n    iconName: string,\n    description: string,\n    value: string,\n    color: string,\n};\nconst ListInfoItem: React.FC<ListInfoItemProps> = ({\n    iconName, description, value, color\n}) => (\n    <div className=\"ListInfoItem-Container\">\n        <div className=\"ListInfoItem-Left\">\n            <Icon style={{color, fontSize: 32}}>{iconName} </Icon>\n        </div>\n        <div className=\"ListInfoItem-Right\" style={{color}}>\n            <div style={{color, fontSize: 18}}>{value}</div>\n            <div style={{color}}>{description}</div>\n        </div>\n    </div>\n);\n\nexport default ListInfoItem;\n","import React from 'react';\nimport \"./style.scss\";\n\n\nconst backgroundColor = 'rgba(255, 255, 255, 0.3)';\ntype PercentageBarProps = {\n    percentageLeft: number,\n    percentageDifference?: number,\n    color: string\n};\nconst PercentageBar: React.FC<PercentageBarProps> = ({\n    color, percentageLeft, percentageDifference = 0\n}) => (\n    <div className=\"PercentageBar\">\n        <div style={{ flexGrow: percentageLeft - percentageDifference, backgroundColor: color, height: 8 }}>\n\n        </div>\n        {\n            percentageDifference ? (\n                <div style={{\n                    flexGrow: percentageDifference, \n                    height: 8, \n                    background: `repeating-linear-gradient(\n                        -50deg,\n                        transparent,\n                        transparent 25%,\n                        ${color} 25%,\n                        ${color} 50%,\n                        transparent 50%\n                    ) top left fixed`,\n                    backgroundSize: '30px 30px'\n                }}/>\n            ) : null\n        }\n        <div style={{ flex: 100 - percentageLeft, backgroundColor }}>\n\n        </div>\n    </div>\n);\n\nexport default PercentageBar;","import React from 'react';\nimport { Price } from '../../data/typedefs';\nimport { Icon } from '@material-ui/core';\nimport PercentageBar from '../../components/PercentageBar';\nimport { getDifferenceInDaysFromNow, roundNumber } from '../../utils';\nimport \"./style.scss\";\n\ntype ContainerCardProps = {\n    container: {\n        capacity: number;\n        amount: number;\n        datePurchased: Date;\n        expiryDate?: Date;\n        dateOpened?: Date;\n        price: Price;\n\n        opened: boolean;\n        expired: boolean;\n        percentageLeft: number;\n    },\n    unit: string,\n    onClick?: () => void;\n};\nconst ContainerCard : React.FC<ContainerCardProps> = ({\n    container: {\n        capacity, amount, datePurchased, expiryDate,\n        dateOpened, price, opened, expired, percentageLeft\n    },\n    unit, onClick\n}) => {\n    \n    const color = expired ? \"red\" : (opened ? \"orange\" : \"white\");\n    const containerIcon = expired ? \"delete_forever\" : \"kitchen\";\n\n    const expireDateString = () => {\n        if(!expiryDate) return \"\";\n        const daysDiff = getDifferenceInDaysFromNow(expiryDate);\n        if (expired) return `| Expired ${daysDiff} day(s) ago`;\n        else return `| Expire in ${daysDiff} days`;\n    };\n\n    return (\n        <div onClick={onClick} className={`ContainerCard-Container ContainerCard-Container-${color}`}>\n            <div className=\"ContainerCard-ContainerLeft\">\n                {getDifferenceInDaysFromNow(datePurchased)} days old\n                <Icon style={{color, fontSize: 32}}>{containerIcon}</Icon>\n                {roundNumber(price.amount)} {price.currency}\n            </div>\n            <div className=\"ContainerCard-ContainerRight\">\n                <div className=\"ContainerCard-ContainerRightUp\">\n                    {percentageLeft.toFixed(2)}%\n                    <PercentageBar color={color} percentageLeft={percentageLeft} />\n                </div>\n                <div className=\"ContainerCard-ContainerRightBottom\">\n                    {\n                        dateOpened ? (\n                            <>\n                                <Icon>broken_image</Icon> \n                                <h6>{new Date(dateOpened).toLocaleDateString()}</h6>\n                            </>\n                        ) : (\n                            <>\n                                <Icon>check</Icon> \n                                <h6>Unopened</h6>\n                            </>\n                        )\n                    }\n                    <h6 style={{color}}>\n                        { expireDateString() }\n                    </h6>\n                    { /* Small buffer here */}\n                    <div className=\"ContainerCard-Amount\">\n                        {amount} {unit}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ContainerCard;","import React from 'react';\nimport AuxInfo, { AuxInfoProps } from './auxInfo';\nimport ListInfoItem, { ListInfoItemProps} from './listInfoItem';\nimport { Price } from '../../data/types';\nimport { useHeader } from '../Header';\nimport Routes from '../../routes';\nimport { useLocation, useHistory } from \"react-router-dom\";\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport ContainerCard from '../../components/ContainerCard';\n\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport { roundNumber } from '../../utils';\n\nimport \"./style.scss\";\n\nconst FOOD_DETAIL_QUERY = gql`\n    query foodDetails($food: String!) {\n        food(name: $food) @client {\n            name\n            unit\n            containers {\n                capacity\n                amount\n                datePurchased\n                expiryDate\n                dateOpened\n                price\n\n                expired\n                opened\n                percentageLeft\n            }\n            info {\n                numberOfContainers\n                expiredContainers\n                openedContainers\n                totalAmount\n                totalWorth\n                percentageLeft\n            }\n        }\n    }\n`;\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: [{\n        capacity: number,\n        amount: number,\n        datePurchased: Date,\n        expiryDate?: Date,\n        dateOpened?: Date,\n        price: Price,\n\n        expired: boolean,\n        opened: boolean,\n        percentageLeft: number\n    }],\n    info: {\n        numberOfContainers: number,\n        expiredContainers: number,\n        openedContainers: number,\n        totalAmount: number,\n        totalWorth: number,\n        percentageLeft: number\n    }\n}\nconst FoodDetailsPage: React.FC = () => {\n    const history  = useHistory();\n    const location = useLocation();\n    const { navOptions, setNavOptions } = useHeader();\n\n    const foodName = new URLSearchParams(location.search).get('food');\n    const { loading, error, data } = useQuery(FOOD_DETAIL_QUERY, {\n        variables: {\n            food: foodName\n        }\n    });\n\n    if(!foodName) history.goBack();\n\n    React.useEffect(() => {\n        setNavOptions({\n            ...navOptions,\n            title: foodName as string,\n            withBackButton: true,\n            navButtons: []\n            // navButtons: [{ \n                // iconName: \"edit\", \n                // onClick: () => history.push({\n                //     pathname: Routes.FOOD_EDIT,\n                //     search: `?food=${foodName}`\n                // })\n            // }]\n        });\n    }, []);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const food = data.food as QueryResultType;\n    // things to render under the main trendbar\n    const auxConfigs: AuxInfoProps[] = [\n        {\n            title: 'Total Amount',\n            iconName: 'kitchen',\n            value: `${roundNumber(food.info.totalAmount)} ${food.unit}`\n        },\n        {\n            title: 'Worth',\n            iconName: 'money',\n            value: `${roundNumber(food.info.totalWorth)} €`\n        },\n        {\n            title: \"Percentage Left\",\n            iconName: \"percentage\",\n            value: `${roundNumber(food.info.percentageLeft)} %`\n        }\n    ];\n\n    const listInfoConfigs: ListInfoItemProps[] = [\n        {\n            color: 'white',\n            iconName: \"kitchen\",\n            description: \"Unopened Containers\",\n            value: (food.info.numberOfContainers - food.info.openedContainers).toString()\n        },\n        {\n            color: 'orange',\n            iconName:\"kitchen\",\n            description: \"Opened Containers\",\n            value: (food.info.openedContainers).toString()\n        },\n        {\n            color: 'red',\n            iconName:\"delete_forever\",\n            description: \"Expired Containers\",\n            value: (food.info.expiredContainers).toString()\n        }\n    ];\n\n    return (\n        <div className=\"FoodDetails-Container\">\n            {/*\n                Top section\n            */}\n             <div className=\"FoodDetails-TopSection\">\n                 <h6>Summary</h6>\n                 <div className=\"FoodDetails-TopSection-AuxInfoRow\">\n                     {\n                         auxConfigs.map(config => (\n                             <AuxInfo key={config.title} {...config} />\n                         ))\n                     }\n                 </div>\n                 {\n                     food.info.numberOfContainers > 0 && (\n                        <div className=\"FoodDetails-TopSection-LIstInfoRow\">\n                            {\n                                listInfoConfigs.map((config, i) => (\n                                    <ListInfoItem {...config} key={i} />\n                                ))\n                            }\n                        </div>\n                     )\n                 }\n             </div>\n\n             <div className=\"FoodDetails-BottomSection\">\n                <CenterNoticeSwitch \n                    watch={food.containers}\n                    iconName=\"kitchen\"\n                    title=\"No Containers\"\n                    subtitle=\"Use the buy food function to add containers of this food\"\n                >\n                    <>\n                        <h6>{food.info.numberOfContainers} Container(s) </h6>\n                        {\n                            food.containers.map(\n                                (container) => <ContainerCard container={container} unit={food.unit} />\n                            )\n                        }\n                    </>\n                </CenterNoticeSwitch>\n             </div>\n        </div>\n    )\n}\n\nexport default FoodDetailsPage;","import React from 'react';\nimport CenterNotice from '../../components/CenterNotice';\nimport { withHeader } from '../Header';\n\nconst ContainerPage: React.FC = () => {\n    return <CenterNotice iconName=\"work-outline\" title=\"Coming Soon!\" />\n};\n\nexport default withHeader(ContainerPage,{\n    title: \"Assets\",\n    navButtons: [\n        {\n            iconName: \"add\",\n            onClick: () => {}\n        }\n    ]\n});","import { \n    Food, FoodContainer, \n    Unit, Price,\n    BuyOrder,\n    ConsumeOrder \n} from './typedefs';\nimport md5 from 'blueimp-md5';\nimport { convertToFloat, randomString, roundNumber, isTimeInPast } from '../utils';\n\nexport const localStorageKey = 'db';\n\ninterface DataBaseType {\n    foods: Array<Food & {[key: string]: any}>\n};\n\nexport const initialDatabase : DataBaseType = {\n    foods: []\n};\n\nconst loadDatabase = () => {\n    const db = localStorage.getItem(localStorageKey);\n    if (!db) {\n        localStorage.setItem(localStorageKey, \n            JSON.stringify(initialDatabase));\n        return initialDatabase;\n    } else {\n        return JSON.parse(db) as DataBaseType;\n    }\n};\n\nconst saveDatabase = (newDb: DataBaseType) => {\n    return localStorage.setItem(localStorageKey, JSON.stringify(newDb));\n};\n\nconst resolvers = {\n    Query: {\n        food: (_: any, { name }: { name: string }) => {\n            const db = loadDatabase();\n            const food = db.foods.find(food => food.name === name);\n            return food;\n        },\n        foods: () => {\n            const db = loadDatabase();\n            return db.foods;\n        },\n    },\n    FoodContainer: {\n        datePurchased: (container: FoodContainer) => {\n            return new Date(container.datePurchased);\n        },\n        opened: (container: FoodContainer) => {\n           return !!container.dateOpened;\n        },\n        expired: (container: FoodContainer) => {\n            return (!!container.expiryDate) && isTimeInPast(container.expiryDate);\n        },\n        percentageLeft: (container: FoodContainer) => {\n            return container.amount / container.capacity * 100;\n        }\n    },\n    Food: {\n        info: (food: Food) => {\n            const totalAmount = food.containers.reduce(\n                (sum, container) => sum + container.amount, 0\n            );\n            const totalCapacity = food.containers.reduce(\n                (sum, container) => sum + container.capacity, 0\n            );\n            \n            const expiredContainers = food.containers.filter(\n                container => container.expiryDate && new Date(container.expiryDate).getDate() < (new Date()).getDate()\n            ).length;\n\n            const openedContainers = food.containers.filter(\n                container => !!container.dateOpened\n            ).length;\n\n            const totalWorth = food.containers.reduce(\n                (sum, { price }) => sum + new Price(price.amount, price.currency).as(\"EUR\").amount, \n                0);\n            const numberOfContainers = food.containers.length;\n\n            const percentageLeft = (totalCapacity === 0) ? \n                0 : \n                totalAmount / totalCapacity * 100;\n            \n            return {\n                __typename: \"FoodInfo\",\n                numberOfContainers,\n                expiredContainers,\n                openedContainers,\n                totalAmount,\n                totalWorth,\n                percentageLeft,\n            };\n        }\n    },\n    Mutation: {\n        addFood: (_: any, { name, unit } : { name: string, unit: Unit}) => {\n            const db = loadDatabase();\n            db.foods.push({\n                __typename: \"Food\",\n                name, unit,\n                containers: [],\n            });\n\n            saveDatabase(db);\n        },\n\n        buyFood: (_: any, { buyOrders } : {buyOrders: BuyOrder[]}) => {\n            const db = loadDatabase();\n            const newFoodContainers : FoodContainer[] = [];\n            buyOrders.forEach(buyOrder => {\n                const { foodName: name, price, expiryDate, amount } = buyOrder;\n                \n                // locate the food this order is referring to\n                const foodId = db.foods.findIndex(food => food.name === name);\n                \n                // add food to the db if it is found\n                if (foodId > -1) {\n                    //@ts-ignore\n                    const container = {\n                        __typename: \"FoodContainer\",\n                        id: randomString(24),\n                        capacity: convertToFloat(amount),\n                        amount: convertToFloat(amount),\n                        datePurchased: new Date(),\n                        expiryDate: expiryDate ? new Date(expiryDate) : null, \n                        dateOpened: null,\n                        price: new Price(roundNumber(price.amount), price.currency)\n                    } as FoodContainer;\n\n                    db.foods[foodId].containers.push(container);\n                    newFoodContainers.push(container);\n                }\n            });\n\n            saveDatabase(db);\n            return newFoodContainers;\n        },\n        consumeFoods: (_: any, { consumeOrders }: {consumeOrders: ConsumeOrder[]}) => {\n            const db = loadDatabase();\n            let hasError = false;\n            consumeOrders.forEach(order => {\n                const { containerID, amount } = order;\n                const foodId = db.foods.findIndex(\n                    food => food.containers.find(con => con.id === containerID)\n                );\n\n                if (foodId < 0) {\n                    console.log(\"food id < 0\");\n                    hasError = true;\n                    return;\n                };\n                const containerIndex = db.foods[foodId]\n                    .containers\n                    .findIndex(con => con.id === containerID);\n                \n                // check if container is okay to deduct\n                const container = db.foods[foodId].containers[containerIndex] as FoodContainer;\n                if (container.amount < amount) {\n                    console.log('amount isnt right');\n                    hasError = true;\n                    return;\n                }\n\n                // apply the deduction\n                db.foods[foodId].containers[containerIndex].amount -= amount;\n                if (!db.foods[foodId].containers[containerIndex].dateOpened) {\n                    db.foods[foodId].containers[containerIndex].dateOpened = new Date();\n                }\n\n                // check if the container needs to be disposed\n                // you dispose a container if it is empty, or it has really really few food left.\n                const {amount: remainingAmount, capacity} = db.foods[foodId].containers[containerIndex];\n                if (remainingAmount / capacity < 0.01) {\n                    db.foods[foodId].containers = db.foods[foodId].containers.filter((_, i) => i !== containerIndex);\n                }\n            });\n\n            if (!hasError) {\n                saveDatabase(db);\n            }\n            return hasError ? \n                consumeOrders.map(({containerID}) => containerID) \n                : null;\n        }\n    }\n}\nexport default resolvers;\n","import React from 'react';\nimport { withHeader } from '../Header';\nimport \"./style.scss\";\nimport { toast } from 'react-toastify';\nimport { localStorageKey, initialDatabase } from '../../data/resolvers';\n\ntype ButtonWithDescriptionRowProps = {\n    title: string,\n    description: string,\n    buttonTitle: string,\n    onClick?: () => void\n}\nconst ButtonWithDescriptionRow: React.FC<ButtonWithDescriptionRowProps> = ({\n    title, description, buttonTitle, onClick \n}) => {\n    return (\n        <div className=\"Settings-DescriptionRow\">\n            <div className=\"Settings-DescriptionRowLeft\">\n                <div className=\"Settings-DescriptionRowTitle\">\n                    {title}\n                </div>\n                <div className=\"Settings-DescriptionRowDescription\">\n                    {description}\n                </div>\n            </div>\n            <div className=\"Settings-DescriptionRowRight\">\n                <div className=\"Settings-DescriptionRowButton\" onClick={onClick}>\n                    { buttonTitle }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nconst settingsConfig: ButtonWithDescriptionRowProps[] = [\n    {\n        title: \"Reset Database\",\n        description: \"Remove all data you have saved in the local storage. This can not be undone.\",\n        buttonTitle: \"Remove\",\n        onClick: () => {\n            window.localStorage.setItem(localStorageKey, JSON.stringify(initialDatabase));\n            toast.info(\"Database has been reset.\", {\n                autoClose: 3000,\n                onClose: () => window.location.reload()\n            });\n        }\n    },\n    {\n        title: \"Validate Database\",\n        description: \"Validate the values in the current database and try to correct it.\",\n        buttonTitle: \"Validate\"\n    },\n];\n\nconst SettingsPage: React.FC = () => {\n    return (\n        <div className=\"Settings-Container\">\n            {\n                settingsConfig.map((settings, i) => (\n                    <ButtonWithDescriptionRow \n                        key={i}\n                        {...settings}\n                    />\n                ))\n            }\n        </div>\n    );\n}\n\nexport default withHeader(SettingsPage, {\n    title: \"Settings\"\n});","import React from 'react';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport CenterNotice, { CenterNoticeSwitch} from '../CenterNotice';\nimport FoodCard from '../FoodCard';\nimport { FoodContainer } from '../../data/typedefs';\nimport SearchList from \"../../components/SearchList\";\nimport \"./style.scss\";\n\nconst GET_FOOD_LIST = gql`\n    query {\n        foods @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                totalAmount\n                numberOfContainers   \n            }\n        }\n    }\n`;\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    }\n};\n\ntype FoodTypePickerProps = {\n    onFoodSelected: (food: string) => void\n    filterFood?: (food: QueryResultType) => boolean\n};\nconst FoodTypePicker: React.FC<FoodTypePickerProps> = ({\n    onFoodSelected, filterFood\n}) => {\n\n    const { loading, error, data, refetch } = useQuery(GET_FOOD_LIST);\n    \n    React.useEffect(() => {\n        refetch();\n    }, [onFoodSelected, refetch]);\n    \n    if (loading) {\n        return (\n            <CenterNotice iconName=\"hamburger\" title=\"Loading Food List...\" />\n        )\n    } else if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const foodOptions = data.foods as QueryResultType[];\n    const finalOptions = filterFood ? \n        foodOptions.filter(filterFood) \n        : foodOptions;\n    \n    return (\n        <div className=\"FoodTypePicker-Container\">\n            <CenterNoticeSwitch \n                watch={finalOptions} \n                iconName=\"hamburger\" title=\"No food available\"\n                subtitle=\"Add some food or buy some containers for them and try again.\"\n            >\n                <SearchList list={finalOptions}\n                    filterFunc={\n                        (food, text) => food.name.toLowerCase().includes(text.toLowerCase())\n                    }\n                    inputConfig={{\n                        name: \"FoodSearchInput\",\n                        iconName: \"search\",\n                        placeholder: \"Search for food...\"\n                    }}\n                    minimumSearchLength={1}\n                    renderItem={food => (\n                        <FoodCard {...food} onClick={() => onFoodSelected(food.name)} />\n                    )}\n                />\n            </CenterNoticeSwitch>\n        </div>\n    )\n};\n\nexport default FoodTypePicker;","import React from 'react';\nimport Form, { FormLayout, FormValueType } from '../../components/Form';\n\nimport Button from '../../components/Button';\nimport { BuyOrder, RawCurrency, FoodContainer } from '../../data/typedefs';\nimport FoodCard from '../../components/FoodCard';\nimport { gql } from \"@apollo/client\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Currency } from '../../data/types';\nimport StickyBox from 'react-sticky-box';\n\nconst FOOD_INFO_QUERY = gql`\n    query FoodInfo($name: String!) {\n        food(name: $name) @client {\n            name\n            unit\n            containers {\n                expiryDate\n                dateOpened\n            }\n            info {\n                totalAmount\n                numberOfContainers\n            }\n        }\n    }\n`;\n\ntype QueryResultType = {\n    name: string,\n    unit: string,\n    containers: FoodContainer[],\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n    style?: React.CSSProperties\n};\nconst FoodInfoSummaryComponent: React.FC<QueryResultType> = (props) => (\n    <div className=\"FoodQuantityInfo-Summary\">\n        <p>You are buying:</p>\n        <FoodCard {...props} />\n    </div>\n);\n\nconst formLayout: FormLayout = [\n    [\n        {\n            label: \"Container Capcity\", type: \"number\",\n            name: \"amount\", placeholder: \"Amount\", iconName:\"local_mall\",\n            required: true, flex: 2,\n            validate: value => !!(value && value > 0)\n        },\n        {\n            label: \"# Containers\", type: \"number\",\n            name: \"containerCount\", iconName: \"kitchen\",\n            required: true, flex: 1,\n            validate: value => !!(value && value > 0)\n        }\n    ],\n    [\n        {\n            label: \"Price\", type: \"number\",\n            name: \"price\", iconName: \"local_atm\",\n            required: true,\n            validate: value => !!(value && value > 0),\n            flex: 2\n        },\n        {\n            label: \"Currency\", type: \"select\",\n            name: \"currency\", iconName: \"euro\",\n            flex: 1,\n            options: Object.values(RawCurrency)\n        }\n    ],\n    [\n        {\n            label: \"Price is for...\", type: \"select\",\n            name: \"priceType\", iconName: \"live_help\",\n            options: [\"Each Container\", \"All Containers\"],\n        }\n    ],\n    [\n        {\n            label: \"Expiry Date\", type: \"date\",\n            name: \"expiryDate\", iconName: \"calendar\"\n        }\n    ]\n];\n\nconst computeDisabledFields = (form: FormValueType) => {\n    if((form.containerCount as number) <= 1) {\n        return [\"priceType\"];\n    }\n\n    return [];\n}\ntype FormType = {\n    amount: number,\n    price: number,\n    currency: Currency,\n    containerCount: number,\n    priceType: \"Each Container\" | \"All Containers\",\n    expiryDate: Date | null,\n}\n\nconst initialValue: FormType = {\n    amount: 0,\n    price: 0,\n    currency: \"EUR\",\n    containerCount: 1,\n    priceType: \"All Containers\",\n    expiryDate: null\n}\n\ntype FoodQuantityInfoProps = {\n    food: string | null,\n    onPreviousStepRequested: () => void,\n    onInfoProvided: (order: BuyOrder[]) => void\n};\nconst FoodQuantityInfoComponent: React.FC<FoodQuantityInfoProps> = ({\n    food,\n    onPreviousStepRequested,\n    onInfoProvided,\n}) => {\n    const [ form, setFormValue ] = React.useState(initialValue);\n\n    const { data, loading } = useQuery(FOOD_INFO_QUERY, {\n        variables: {\n            name: food\n        }\n    });\n    if (loading) return null;\n    console.log('form')\n    console.log(form)\n    const onSave = () => {\n        const {\n            amount, price, currency, containerCount, priceType, expiryDate\n        } = form;\n        \n        const buyOrders = Array(containerCount).fill({\n            amount, \n            price: {\n                currency, \n                amount: (priceType === \"All Containers\") ? \n                    price / containerCount : price\n            },\n            foodName: food as string,\n            expiryDate\n        } as BuyOrder);\n\n        onInfoProvided(buyOrders);\n    };\n\n    const isFormValid = form.amount > 0 && form.containerCount > 0 && form.price >= 0;\n\n    return (\n        <div className=\"FoodQuantityInfo-Container\">\n            { !loading && (\n                <StickyBox offsetTop={-16}>\n                    <FoodInfoSummaryComponent \n                        {...data.food as QueryResultType}\n                    />\n                </StickyBox>\n            )}\n            \n            <div className=\"FoodQuantityInfo-Form\">\n                <Form withSubmitButton={false} layout={formLayout}\n                    initialValue={initialValue}\n                    setFormValue={setFormValue as (form: FormValueType) => void}\n                    disabledFields={computeDisabledFields}\n                    />\n            </div>\n            <div className=\"FoodQuantityInfo-ButtonRow\">\n                <Button title=\"Previous\" icon=\"navigate_before\" color=\"secondary\" onClick={onPreviousStepRequested} />\n                <Button title=\"Next\" icon=\"save\" color=\"info\" onClick={onSave} disabled={!isFormValid} />\n            </div>\n        </div>\n    )\n};\n\nexport default FoodQuantityInfoComponent;","import React from 'react'\nimport { range } from 'lodash';\nimport \"./style.scss\";\n\ntype StepIndicatorProps = {\n    step: number,\n    totalSteps: number\n};\ntype StepComponentProps = {\n    i: number,\n    status: \"passed\" | \"ongoing\" | \"pending\"\n};\nconst StepIndicator: React.FC<StepIndicatorProps> = ({\n    step, totalSteps\n}) => { \n    const StepComponent: React.FC<StepComponentProps> = ({ i, status }) => (\n        <div className={`StepIndicator-StepComponent StepIndicator-StepComponent-${status}`}>\n            <div className=\"StepIndicator-Line\" />\n            <div className=\"StepIndicator-Center\">\n                {i + 1}\n            </div>\n            <div className=\"StepIndicator-Line\" />\n        </div>\n    );\n\n    const getStatusFromStep = (i: number) => {\n        if (i < step) return \"passed\";\n        else if (i === step) return \"ongoing\";\n        else return \"pending\";\n    }\n    return (\n        <div className=\"StepIndicator-Container\">\n            {\n                range(totalSteps).map(i => (\n                    <StepComponent i={i} status={getStatusFromStep(i)} />\n                ))\n            }\n        </div>\n\n    )\n};\n\nexport default StepIndicator;","import React from 'react';\nimport StepIndicator from './StepIndicator';\nimport { Icon } from \"@material-ui/core\";\nimport \"./style.scss\";\n\ntype WizardProps = {\n    open: boolean;\n    requestClose: () => void;\n    style?: object;\n    children: (step: number, toStep: (step: number) => void) => React.ReactNode;\n    headerTitle: (step: number) => string;\n}\nconst Wizard: React.FC<WizardProps> = ({\n    open, requestClose, children, style, headerTitle\n}) => {\n    const [step, setStep] = React.useState(0);\n    \n    React.useEffect(() => {\n        setStep(0);\n    }, [open]);\n\n    if(!open) return null;\n    \n    return (\n        <div className=\"Wizard-Container\" style={style}>\n            <div className=\"Wizard-Header\">\n                <div className=\"Header\">\n                    <div>\n                        <Icon style={{fontSize: 32}} onClick={requestClose}>\n                            navigate_before\n                        </Icon>\n                    </div>\n                    <div className=\"Header-NavButtonGroup\">\n                        { headerTitle(step) }\n                    </div>\n                </div>\n            </div>\n            <StepIndicator step={step} totalSteps={3} />\n            <div className=\"Wizard-Content\">\n                { children(step, setStep) }\n            </div>\n        </div>\n    );\n};\n\nexport default Wizard;","import React from 'react';\nimport { BuyOrder, Currency } from '../../data/typedefs';\nimport FoodTypePicker from \"../../components/FoodTypePicker\";\nimport FoodQuantityInfo from \"./FoodQuantityInfo\";\nimport Button from '../../components/Button';\nimport CenterNotice from '../../components/CenterNotice';\nimport Wizard from '../../components/Wizard';\nimport \"./style.scss\";\n\ntype BuyOrderFormType = {\n    selectedFood: string,\n    price: number,\n    currency: Currency,\n    amount: number,\n    containersCount: number,\n    priceType: \"Each Container\" | \"All Containers\" | null,\n    expiryDate: Date | null\n};\n\ntype SelectFoodPopupProps = {\n    open: boolean;\n    requestClose: () => void;\n    onBuyOrdersAdded: (orders: BuyOrder[]) => void;\n    style?: object;\n};\nconst SelectFoodPopup: React.FC<SelectFoodPopupProps> = ({\n    open, requestClose, style, onBuyOrdersAdded\n}) => {\n\n    const initialFormValue : BuyOrderFormType = {\n        selectedFood: \"\",\n        price: 0,\n        currency: \"EUR\",\n        amount: 0,\n        containersCount: 0, \n        priceType: \"Each Container\",\n        expiryDate: null\n    };\n    const [selectedFood, setSelectedFood] = React.useState(null as string | null);\n    const [ form, setForm ]               = React.useState(initialFormValue);\n\n    const setFormField = (fieldName: string, value: any) => (\n        setForm({...form, [fieldName]: value})\n    );\n    \n    React.useEffect(() => {\n        setForm(initialFormValue);\n    }, [open]);\n\n    if (!open)return null;\n\n    const headerTitle = (step: number) => {\n        switch (step) {\n            case 0:\n                return \"Select Food\";\n            case 1:\n                return \"Fill in Info\";\n            case 2:\n                return \"Success\";\n            default:\n                return \"\";\n        }\n    };\n\n    const popupContent = (\n        step: number, \n        setStep: (step: number) => void\n    ) => {\n        switch(step) {\n            case 0:\n                return (\n                    <FoodTypePicker \n                        onFoodSelected={food => {\n                            setFormField(\"selectedFood\", food); \n                            setStep(1);\n                        }} \n                    />\n                );\n            case 1:\n                return (\n                    <FoodQuantityInfo\n                        food={selectedFood}\n                        onPreviousStepRequested={() => setStep(0)}\n                        onInfoProvided={(order: BuyOrder[]) => {\n                            onBuyOrdersAdded(order)\n                            setStep(2)\n                        }}\n                    />\n                );\n            case 2:\n                return (\n                    <>\n                        <CenterNotice iconName=\"check_circle_outline\" title=\"Food added to basket\"\n                            subtitle=\"You can choose 'Buy again' to add more, or 'Close' to review your basket\" \n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Close\" icon=\"close\" color=\"secondary\" onClick={requestClose} />\n                            <Button title=\"Buy Again\" icon=\"refresh\" color=\"info\" onClick={() => setStep(0)} />\n                        </div>\n                    </>\n                )\n            default:\n                return null;\n        }\n    }\n    return (\n        <Wizard \n            open={open} \n            requestClose={requestClose}\n            headerTitle={headerTitle} \n            style={style}>\n            { popupContent }\n        </Wizard>\n    );\n};\n\nexport default SelectFoodPopup;","import React from 'react';\nimport GenericCard, { GenericCardExtraProps } from '../../components/GenericCard';\nimport { BuyOrder } from '../../data/typedefs';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst FOOD_QUERY = gql`\n    query GetFood($name: String!) {\n        food(name: $name) @client {\n            unit\n        }\n    }\n`;\ntype PendingOrderCardProps = GenericCardExtraProps & {\n    order: BuyOrder\n};\n\nconst PendingOrderCard: React.FC<PendingOrderCardProps> = ({\n    order, ...props\n}) => {\n    const { foodName, amount: addAmount, expiryDate } = order;\n\n    const { loading, data, error } = useQuery(FOOD_QUERY, {\n        variables: { name: foodName }\n    });\n    \n    if (error) {\n        alert(error.message);\n        return null;\n    }   \n    if(loading) return null;\n    return (\n        <GenericCard \n            mainText={foodName}\n            smallComponent={expiryDate ? expiryDate.toLocaleString(\"en-US\") : \"No expiry date\"}\n            rightComponent={<div>{`${addAmount} ${data.food.unit}`}</div>}\n            {...props}\n        />\n    )   \n};\n\nexport default PendingOrderCard;","import React from 'react';\nimport { BuyOrder, Price } from '../../data/typedefs';\n\ntype PendingInfoSummaryProps = {\n    orders: BuyOrder[]\n}\nconst PendingInfoSummary: React.FC<PendingInfoSummaryProps> = ({\n    orders\n}) => {\n    if (orders.length === 0) return null;\n\n    // compute info\n    const totalAmount = orders.reduce((total, order) => (\n        new Price(order.price.amount, order.price.currency)\n            .as(\"EUR\")\n            .add(total)\n    ), new Price(0, \"EUR\"));\n\n    const numDifferentFoods = Array.from(\n        new Set(orders.map(order => order.foodName)).values()\n    ).length;\n    const numContainers = orders.length;\n\n    return (\n        <div className=\"BuyPage-SummaryRow\">\n            <div className=\"BuyPage-SummaryRow-Left\"/>\n            <div className=\"BuyPage-SummaryRow-Total\">\n                <div>{ numContainers } Container(s)</div>\n                <div>\n                { numDifferentFoods } Different food\n                </div>\n                <div className=\"BuyPage-SummaryRow-Sum\">\n                    Total: {totalAmount.amount.toFixed(2)} EUR\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PendingInfoSummary;","import React from 'react';\nimport SelectFoodPopup from './SelectFoodPopup';\n\nimport Button from '../../components/Button';\nimport { BuyOrder } from '../../data/typedefs';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport PendingOrderCard from './PendingOrderCard';\nimport PendingInfoSummary from './PendingInfoSummary';\nimport { useHeader } from '../Header';\n\nimport { gql } from '@apollo/client';\nimport { useMutation } from '@apollo/react-hooks';\nimport { toast } from 'react-toastify';\nimport \"./style.scss\";\n\nconst ADD_ORDERS = gql`\n    mutation buyFoods($orders: [BuyOrder]!) {\n        buyFood(buyOrders: $orders) @client {\n            id\n        }\n    }\n`;\n\nconst BuyPage: React.FC = () => {\n    const [ openSelectPopup, setOpenSelectPopup] = React.useState(false);\n    const [ pendingBuyOrders, setPendingBuyOrders ] = React.useState([] as BuyOrder[]);\n    const [ hasJustBought, setHasJustBought] = React.useState(false);\n    const { setNavOptions } = useHeader();\n    React.useEffect(() => {\n        setNavOptions({\n            title: \"Purchase Food\",\n            navButtons: [\n                {\n                    iconName: \"add\",\n                    onClick: () => setOpenSelectPopup(true)\n                }\n            ]\n        });\n    }, []);\n\n    const [ buyFoodFunc ] = useMutation(ADD_ORDERS);\n\n    // handler of the final buy button\n    const onSubmitBuyOrders = () => {\n        buyFoodFunc({\n            variables: { orders: pendingBuyOrders}\n        });\n        toast.success(\"Items bought\", {\n            autoClose: 1000,\n            onOpen: () => {\n                setHasJustBought(true);\n            },\n            onClose: () => {\n                setOpenSelectPopup(false);\n                setPendingBuyOrders([]);\n                setHasJustBought(false);\n            }\n        });\n    };\n\n    return (\n        <>\n            <SelectFoodPopup \n                open={openSelectPopup} \n                requestClose={() => setOpenSelectPopup(false)}\n                onBuyOrdersAdded={orders => setPendingBuyOrders([...pendingBuyOrders, ...orders])}\n            />\n            <div className=\"BuyPage-Main\">\n                <CenterNoticeSwitch watch={pendingBuyOrders} \n                    iconName=\"shopping_cart\" \n                    title=\"Nothing to buy yet\"\n                    subtitle=\"Click the '+' button above to add a new item\">\n                    <>\n                        <div className=\"BuyPage-PendingItemContainers\">\n                            {\n                                pendingBuyOrders.map((order, i) => (\n                                    <PendingOrderCard order={order} \n                                        actionButton={{\n                                            iconName: 'cancel',\n                                            onClick: () => setPendingBuyOrders(\n                                                // remove this order from the list of pending orders\n                                                pendingBuyOrders.filter((_, j) => i !== j)\n                                            )\n                                        }}\n                                    />\n                                ))\n                            }\n                        </div>\n                        {\n                            !openSelectPopup && (\n                                <PendingInfoSummary orders={pendingBuyOrders} />\n                            )\n                        }\n                        <Button \n                            disabled={pendingBuyOrders.length === 0 || hasJustBought} \n                            title=\"Buy\" color=\"info\" icon=\"shopping_cart\" \n                            onClick={onSubmitBuyOrders} \n                        />\n                    </>\n                </CenterNoticeSwitch>\n            </div>\n            \n        </>\n    );\n}\n\nexport default BuyPage;","import React from 'react';\nimport Form, { FormLayout } from '../../components/Form';\n\nconst AmountInterpretationType = {\n    \"Amount Used\": 0,\n    \"Amount Left\": 1,\n    \"Percentage Left\": 2,\n    \"All\": 3\n};\n\ntype FormValueType = {\n    amount: number;\n    interpretationType: keyof typeof AmountInterpretationType;\n};\n\nconst formLayout: FormLayout = [\n    [{\n        name: \"amount\",\n        label: \"Amount\",\n        type: \"number\",\n        iconName: \"fitness_center\"\n    }],\n    [{\n        name: \"interpretationType\",\n        label: \"Interpret amount as...\",\n        type: \"select\",\n        options: Object.keys(AmountInterpretationType),\n        iconName: \"comment\"\n    }]\n];\n\ntype AmountInputProps = {\n    unit: string;\n    amount: number;\n    capacity: number;\n    onAmountChosen: (amount: number) => void\n}\nconst AmountInput: React.FC<AmountInputProps> = ({\n    amount, capacity, onAmountChosen, unit\n}) => {\n    const initialFormValue: FormValueType = {\n        amount: 0,\n        //@ts-ignore\n        interpretationType: Object.keys(AmountInterpretationType)[0]\n    }\n    const [form, setForm] = React.useState(initialFormValue);\n\n    // derived properties\n    const realValue = (() => {\n        const type = AmountInterpretationType[form.interpretationType];\n        switch(type) {\n            case 0:\n                return form.amount;\n            case 1:\n                return capacity - form.amount;\n            case 2:\n                return parseFloat((amount - capacity * (form.amount / 100)).toFixed(2));\n            default:\n                return amount;\n        }\n    })();\n\n    const percentLeft = (amount - realValue) / capacity * 100;\n\n    // report new amount when values changed\n    React.useEffect(() => {\n        onAmountChosen(realValue);\n    }, [realValue, onAmountChosen]);\n\n    return (\n        <div className=\"AmountInput-Container\">\n            <Form \n                initialValue={initialFormValue}\n                layout={formLayout}\n                withSubmitButton={false}\n                submitIconName=\"check\"\n                submitButtonText=\"Consume\"\n                setFormValue={form => setForm(form as FormValueType)}\n            />\n            <div className=\"AmountInput-Summary\">\n                Remaining: {'  '}\n                <div className=\"AmountInput-SummaryText\">\n                    {(amount - realValue).toFixed(2)} {unit} ({percentLeft.toFixed(1)} %)\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AmountInput;","import React from 'react';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\nimport { FoodContainer, Price } from '../../data/typedefs';\nimport ContainerCard from '../../components/ContainerCard';\nimport FoodCard from '../../components/FoodCard';\nimport Button from '../../components/Button';\nimport AmountInput from './AmountInput';\nimport StickyBox from 'react-sticky-box';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nconst CONTAINER_QUERY = gql`\n    query getContainersForFood($food: String!) {\n        food(name: $food) @client {\n            name\n            unit\n            info {\n                totalAmount\n                numberOfContainers\n            }\n\n            containers {\n                id\n                capacity\n                amount\n                datePurchased\n                expiryDate\n                dateOpened\n                price\n\n                opened\n                expired\n                percentageLeft\n            }\n        }\n    }\n`;\n\ntype QueryResultType = {\n    // FoodCard props\n    name: string,\n    unit: string,\n    info: {\n        totalAmount: number,\n        numberOfContainers: number\n    },\n\n    // Containers list props\n    containers: [{\n        id: string;\n        capacity: number;\n        amount: number;\n        datePurchased: Date;\n        expiryDate?: Date;\n        dateOpened?: Date;\n        price: Price;\n\n        opened: boolean;\n        expired: boolean;\n        percentageLeft: number;\n    }]\n};\n\ntype ContainerPickerProps = {\n    food: string | null;\n    onToPreviousPage: () => void;\n    onSelectContainer: (container: FoodContainer, amount: number) => void;\n};\n\nconst ContainerPicker: React.FC<ContainerPickerProps> = ({\n    food: foodName, onSelectContainer, onToPreviousPage\n}) => {\n    \n    const { loading, error, data, refetch } = useQuery(CONTAINER_QUERY, {\n        variables: {\n            food: foodName\n        }\n    });\n\n    const [containerInd, setContainerInd] = React.useState(0);\n    const [amountUsed, setAmountUsed] = React.useState(0);\n\n    React.useEffect(() => {\n        if (foodName) {\n            refetch({\n                food: foodName\n            });\n        }\n        setContainerInd(0);\n    }, [foodName]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const food = data.food as QueryResultType;\n\n    const {\n        name, unit, containers, info\n    } = food;\n\n    const selectedContainer = containers[containerInd];\n\n    const onConfirmInfo = () => {\n        onSelectContainer(selectedContainer, amountUsed);\n    };\n\n    const isAmountValid = () => {\n        if(!selectedContainer) return false;\n        return amountUsed > 0 && amountUsed <= selectedContainer.amount;\n    }\n\n    return (\n        <div className=\"ContainerPicker-Container\">\n            <StickyBox offsetTop={-8}>\n                <div style={{paddingTop: 8}}>\n                    Selecting containers for:\n                    <FoodCard \n                        name={name} unit={unit} \n                        containers={containers as unknown as FoodContainer[]} \n                        info={info} />\n                </div>\n            </StickyBox>\n            Container #{containerInd + 1} of {containers.length}\n            <div style={{paddingLeft: 24, paddingRight: 24}}>\n                <Slider dots infinite={false} \n                    afterChange={containerId => setContainerInd(containerId)}>\n                    {\n                        food.containers.map(\n                            (container, i) => (<ContainerCard\n                                key={i} \n                                container={container} \n                                unit={food.unit} \n                            />)\n                        )\n                    }\n                </Slider>\n            </div> \n            <div className=\"ContainerPicker-AmountInputContainer\">\n                {\n                    selectedContainer && (\n                        <AmountInput\n                            unit={food.unit}\n                            amount={selectedContainer.amount} \n                            capacity={selectedContainer.capacity}\n                            onAmountChosen={amount => setAmountUsed(amount)}\n                        />\n                    )\n                }\n            </div>\n            <div className=\"ContainerPicker-ButtonRow\">\n                <Button title=\"Previous\" icon=\"refresh\" color=\"secondary\"\n                    onClick={onToPreviousPage} \n                />\n                <Button title=\"Confirm\"  icon=\"check\" \n                    color=\"info\"\n                    disabled={!isAmountValid()}\n                    onClick={onConfirmInfo}\n                />\n            </div>\n        </div>\n    );\n    \n}\n\nexport default ContainerPicker;\n","import React from 'react';\nimport Wizard from '../../components/Wizard';\nimport FoodTypePicker from '../../components/FoodTypePicker';\nimport Button from '../../components/Button';\nimport ContainerPicker from './ContainerPicker';\nimport CenterNotice from '../../components/CenterNotice';\n\nimport { FoodContainer } from '../../data/typedefs';\n\nexport type PendingConsumeOrder = {\n    food: string,\n    container: FoodContainer,\n    amount: number\n}\n\ntype SelectFoodPopupProps = {\n    open: boolean;\n    requestClose: () => void;\n    onConsumeOrderAdded: (order: PendingConsumeOrder) => void;\n}\n\nconst SelectFoodPopup: React.FC<SelectFoodPopupProps> = ({\n    open, requestClose, onConsumeOrderAdded\n}) => {\n    const [selectedFood, setSelectedFood] = React.useState(null as string | null);\n    \n    const headerTitle = (step: number) => {\n        switch(step) {\n            case 0:\n                return \"Select Food\";\n            case 1:\n                return \"Select Container\";\n            case 2:\n                return \"Success\";\n            default:\n                return \"\";\n        }\n    };\n\n    const reportConsumeOrder = (container: FoodContainer, amount: number) => {\n        onConsumeOrderAdded({\n            food: selectedFood as string,\n            container,\n            amount\n        });\n    };\n\n    const popupContent = (\n        step: number,\n        setStep: (step: number) => void\n    ) => {\n        switch(step) {\n            case 0:\n                return (\n                    <FoodTypePicker\n                        filterFood={food => food.containers.length > 0} \n                        onFoodSelected={food => {setSelectedFood(food); setStep(1)}} \n                    />\n                );\n            case 1:\n                return (\n                    <ContainerPicker \n                        food={selectedFood}\n                        onToPreviousPage={() => setStep(0)}\n                        onSelectContainer={(container, amount) => {\n                            reportConsumeOrder(container, amount); \n                            setStep(2);\n                        }}\n                    />\n                );\n            case 2:\n                return (\n                    <>\n                        <CenterNotice iconName=\"check_circle_outline\" title=\"Record added\"\n                            subtitle=\"You can choose 'Add Another' to add another record, or 'Close' to review your consumption order.\" \n                        />\n                        <div className=\"FoodQuantityInfo-ButtonRow\">\n                            <Button title=\"Close\" icon=\"close\" color=\"secondary\" onClick={requestClose} />\n                            <Button title=\"Add Another\" icon=\"refresh\" color=\"info\" onClick={() => setStep(0)} />\n                        </div>\n                    </>\n                )\n            default: \n                return null;\n        }\n    }\n\n    return (\n        <Wizard \n            open={open} \n            requestClose={requestClose}\n            headerTitle={headerTitle}>\n                {popupContent}\n        </Wizard>\n    );\n};\n\nexport default SelectFoodPopup;\n","import React from 'react';\nimport { Icon } from '@material-ui/core';\nimport GenericCard from '../../components/GenericCard';\nimport PercentageBar from '../../components/PercentageBar';\nimport { Food, FoodContainer } from '../../data/typedefs';\nimport { PendingConsumeOrder } from './SelectFoodPopup';\nimport { gql } from '@apollo/client';\nimport { useQuery } from '@apollo/react-hooks';\n\nconst UNIT_QUERY = gql`\n    query getUnit($food: String!) {\n        food(name: $food) @client {\n            unit\n        }\n    }\n`;\ntype PendingConsumptionCardProps = PendingConsumeOrder & {\n    onRemove: () => void\n};\n\nconst PendingConsumptionCard: React.FC<PendingConsumptionCardProps> = ({\n    food, container, amount, onRemove\n}) => {\n    const { loading, error, data, refetch } = useQuery(UNIT_QUERY);\n    \n    React.useEffect(() => {\n        refetch({ food });\n    }, [food]);\n\n    if (loading) {\n        return null;\n    }\n\n    if (error) {\n        alert(error.message);\n        return null;\n    }\n\n    const { unit } : { unit: string } = data.food;\n    const RightComponent = (\n        <div className=\"PendingConsumptionCard-Right\">\n            -{ amount } { unit }\n        </div>\n    );\n    const originalPercentage = parseFloat(\n        ((container.amount / container.capacity) * 100).toFixed(2)\n    );\n\n    const consumedPercentage = parseFloat(\n        (amount / container.capacity * 100).toFixed(2)\n    );\n    const AuxComponent = (\n        <div className=\"PendingConsumptionCard-SmallComponent\">\n            <div>\n                {originalPercentage}% <Icon>arrow_right</Icon> {originalPercentage - consumedPercentage}%\n            </div>\n            <PercentageBar \n                color=\"orange\"\n                percentageLeft={originalPercentage}\n                percentageDifference={consumedPercentage} \n            />\n            {\n                (originalPercentage - consumedPercentage) < 1 && (\n                    <div className=\"PendingConsumptionCard-DisposeLabel\">\n                        To be disposed\n                    </div>\n                )\n            }\n        </div>\n    );\n\n    return (\n        <GenericCard \n            mainText={food}\n            rightComponent={RightComponent}\n            smallComponent={AuxComponent}\n            actionButton={{\n                iconName: \"highlight_off\",\n                onClick: onRemove\n            }}\n        />\n    );\n};\n\nexport default PendingConsumptionCard;","import React from 'react';\nimport { useHeader } from '../Header';\nimport { CenterNoticeSwitch } from '../../components/CenterNotice';\nimport Button from '../../components/Button';\nimport SelectFoodPopup, { PendingConsumeOrder } from './SelectFoodPopup';\nimport PendingConsumptionCard from './PendingConsumptionCard';\nimport { gql } from '@apollo/client';\nimport { useMutation } from '@apollo/react-hooks';\nimport { toast } from 'react-toastify';\nimport \"./style.scss\";\n\nconst CONSUME_ORDERS = gql`\n    mutation consumeFoods($orders: [ConsumeOrder]!) {\n        consumeFoods(consumeOrders: $orders) @client {\n            id\n        }\n    }\n`;\n\nconst ConsumePage: React.FC = () => {\n    const [ openSelectPopup, setOpenSelectPopup ] = React.useState(false);\n    const [ submitConsumeOrders ] = useMutation(CONSUME_ORDERS);\n    const [ \n        pendingConsumeOrders, \n        setPendingConsumeOrders \n    ] = React.useState([] as PendingConsumeOrder[]);\n\n    const [hasJustConsumed, setHasJustConsumed] = React.useState(false);\n\n    const { setNavOptions } = useHeader();\n\n    React.useEffect(() => {\n        setNavOptions({\n            title: \"Consume Food\",\n            navButtons: [{\n                iconName: \"add\",\n                onClick: () => setOpenSelectPopup(true)\n            }]\n        });\n    }, []);\n    return (\n        <>\n            <SelectFoodPopup \n                open={openSelectPopup}\n                requestClose={() => setOpenSelectPopup(false)}\n                onConsumeOrderAdded={(order) => setPendingConsumeOrders([\n                    ...pendingConsumeOrders,\n                    order\n                ])}\n            />\n            <CenterNoticeSwitch \n                watch={pendingConsumeOrders}\n                iconName=\"whatshot\"\n                title=\"No Items added\"\n                subtitle=\"Use the '+' button above to add containers to consume.\"\n            >\n                <>\n                    <div className=\"PendingConsumption-Container\">\n                        {\n                            pendingConsumeOrders.map(\n                                (order, i) => (\n                                    <PendingConsumptionCard \n                                        {...order}\n                                        onRemove={() => setPendingConsumeOrders(\n                                            pendingConsumeOrders.filter((_, j) => i !== j)\n                                        )}\n                                    />\n                                )\n                            )\n                        }\n                    </div>\n                    <Button color=\"info\"\n                        onClick={() => {\n                            submitConsumeOrders({\n                                variables: {\n                                    orders: pendingConsumeOrders.map(order => ({\n                                        __typename: \"ConsumeOrder\",\n                                        containerID: order.container.id,\n                                        amount: order.amount\n                                    }))\n                                }\n                            });\n                            toast.success(\"Records saved...\", {\n                                autoClose: 1000,\n                                onOpen: () => {\n                                    setHasJustConsumed(true);\n                                },\n                                onClose: () => {\n                                    // reset the form\n                                    setPendingConsumeOrders([]);\n                                    setHasJustConsumed(false);\n                                }\n                            });\n                        }}\n                        disabled={pendingConsumeOrders.length === 0 || hasJustConsumed}\n                        title=\"Consume\" icon=\"whatshot\" \n                    />\n                </>\n            </CenterNoticeSwitch>\n        </>\n    );\n}\n\nexport default ConsumePage;","import { createStore, Reducer } from 'redux';\nimport { Food, FoodContainer, Price } from '../data/types';\n\nexport type State = {\n    foods: Array<Food>,\n};\n\nexport type ActionTypes = \"ADD_FOOD\"\n    | \"EDIT_FOOD\"\n    | \"BUY_FOOD\"\n    | \"CONSUME_FOOD\";\n\n\nexport type Action = {\n    type: ActionTypes,\n    data: Food | BuyFoodOrder | EditFoodOption\n}\n\nexport type EditFoodOption = {\n    foodID: string,\n    food: Food\n}\nexport type BuyFoodOrder = {\n    foodID: string,\n    quantity: number,\n    price: Price,\n    expiryDate?: Date\n}\n\nconst initialState: State = { \n    foods: [] \n};\n\nconst rootReducers: Reducer<State, Action> = (state: State = initialState, action: Action) => {\n    switch(action.type) {\n        case \"ADD_FOOD\": {\n            const newFood = action.data as Food;\n            return {...state, foods: [...state.foods, newFood]};\n        }\n\n        case \"BUY_FOOD\": {\n            const { foodID, quantity, price, expiryDate } = action.data as BuyFoodOrder;\n            const newState = {...state};\n            const food = newState.foods.find(food => food.id === foodID);\n\n            if(!food) return state;\n            food.buy(quantity, price, expiryDate);\n\n            return newState;\n        }\n        case \"EDIT_FOOD\": {\n            const { foodID, food } = action.data as EditFoodOption;\n            const newState = {\n                ...state,\n                // get all food and map them as-is,\n                // except fot the one with the same ID, update the info\n                foods: state.foods.map(\n                    f => {\n                        if (foodID !== f.id) return f;\n                        else {\n                            f.updateInfo(\n                                food.name,\n                                food.unit,\n                                food.latestTimeToConsumeAfterFirstOpen\n                            );\n                            return f;\n                        }\n                    } \n                )\n            };\n            return newState;\n        }\n\n        case \"CONSUME_FOOD\":\n        default: \n            return state;\n    }\n}\n\nexport default createStore(rootReducers);","import { typeDefs } from \"./typedefs\";\nimport resolvers from './resolvers';\n\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n    typeDefs,\n    resolvers\n});\n\nexport default client;\n","import React from 'react';\nimport Playground from './components/playground';\nimport {\n  Router, Switch, Route, useLocation, BrowserRouter\n} from 'react-router-dom';\nimport history from './history';\nimport NavBar from './pages/Navbar';\nimport  { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// pages\nimport FoodPage from './pages/Food';\nimport CreateFoodPage from './pages/CreateFood';\nimport FoodDetailsPage from './pages/FoodDetails';\nimport ContainerPage from './pages/Container';\nimport SettingsPage from './pages/Settings';\nimport BuyPage from './pages/Buy';\nimport ConsumePage from './pages/Consume';\n\nimport store from './reducers';\nimport  {Provider} from 'react-redux';\nimport Routes, { PageNames, BaseName } from './routes';\nimport { HeaderContainer } from './pages/Header';\n\nimport client from './data/graphql';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\n\nimport './App.scss';\n\nconst RouteSwitch: React.FC = () => {\n  const query = new URLSearchParams(useLocation().search);\n\n  switch(query.get('page')) {\n    case PageNames.FOOD_LIST:\n      return <FoodPage />\n    case PageNames.FOOD_ADD:\n      return <CreateFoodPage />\n    case PageNames.CONTAINERS_LIST:\n      return <ContainerPage />\n    case PageNames.FOOD_DETAILS:\n      return <FoodDetailsPage />\n    case PageNames.BUY_FOOD:\n      return <BuyPage />\n    case PageNames.CONSUME:\n      return <ConsumePage />\n    case PageNames.SETTINGS:\n      return <SettingsPage />\n    default:\n      return null;\n  }\n}\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Provider store={store}>\n            <Router  history={history}>\n                <HeaderContainer>\n                  <div className=\"Page\">\n                    <Switch>\n                      <Route path={Routes.HOME} component={RouteSwitch} />\n                    </Switch>\n                  </div>\n                </HeaderContainer>\n                <ToastContainer />\n                <NavBar />\n            </Router>\n        </Provider>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}